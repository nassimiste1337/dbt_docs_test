{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.1", "generated_at": "2023-05-12T09:34:27.791952Z", "invocation_id": "4ac180f8-422a-4a89-a66f-99094ddd2729", "env": {}, "project_id": "a9e41ef7e636f2fa52702f18083e9587", "user_id": "0d8ebef0-5787-45ea-a3a6-d63948908fb3", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.dbt_grizzly.dwh_dscp_period_inventory_tmp": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_SC_SUPPLY_PLANNING", "name": "dwh_dscp_period_inventory_tmp", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\dscp_sch\\00_stage\\dwh_dscp_period_inventory_tmp.sql", "original_file_path": "models\\20_silver_db\\dscp_sch\\00_stage\\dwh_dscp_period_inventory_tmp.sql", "unique_id": "model.dbt_grizzly.dwh_dscp_period_inventory_tmp", "fqn": ["dbt_grizzly", "20_silver_db", "dscp_sch", "00_stage", "dwh_dscp_period_inventory_tmp"], "alias": "dwh_dscp_period_inventory_tmp", "checksum": {"name": "sha256", "checksum": "46524253156ba472fb1e9cacd313b29ece4dfb34b90f25efc57d220e939c8835"}, "config": {"enabled": true, "alias": null, "schema": "SC_SUPPLY_PLANNING", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.DSCP", "stage"], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.DSCP", "stage"], "description": "Merge data from bronze NSKEP tables hub and sat", "columns": {"PERIOD_INVENTORY_KEY": {"name": "PERIOD_INVENTORY_KEY", "description": "Cl\u00e9 primaire hash\u00e9e", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEM_CD": {"name": "ITEM_CD", "description": "Code de l'article", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_CD": {"name": "SITE_CD", "description": "Code du Site", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TIME_ID": {"name": "TIME_ID", "description": "Date de d\u00e9but de semaine", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PHOTO_DT": {"name": "PHOTO_DT", "description": "Date de photo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATION_DT": {"name": "CREATION_DT", "description": "Date de cr\u00e9ation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QTY_START_PERIOD_UOM": {"name": "QTY_START_PERIOD_UOM", "description": "Quantit\u00e9 en d\u00e9but de p\u00e9riode", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QTY_AVAILABLE_UOM": {"name": "QTY_AVAILABLE_UOM", "description": "Quantit\u00e9 disponible", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EFFECTIVE_FROM": {"name": "EFFECTIVE_FROM", "description": "Date d'effectivit\u00e9", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LDTS": {"name": "LDTS", "description": "Date de chargement", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RSCR": {"name": "RSCR", "description": "Nom de la source", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HASHDIFF": {"name": "HASHDIFF", "description": "Champ de hashage", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\20_silver_db\\dscp_sch\\00_stage\\dwh_dscp_period_inventory_tmp.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["stage"], "schema": "SC_SUPPLY_PLANNING", "materialized": "ephemeral"}, "created_at": 1683884072.8168476, "relation_name": null, "raw_code": "WITH \r\n{{ cte_table_generator('E_DD_STOCK_DEB_PERIODE','RAW_NSKEP') }},\r\n{{ cte_table_generator('E_DD_STOCK_DISPO','RAW_NSKEP') }},\r\n/*{{ cte_table_generator('F4101') }},*/\r\n\r\nmerge_key as\r\n(\r\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DEB_PERIODE\r\n    UNION\r\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DISPO\r\n),\r\n\r\nsource_data as \r\n(    \r\n    select\r\n    mk.ARTICLE_CODE as ITEM_CD,\r\n    mk.SITE_CODE as SITE_CD,\r\n    NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE) as TIME_ID,\r\n    mk.PHOTO_DATE as PHOTO_DT,\r\n    sha2_binary(to_variant(array_construct(ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT)),512) as PERIOD_INVENTORY_KEY,\r\n    NVL(sdp.CREATION_DATE,sd.CREATION_DATE) as CREATION_DT,\r\n    NVL(sdp.QUANTITE_VAL,0) as QTY_START_PERIOD_UOM,\r\n    NVL(sd.QUANTITE_VAL,0) as QTY_AVAILABLE_UOM,\r\n    NVL(sdp.FD,sd.FD) as EFFECTIVE_FROM,\r\n    '{{ var(\"start_datetime\")}}'::DATETIME as LDTS, \r\n    'NSKEP' as RSCR\r\n    --Perte de cl\u00e9 via item\r\n    --sha2_binary(to_variant(array_construct(mk.SITE_CODE)),512) as SITE_KEY,\r\n    --sha2_binary(to_variant(array_construct(F4101.IMITM, F4101.IMLITM)),512) as ITEM_KEY,\r\n    --sha2_binary(to_variant(array_construct(calendar_period_date.CALENDAR_KEY)),512) as TIME_KEY,\r\n    --sha2_binary(to_variant(array_construct(calendar_photo_date.CALENDAR_KEY)),512) as PHOTO_KEY,\r\n    --sha2_binary(to_variant(array_construct(SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY)),512) as T_LINK_PERIOD_INVENTORY_KEY\r\n    from merge_key mk\r\n    left outer join E_DD_STOCK_DEB_PERIODE sdp\r\n        on sdp.ARTICLE_CODE = mk.ARTICLE_CODE\r\n        and sdp.SITE_CODE = mk.SITE_CODE\r\n        and sdp.PERIODE_CODE = mk.PERIODE_CODE\r\n        and sdp.PHOTO_DATE = mk.PHOTO_DATE\r\n    left outer join E_DD_STOCK_DISPO sd\r\n        on sd.ARTICLE_CODE = mk.ARTICLE_CODE\r\n        and sd.SITE_CODE = mk.SITE_CODE\r\n        and sd.PERIODE_CODE = mk.PERIODE_CODE\r\n        and sd.PHOTO_DATE = mk.PHOTO_DATE\r\n    --left outer join F4101 on F4101.IMLITM = mk.ARTICLE_CODE\r\n    --left outer join {{source('PARAMETERS','CALENDAR_HUB')}} calendar_period_date on calendar_period_date.DT_DDMMYYYY = NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE)\r\n    --left outer join {{source('PARAMETERS','CALENDAR_HUB')}} calendar_photo_date on calendar_photo_date.DT_DDMMYYYY = mk.PHOTO_DATE\r\n)\r\n\r\nselect \r\n    PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM, EFFECTIVE_FROM, LDTS, RSCR, --SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY, T_LINK_PERIOD_INVENTORY_KEY,\r\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM)),512) as HASHDIFF\r\nfrom source_data", "language": "sql", "refs": [], "sources": [["RAW_NSKEP", "E_DD_STOCK_DEB_PERIODE_HUB"], ["RAW_NSKEP", "E_DD_STOCK_DEB_PERIODE_S01"], ["RAW_NSKEP", "E_DD_STOCK_DEB_PERIODE_HUB"], ["RAW_NSKEP", "E_DD_STOCK_DEB_PERIODE_S01"], ["RAW_NSKEP", "E_DD_STOCK_DISPO_HUB"], ["RAW_NSKEP", "E_DD_STOCK_DISPO_S01"], ["RAW_NSKEP", "E_DD_STOCK_DISPO_HUB"], ["RAW_NSKEP", "E_DD_STOCK_DISPO_S01"], ["RAW_JDE", "F4101_HUB"], ["RAW_JDE", "F4101_S01"], ["RAW_JDE", "F4101_HUB"], ["RAW_JDE", "F4101_S01"], ["PARAMETERS", "CALENDAR_HUB"], ["PARAMETERS", "CALENDAR_HUB"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_grizzly.cte_table_generator"], "nodes": ["source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DEB_PERIODE_HUB", "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DEB_PERIODE_S01", "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DEB_PERIODE_HUB", "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DEB_PERIODE_S01", "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DISPO_HUB", "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DISPO_S01", "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DISPO_HUB", "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DISPO_S01", "source.dbt_grizzly.RAW_JDE.F4101_HUB", "source.dbt_grizzly.RAW_JDE.F4101_S01", "source.dbt_grizzly.RAW_JDE.F4101_HUB", "source.dbt_grizzly.RAW_JDE.F4101_S01", "source.dbt_grizzly.PARAMETERS.CALENDAR_HUB", "source.dbt_grizzly.PARAMETERS.CALENDAR_HUB"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\dscp_sch\\00_stage\\dwh_dscp_period_inventory_tmp.sql", "compiled": true, "compiled_code": "WITH \n\nE_DD_STOCK_DEB_PERIODE AS (\n  SELECT \n    E_DD_STOCK_DEB_PERIODE_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DEB_PERIODE_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_HUB E_DD_STOCK_DEB_PERIODE_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_S01 E_DD_STOCK_DEB_PERIODE_S01 ON E_DD_STOCK_DEB_PERIODE_HUB.ID = E_DD_STOCK_DEB_PERIODE_S01.ID\n    where E_DD_STOCK_DEB_PERIODE_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DEB_PERIODE_S01.ID ORDER BY E_DD_STOCK_DEB_PERIODE_S01.FD DESC) = 1 \n),\n\nE_DD_STOCK_DISPO AS (\n  SELECT \n    E_DD_STOCK_DISPO_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DISPO_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_HUB E_DD_STOCK_DISPO_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_S01 E_DD_STOCK_DISPO_S01 ON E_DD_STOCK_DISPO_HUB.ID = E_DD_STOCK_DISPO_S01.ID\n    where E_DD_STOCK_DISPO_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DISPO_S01.ID ORDER BY E_DD_STOCK_DISPO_S01.FD DESC) = 1 \n),\n/*\nF4101 AS (\n  SELECT \n    F4101_HUB.\"ID\", \"IMITM\",\n    F4101_S01.\"FD\", \"TD\", \"IMLITM\", \"IMAITM\", \"IMDSC1\", \"IMDSC2\", \"IMSRTX\", \"IMALN\", \"IMSRP1\", \"IMSRP2\", \"IMSRP3\", \"IMSRP4\", \"IMSRP5\", \"IMSRP6\", \"IMSRP7\", \"IMSRP8\", \"IMSRP9\", \"IMSRP0\", \"IMPRP1\", \"IMPRP2\", \"IMPRP3\", \"IMPRP4\", \"IMPRP5\", \"IMPRP6\", \"IMPRP7\", \"IMPRP8\", \"IMPRP9\", \"IMPRP0\", \"IMCDCD\", \"IMPDGR\", \"IMDSGP\", \"IMPRGR\", \"IMRPRC\", \"IMORPR\", \"IMBUYR\", \"IMDRAW\", \"IMRVNO\", \"IMDSZE\", \"IMVCUD\", \"IMCARS\", \"IMCARP\", \"IMSHCN\", \"IMSHCM\", \"IMUOM1\", \"IMUOM2\", \"IMUOM3\", \"IMUOM4\", \"IMUOM6\", \"IMUOM8\", \"IMUOM9\", \"IMUWUM\", \"IMUVM1\", \"IMSUTM\", \"IMUMVW\", \"IMCYCL\", \"IMGLPT\", \"IMPLEV\", \"IMPPLV\", \"IMCLEV\", \"IMPRPO\", \"IMCKAV\", \"IMBPFG\", \"IMSRCE\", \"IMOT1Y\", \"IMOT2Y\", \"IMSTDP\", \"IMFRMP\", \"IMTHRP\", \"IMSTDG\", \"IMFRGD\", \"IMTHGD\", \"IMCOTY\", \"IMSTKT\", \"IMLNTY\", \"IMCONT\", \"IMBACK\", \"IMIFLA\", \"IMTFLA\", \"IMINMG\", \"IMABCS\", \"IMABCM\", \"IMABCI\", \"IMOVR\", \"IMWARR\", \"IMCMCG\", \"IMSRNR\", \"IMPMTH\", \"IMFIFO\", \"IMLOTS\", \"IMSLD\", \"IMANPL\", \"IMMPST\", \"IMPCTM\", \"IMMMPC\", \"IMPTSC\", \"IMSNS\", \"IMLTLV\", \"IMLTMF\", \"IMLTCM\", \"IMOPC\", \"IMOPV\", \"IMACQ\", \"IMMLQ\", \"IMLTPU\", \"IMMPSP\", \"IMMRPP\", \"IMITC\", \"IMORDW\", \"IMMTF1\", \"IMMTF2\", \"IMMTF3\", \"IMMTF4\", \"IMMTF5\", \"IMEXPD\", \"IMDEFD\", \"IMSFLT\", \"IMMAKE\", \"IMCOBY\", \"IMLLX\", \"IMCMGL\", \"IMCOMH\", \"IMURCD\", \"IMURDT\", \"IMURAT\", \"IMURAB\", \"IMURRF\", \"IMUSER\", \"IMPID\", \"IMJOBN\", \"IMUPMJ\", \"IMTDAY\", \"IMUPCN\", \"IMSCC0\", \"IMUMUP\", \"IMUMDF\", \"IMUMS0\", \"IMUMS1\", \"IMUMS2\", \"IMUMS3\", \"IMUMS4\", \"IMUMS5\", \"IMUMS6\", \"IMUMS7\", \"IMUMS8\", \"IMPOC\", \"IMAVRT\", \"IMEQTY\", \"IMWTRQ\", \"IMTMPL\", \"IMSEG1\", \"IMSEG2\", \"IMSEG3\", \"IMSEG4\", \"IMSEG5\", \"IMSEG6\", \"IMSEG7\", \"IMSEG8\", \"IMSEG9\", \"IMSEG0\", \"IMMIC\", \"IMAING\", \"IMBBDD\", \"IMCMDM\", \"IMLECM\", \"IMLEDD\", \"IMPEFD\", \"IMSBDD\", \"IMU1DD\", \"IMU2DD\", \"IMU3DD\", \"IMU4DD\", \"IMU5DD\", \"IMDLTL\", \"IMDPPO\", \"IMDUAL\", \"IMXDCK\", \"IMLAF\", \"IMLTFM\", \"IMRWLA\", \"IMLNPA\", \"IMLOTC\", \"IMAPSC\", \"IMAUOM\", \"IMCONB\", \"IMGCMP\", \"IMPRI1\", \"IMPRI2\", \"IMASHL\", \"IMVMINV\", \"IMCMETH\", \"IMEXPI\", \"IMOPTH\", \"IMCUTH\", \"IMUMTH\", \"IMLMFG\", \"IMLINE\", \"IMDFTPCT\", \"IMKBIT\", \"IMDFENDITM\", \"IMKANEXLL\", \"IMSCPSELL\", \"IMMOPTH\", \"IMMCUTH\", \"IMCUMTH\", \"IMATPRN\", \"IMATPCA\", \"IMATPAC\", \"IMCOORE\", \"IMVCPFC\", \"IMPNYN\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_HUB F4101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_S01 F4101_S01 ON F4101_HUB.ID = F4101_S01.ID\n    where F4101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4101_S01.ID ORDER BY F4101_S01.FD DESC) = 1 \n),*/\n\nmerge_key as\n(\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DEB_PERIODE\n    UNION\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DISPO\n),\n\nsource_data as \n(    \n    select\n    mk.ARTICLE_CODE as ITEM_CD,\n    mk.SITE_CODE as SITE_CD,\n    NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE) as TIME_ID,\n    mk.PHOTO_DATE as PHOTO_DT,\n    sha2_binary(to_variant(array_construct(ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT)),512) as PERIOD_INVENTORY_KEY,\n    NVL(sdp.CREATION_DATE,sd.CREATION_DATE) as CREATION_DT,\n    NVL(sdp.QUANTITE_VAL,0) as QTY_START_PERIOD_UOM,\n    NVL(sd.QUANTITE_VAL,0) as QTY_AVAILABLE_UOM,\n    NVL(sdp.FD,sd.FD) as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'NSKEP' as RSCR\n    --Perte de cl\u00e9 via item\n    --sha2_binary(to_variant(array_construct(mk.SITE_CODE)),512) as SITE_KEY,\n    --sha2_binary(to_variant(array_construct(F4101.IMITM, F4101.IMLITM)),512) as ITEM_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_period_date.CALENDAR_KEY)),512) as TIME_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_photo_date.CALENDAR_KEY)),512) as PHOTO_KEY,\n    --sha2_binary(to_variant(array_construct(SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY)),512) as T_LINK_PERIOD_INVENTORY_KEY\n    from merge_key mk\n    left outer join E_DD_STOCK_DEB_PERIODE sdp\n        on sdp.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sdp.SITE_CODE = mk.SITE_CODE\n        and sdp.PERIODE_CODE = mk.PERIODE_CODE\n        and sdp.PHOTO_DATE = mk.PHOTO_DATE\n    left outer join E_DD_STOCK_DISPO sd\n        on sd.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sd.SITE_CODE = mk.SITE_CODE\n        and sd.PERIODE_CODE = mk.PERIODE_CODE\n        and sd.PHOTO_DATE = mk.PHOTO_DATE\n    --left outer join F4101 on F4101.IMLITM = mk.ARTICLE_CODE\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_period_date on calendar_period_date.DT_DDMMYYYY = NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE)\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_photo_date on calendar_photo_date.DT_DDMMYYYY = mk.PHOTO_DATE\n)\n\nselect \n    PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM, EFFECTIVE_FROM, LDTS, RSCR, --SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY, T_LINK_PERIOD_INVENTORY_KEY,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM)),512) as HASHDIFF\nfrom source_data", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbt_grizzly.dwh_dscp_period_inventory_hub": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_SC_SUPPLY_PLANNING", "name": "dwh_dscp_period_inventory_hub", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_hub.sql", "original_file_path": "models\\20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_hub.sql", "unique_id": "model.dbt_grizzly.dwh_dscp_period_inventory_hub", "fqn": ["dbt_grizzly", "20_silver_db", "dscp_sch", "01_business_vault", "dwh_dscp_period_inventory_hub"], "alias": "dwh_dscp_period_inventory_hub", "checksum": {"name": "sha256", "checksum": "71974590c402033a8f128db0f1a2eb310929ac7e6310966e8faa48bca1d489f9"}, "config": {"enabled": true, "alias": null, "schema": "SC_SUPPLY_PLANNING", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.DSCP", "business_vault"], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.DSCP", "business_vault"], "description": "Hub table of the item bottling silver entity", "columns": {"PERIOD_INVENTORY_KEY": {"name": "PERIOD_INVENTORY_KEY", "description": "Hash of the 3 natural keys", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEM_CD": {"name": "ITEM_CD", "description": "Code de l'article", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_CD": {"name": "SITE_CD", "description": "Code du Site", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TIME_ID": {"name": "TIME_ID", "description": "Date de d\u00e9but de semaine", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PHOTO_DT": {"name": "PHOTO_DT", "description": "Date de photo", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_hub.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["business_vault"], "schema": "SC_SUPPLY_PLANNING", "materialized": "incremental"}, "created_at": 1683884072.860402, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_SC_SUPPLY_PLANNING.dwh_dscp_period_inventory_hub", "raw_code": "{%- set source_model = \"dwh_dscp_period_inventory_tmp\" -%}\r\n{%- set src_pk = \"PERIOD_INVENTORY_KEY\" -%}\r\n{%- set src_nk = [\"ITEM_CD\",\"SITE_CD\",\"TIME_ID\",\"PHOTO_DT\"] -%}\r\n{%- set src_ldts = \"LDTS\" -%}\r\n{%- set src_source = \"RSCR\" -%}\r\n\r\n{{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\r\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["dwh_dscp_period_inventory_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.hub"], "nodes": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_hub.sql", "compiled": true, "compiled_code": "-- Generated by dbtvault.\n\nWITH  __dbt__cte__dwh_dscp_period_inventory_tmp as (\nWITH \n\nE_DD_STOCK_DEB_PERIODE AS (\n  SELECT \n    E_DD_STOCK_DEB_PERIODE_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DEB_PERIODE_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_HUB E_DD_STOCK_DEB_PERIODE_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_S01 E_DD_STOCK_DEB_PERIODE_S01 ON E_DD_STOCK_DEB_PERIODE_HUB.ID = E_DD_STOCK_DEB_PERIODE_S01.ID\n    where E_DD_STOCK_DEB_PERIODE_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DEB_PERIODE_S01.ID ORDER BY E_DD_STOCK_DEB_PERIODE_S01.FD DESC) = 1 \n),\n\nE_DD_STOCK_DISPO AS (\n  SELECT \n    E_DD_STOCK_DISPO_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DISPO_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_HUB E_DD_STOCK_DISPO_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_S01 E_DD_STOCK_DISPO_S01 ON E_DD_STOCK_DISPO_HUB.ID = E_DD_STOCK_DISPO_S01.ID\n    where E_DD_STOCK_DISPO_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DISPO_S01.ID ORDER BY E_DD_STOCK_DISPO_S01.FD DESC) = 1 \n),\n/*\nF4101 AS (\n  SELECT \n    F4101_HUB.\"ID\", \"IMITM\",\n    F4101_S01.\"FD\", \"TD\", \"IMLITM\", \"IMAITM\", \"IMDSC1\", \"IMDSC2\", \"IMSRTX\", \"IMALN\", \"IMSRP1\", \"IMSRP2\", \"IMSRP3\", \"IMSRP4\", \"IMSRP5\", \"IMSRP6\", \"IMSRP7\", \"IMSRP8\", \"IMSRP9\", \"IMSRP0\", \"IMPRP1\", \"IMPRP2\", \"IMPRP3\", \"IMPRP4\", \"IMPRP5\", \"IMPRP6\", \"IMPRP7\", \"IMPRP8\", \"IMPRP9\", \"IMPRP0\", \"IMCDCD\", \"IMPDGR\", \"IMDSGP\", \"IMPRGR\", \"IMRPRC\", \"IMORPR\", \"IMBUYR\", \"IMDRAW\", \"IMRVNO\", \"IMDSZE\", \"IMVCUD\", \"IMCARS\", \"IMCARP\", \"IMSHCN\", \"IMSHCM\", \"IMUOM1\", \"IMUOM2\", \"IMUOM3\", \"IMUOM4\", \"IMUOM6\", \"IMUOM8\", \"IMUOM9\", \"IMUWUM\", \"IMUVM1\", \"IMSUTM\", \"IMUMVW\", \"IMCYCL\", \"IMGLPT\", \"IMPLEV\", \"IMPPLV\", \"IMCLEV\", \"IMPRPO\", \"IMCKAV\", \"IMBPFG\", \"IMSRCE\", \"IMOT1Y\", \"IMOT2Y\", \"IMSTDP\", \"IMFRMP\", \"IMTHRP\", \"IMSTDG\", \"IMFRGD\", \"IMTHGD\", \"IMCOTY\", \"IMSTKT\", \"IMLNTY\", \"IMCONT\", \"IMBACK\", \"IMIFLA\", \"IMTFLA\", \"IMINMG\", \"IMABCS\", \"IMABCM\", \"IMABCI\", \"IMOVR\", \"IMWARR\", \"IMCMCG\", \"IMSRNR\", \"IMPMTH\", \"IMFIFO\", \"IMLOTS\", \"IMSLD\", \"IMANPL\", \"IMMPST\", \"IMPCTM\", \"IMMMPC\", \"IMPTSC\", \"IMSNS\", \"IMLTLV\", \"IMLTMF\", \"IMLTCM\", \"IMOPC\", \"IMOPV\", \"IMACQ\", \"IMMLQ\", \"IMLTPU\", \"IMMPSP\", \"IMMRPP\", \"IMITC\", \"IMORDW\", \"IMMTF1\", \"IMMTF2\", \"IMMTF3\", \"IMMTF4\", \"IMMTF5\", \"IMEXPD\", \"IMDEFD\", \"IMSFLT\", \"IMMAKE\", \"IMCOBY\", \"IMLLX\", \"IMCMGL\", \"IMCOMH\", \"IMURCD\", \"IMURDT\", \"IMURAT\", \"IMURAB\", \"IMURRF\", \"IMUSER\", \"IMPID\", \"IMJOBN\", \"IMUPMJ\", \"IMTDAY\", \"IMUPCN\", \"IMSCC0\", \"IMUMUP\", \"IMUMDF\", \"IMUMS0\", \"IMUMS1\", \"IMUMS2\", \"IMUMS3\", \"IMUMS4\", \"IMUMS5\", \"IMUMS6\", \"IMUMS7\", \"IMUMS8\", \"IMPOC\", \"IMAVRT\", \"IMEQTY\", \"IMWTRQ\", \"IMTMPL\", \"IMSEG1\", \"IMSEG2\", \"IMSEG3\", \"IMSEG4\", \"IMSEG5\", \"IMSEG6\", \"IMSEG7\", \"IMSEG8\", \"IMSEG9\", \"IMSEG0\", \"IMMIC\", \"IMAING\", \"IMBBDD\", \"IMCMDM\", \"IMLECM\", \"IMLEDD\", \"IMPEFD\", \"IMSBDD\", \"IMU1DD\", \"IMU2DD\", \"IMU3DD\", \"IMU4DD\", \"IMU5DD\", \"IMDLTL\", \"IMDPPO\", \"IMDUAL\", \"IMXDCK\", \"IMLAF\", \"IMLTFM\", \"IMRWLA\", \"IMLNPA\", \"IMLOTC\", \"IMAPSC\", \"IMAUOM\", \"IMCONB\", \"IMGCMP\", \"IMPRI1\", \"IMPRI2\", \"IMASHL\", \"IMVMINV\", \"IMCMETH\", \"IMEXPI\", \"IMOPTH\", \"IMCUTH\", \"IMUMTH\", \"IMLMFG\", \"IMLINE\", \"IMDFTPCT\", \"IMKBIT\", \"IMDFENDITM\", \"IMKANEXLL\", \"IMSCPSELL\", \"IMMOPTH\", \"IMMCUTH\", \"IMCUMTH\", \"IMATPRN\", \"IMATPCA\", \"IMATPAC\", \"IMCOORE\", \"IMVCPFC\", \"IMPNYN\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_HUB F4101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_S01 F4101_S01 ON F4101_HUB.ID = F4101_S01.ID\n    where F4101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4101_S01.ID ORDER BY F4101_S01.FD DESC) = 1 \n),*/\n\nmerge_key as\n(\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DEB_PERIODE\n    UNION\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DISPO\n),\n\nsource_data as \n(    \n    select\n    mk.ARTICLE_CODE as ITEM_CD,\n    mk.SITE_CODE as SITE_CD,\n    NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE) as TIME_ID,\n    mk.PHOTO_DATE as PHOTO_DT,\n    sha2_binary(to_variant(array_construct(ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT)),512) as PERIOD_INVENTORY_KEY,\n    NVL(sdp.CREATION_DATE,sd.CREATION_DATE) as CREATION_DT,\n    NVL(sdp.QUANTITE_VAL,0) as QTY_START_PERIOD_UOM,\n    NVL(sd.QUANTITE_VAL,0) as QTY_AVAILABLE_UOM,\n    NVL(sdp.FD,sd.FD) as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'NSKEP' as RSCR\n    --Perte de cl\u00e9 via item\n    --sha2_binary(to_variant(array_construct(mk.SITE_CODE)),512) as SITE_KEY,\n    --sha2_binary(to_variant(array_construct(F4101.IMITM, F4101.IMLITM)),512) as ITEM_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_period_date.CALENDAR_KEY)),512) as TIME_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_photo_date.CALENDAR_KEY)),512) as PHOTO_KEY,\n    --sha2_binary(to_variant(array_construct(SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY)),512) as T_LINK_PERIOD_INVENTORY_KEY\n    from merge_key mk\n    left outer join E_DD_STOCK_DEB_PERIODE sdp\n        on sdp.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sdp.SITE_CODE = mk.SITE_CODE\n        and sdp.PERIODE_CODE = mk.PERIODE_CODE\n        and sdp.PHOTO_DATE = mk.PHOTO_DATE\n    left outer join E_DD_STOCK_DISPO sd\n        on sd.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sd.SITE_CODE = mk.SITE_CODE\n        and sd.PERIODE_CODE = mk.PERIODE_CODE\n        and sd.PHOTO_DATE = mk.PHOTO_DATE\n    --left outer join F4101 on F4101.IMLITM = mk.ARTICLE_CODE\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_period_date on calendar_period_date.DT_DDMMYYYY = NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE)\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_photo_date on calendar_photo_date.DT_DDMMYYYY = mk.PHOTO_DATE\n)\n\nselect \n    PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM, EFFECTIVE_FROM, LDTS, RSCR, --SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY, T_LINK_PERIOD_INVENTORY_KEY,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM)),512) as HASHDIFF\nfrom source_data\n),row_rank_1 AS (\n    SELECT rr.\"PERIOD_INVENTORY_KEY\", rr.\"ITEM_CD\", rr.\"SITE_CD\", rr.\"TIME_ID\", rr.\"PHOTO_DT\", rr.\"LDTS\", rr.\"RSCR\",\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.\"PERIOD_INVENTORY_KEY\"\n               ORDER BY rr.\"LDTS\"\n           ) AS row_number\n    FROM __dbt__cte__dwh_dscp_period_inventory_tmp AS rr\n    WHERE rr.\"PERIOD_INVENTORY_KEY\" IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.\"PERIOD_INVENTORY_KEY\", a.\"ITEM_CD\", a.\"SITE_CD\", a.\"TIME_ID\", a.\"PHOTO_DT\", a.\"LDTS\", a.\"RSCR\"\n    FROM row_rank_1 AS a\n    LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_SC_SUPPLY_PLANNING.dwh_dscp_period_inventory_hub AS d\n    ON a.\"PERIOD_INVENTORY_KEY\" = d.\"PERIOD_INVENTORY_KEY\"\n    WHERE d.\"PERIOD_INVENTORY_KEY\" IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_dscp_period_inventory_tmp", "sql": " __dbt__cte__dwh_dscp_period_inventory_tmp as (\nWITH \n\nE_DD_STOCK_DEB_PERIODE AS (\n  SELECT \n    E_DD_STOCK_DEB_PERIODE_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DEB_PERIODE_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_HUB E_DD_STOCK_DEB_PERIODE_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_S01 E_DD_STOCK_DEB_PERIODE_S01 ON E_DD_STOCK_DEB_PERIODE_HUB.ID = E_DD_STOCK_DEB_PERIODE_S01.ID\n    where E_DD_STOCK_DEB_PERIODE_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DEB_PERIODE_S01.ID ORDER BY E_DD_STOCK_DEB_PERIODE_S01.FD DESC) = 1 \n),\n\nE_DD_STOCK_DISPO AS (\n  SELECT \n    E_DD_STOCK_DISPO_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DISPO_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_HUB E_DD_STOCK_DISPO_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_S01 E_DD_STOCK_DISPO_S01 ON E_DD_STOCK_DISPO_HUB.ID = E_DD_STOCK_DISPO_S01.ID\n    where E_DD_STOCK_DISPO_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DISPO_S01.ID ORDER BY E_DD_STOCK_DISPO_S01.FD DESC) = 1 \n),\n/*\nF4101 AS (\n  SELECT \n    F4101_HUB.\"ID\", \"IMITM\",\n    F4101_S01.\"FD\", \"TD\", \"IMLITM\", \"IMAITM\", \"IMDSC1\", \"IMDSC2\", \"IMSRTX\", \"IMALN\", \"IMSRP1\", \"IMSRP2\", \"IMSRP3\", \"IMSRP4\", \"IMSRP5\", \"IMSRP6\", \"IMSRP7\", \"IMSRP8\", \"IMSRP9\", \"IMSRP0\", \"IMPRP1\", \"IMPRP2\", \"IMPRP3\", \"IMPRP4\", \"IMPRP5\", \"IMPRP6\", \"IMPRP7\", \"IMPRP8\", \"IMPRP9\", \"IMPRP0\", \"IMCDCD\", \"IMPDGR\", \"IMDSGP\", \"IMPRGR\", \"IMRPRC\", \"IMORPR\", \"IMBUYR\", \"IMDRAW\", \"IMRVNO\", \"IMDSZE\", \"IMVCUD\", \"IMCARS\", \"IMCARP\", \"IMSHCN\", \"IMSHCM\", \"IMUOM1\", \"IMUOM2\", \"IMUOM3\", \"IMUOM4\", \"IMUOM6\", \"IMUOM8\", \"IMUOM9\", \"IMUWUM\", \"IMUVM1\", \"IMSUTM\", \"IMUMVW\", \"IMCYCL\", \"IMGLPT\", \"IMPLEV\", \"IMPPLV\", \"IMCLEV\", \"IMPRPO\", \"IMCKAV\", \"IMBPFG\", \"IMSRCE\", \"IMOT1Y\", \"IMOT2Y\", \"IMSTDP\", \"IMFRMP\", \"IMTHRP\", \"IMSTDG\", \"IMFRGD\", \"IMTHGD\", \"IMCOTY\", \"IMSTKT\", \"IMLNTY\", \"IMCONT\", \"IMBACK\", \"IMIFLA\", \"IMTFLA\", \"IMINMG\", \"IMABCS\", \"IMABCM\", \"IMABCI\", \"IMOVR\", \"IMWARR\", \"IMCMCG\", \"IMSRNR\", \"IMPMTH\", \"IMFIFO\", \"IMLOTS\", \"IMSLD\", \"IMANPL\", \"IMMPST\", \"IMPCTM\", \"IMMMPC\", \"IMPTSC\", \"IMSNS\", \"IMLTLV\", \"IMLTMF\", \"IMLTCM\", \"IMOPC\", \"IMOPV\", \"IMACQ\", \"IMMLQ\", \"IMLTPU\", \"IMMPSP\", \"IMMRPP\", \"IMITC\", \"IMORDW\", \"IMMTF1\", \"IMMTF2\", \"IMMTF3\", \"IMMTF4\", \"IMMTF5\", \"IMEXPD\", \"IMDEFD\", \"IMSFLT\", \"IMMAKE\", \"IMCOBY\", \"IMLLX\", \"IMCMGL\", \"IMCOMH\", \"IMURCD\", \"IMURDT\", \"IMURAT\", \"IMURAB\", \"IMURRF\", \"IMUSER\", \"IMPID\", \"IMJOBN\", \"IMUPMJ\", \"IMTDAY\", \"IMUPCN\", \"IMSCC0\", \"IMUMUP\", \"IMUMDF\", \"IMUMS0\", \"IMUMS1\", \"IMUMS2\", \"IMUMS3\", \"IMUMS4\", \"IMUMS5\", \"IMUMS6\", \"IMUMS7\", \"IMUMS8\", \"IMPOC\", \"IMAVRT\", \"IMEQTY\", \"IMWTRQ\", \"IMTMPL\", \"IMSEG1\", \"IMSEG2\", \"IMSEG3\", \"IMSEG4\", \"IMSEG5\", \"IMSEG6\", \"IMSEG7\", \"IMSEG8\", \"IMSEG9\", \"IMSEG0\", \"IMMIC\", \"IMAING\", \"IMBBDD\", \"IMCMDM\", \"IMLECM\", \"IMLEDD\", \"IMPEFD\", \"IMSBDD\", \"IMU1DD\", \"IMU2DD\", \"IMU3DD\", \"IMU4DD\", \"IMU5DD\", \"IMDLTL\", \"IMDPPO\", \"IMDUAL\", \"IMXDCK\", \"IMLAF\", \"IMLTFM\", \"IMRWLA\", \"IMLNPA\", \"IMLOTC\", \"IMAPSC\", \"IMAUOM\", \"IMCONB\", \"IMGCMP\", \"IMPRI1\", \"IMPRI2\", \"IMASHL\", \"IMVMINV\", \"IMCMETH\", \"IMEXPI\", \"IMOPTH\", \"IMCUTH\", \"IMUMTH\", \"IMLMFG\", \"IMLINE\", \"IMDFTPCT\", \"IMKBIT\", \"IMDFENDITM\", \"IMKANEXLL\", \"IMSCPSELL\", \"IMMOPTH\", \"IMMCUTH\", \"IMCUMTH\", \"IMATPRN\", \"IMATPCA\", \"IMATPAC\", \"IMCOORE\", \"IMVCPFC\", \"IMPNYN\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_HUB F4101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_S01 F4101_S01 ON F4101_HUB.ID = F4101_S01.ID\n    where F4101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4101_S01.ID ORDER BY F4101_S01.FD DESC) = 1 \n),*/\n\nmerge_key as\n(\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DEB_PERIODE\n    UNION\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DISPO\n),\n\nsource_data as \n(    \n    select\n    mk.ARTICLE_CODE as ITEM_CD,\n    mk.SITE_CODE as SITE_CD,\n    NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE) as TIME_ID,\n    mk.PHOTO_DATE as PHOTO_DT,\n    sha2_binary(to_variant(array_construct(ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT)),512) as PERIOD_INVENTORY_KEY,\n    NVL(sdp.CREATION_DATE,sd.CREATION_DATE) as CREATION_DT,\n    NVL(sdp.QUANTITE_VAL,0) as QTY_START_PERIOD_UOM,\n    NVL(sd.QUANTITE_VAL,0) as QTY_AVAILABLE_UOM,\n    NVL(sdp.FD,sd.FD) as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'NSKEP' as RSCR\n    --Perte de cl\u00e9 via item\n    --sha2_binary(to_variant(array_construct(mk.SITE_CODE)),512) as SITE_KEY,\n    --sha2_binary(to_variant(array_construct(F4101.IMITM, F4101.IMLITM)),512) as ITEM_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_period_date.CALENDAR_KEY)),512) as TIME_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_photo_date.CALENDAR_KEY)),512) as PHOTO_KEY,\n    --sha2_binary(to_variant(array_construct(SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY)),512) as T_LINK_PERIOD_INVENTORY_KEY\n    from merge_key mk\n    left outer join E_DD_STOCK_DEB_PERIODE sdp\n        on sdp.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sdp.SITE_CODE = mk.SITE_CODE\n        and sdp.PERIODE_CODE = mk.PERIODE_CODE\n        and sdp.PHOTO_DATE = mk.PHOTO_DATE\n    left outer join E_DD_STOCK_DISPO sd\n        on sd.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sd.SITE_CODE = mk.SITE_CODE\n        and sd.PERIODE_CODE = mk.PERIODE_CODE\n        and sd.PHOTO_DATE = mk.PHOTO_DATE\n    --left outer join F4101 on F4101.IMLITM = mk.ARTICLE_CODE\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_period_date on calendar_period_date.DT_DDMMYYYY = NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE)\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_photo_date on calendar_photo_date.DT_DDMMYYYY = mk.PHOTO_DATE\n)\n\nselect \n    PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM, EFFECTIVE_FROM, LDTS, RSCR, --SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY, T_LINK_PERIOD_INVENTORY_KEY,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM)),512) as HASHDIFF\nfrom source_data\n)"}]}, "model.dbt_grizzly.dwh_dscp_period_inventory_sat": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_SC_SUPPLY_PLANNING", "name": "dwh_dscp_period_inventory_sat", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_sat.sql", "original_file_path": "models\\20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_sat.sql", "unique_id": "model.dbt_grizzly.dwh_dscp_period_inventory_sat", "fqn": ["dbt_grizzly", "20_silver_db", "dscp_sch", "01_business_vault", "dwh_dscp_period_inventory_sat"], "alias": "dwh_dscp_period_inventory_sat", "checksum": {"name": "sha256", "checksum": "85cdcdc584efd5e0d10b5464eced6c23043099846ffe77f0bfac77633fbc3a2d"}, "config": {"enabled": true, "alias": null, "schema": "SC_SUPPLY_PLANNING", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.DSCP", "business_vault"], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.DSCP", "business_vault"], "description": "Satellite table of the item bottling silver entity", "columns": {"PERIOD_INVENTORY_KEY": {"name": "PERIOD_INVENTORY_KEY", "description": "Cl\u00e9 primaire hash\u00e9e", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEM_CD": {"name": "ITEM_CD", "description": "Code de l'article", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_CD": {"name": "SITE_CD", "description": "Code du Site", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TIME_ID": {"name": "TIME_ID", "description": "Date de d\u00e9but de semaine", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PHOTO_DT": {"name": "PHOTO_DT", "description": "Date de photo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATION_DT": {"name": "CREATION_DT", "description": "Date de cr\u00e9ation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QTY_START_PERIOD_UOM": {"name": "QTY_START_PERIOD_UOM", "description": "Quantit\u00e9 en d\u00e9but de p\u00e9riode", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QTY_AVAILABLE_UOM": {"name": "QTY_AVAILABLE_UOM", "description": "Quantit\u00e9 disponible", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EFFECTIVE_FROM": {"name": "EFFECTIVE_FROM", "description": "Date d'effectivit\u00e9", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LDTS": {"name": "LDTS", "description": "Date de chargement", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RSCR": {"name": "RSCR", "description": "Nom de la source", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_sat.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["business_vault"], "schema": "SC_SUPPLY_PLANNING", "materialized": "incremental"}, "created_at": 1683884072.892763, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_SC_SUPPLY_PLANNING.dwh_dscp_period_inventory_sat", "raw_code": "{%- set source_model = \"dwh_dscp_period_inventory_tmp\" -%}\r\n{%- set src_pk = \"PERIOD_INVENTORY_KEY\" -%}\r\n{%- set src_hashdiff = \"HASHDIFF\" -%}\r\n{%- set src_payload = [\"ITEM_CD\",\"SITE_CD\",\"TIME_ID\",\"PHOTO_DT\",\"CREATION_DT\",\"QTY_START_PERIOD_UOM\",\"QTY_AVAILABLE_UOM\"] -%}\r\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\r\n{%- set src_ldts = \"LDTS\" -%}\r\n{%- set src_source = \"RSCR\" -%}\r\n\r\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                src_payload=src_payload, src_eff=src_eff,\r\n                src_ldts=src_ldts, src_source=src_source,\r\n                source_model=source_model) }}", "language": "sql", "refs": [["dwh_dscp_period_inventory_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.sat"], "nodes": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_sat.sql", "compiled": true, "compiled_code": "-- Generated by dbtvault.\n\n    \n\nWITH  __dbt__cte__dwh_dscp_period_inventory_tmp as (\nWITH \n\nE_DD_STOCK_DEB_PERIODE AS (\n  SELECT \n    E_DD_STOCK_DEB_PERIODE_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DEB_PERIODE_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_HUB E_DD_STOCK_DEB_PERIODE_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_S01 E_DD_STOCK_DEB_PERIODE_S01 ON E_DD_STOCK_DEB_PERIODE_HUB.ID = E_DD_STOCK_DEB_PERIODE_S01.ID\n    where E_DD_STOCK_DEB_PERIODE_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DEB_PERIODE_S01.ID ORDER BY E_DD_STOCK_DEB_PERIODE_S01.FD DESC) = 1 \n),\n\nE_DD_STOCK_DISPO AS (\n  SELECT \n    E_DD_STOCK_DISPO_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DISPO_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_HUB E_DD_STOCK_DISPO_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_S01 E_DD_STOCK_DISPO_S01 ON E_DD_STOCK_DISPO_HUB.ID = E_DD_STOCK_DISPO_S01.ID\n    where E_DD_STOCK_DISPO_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DISPO_S01.ID ORDER BY E_DD_STOCK_DISPO_S01.FD DESC) = 1 \n),\n/*\nF4101 AS (\n  SELECT \n    F4101_HUB.\"ID\", \"IMITM\",\n    F4101_S01.\"FD\", \"TD\", \"IMLITM\", \"IMAITM\", \"IMDSC1\", \"IMDSC2\", \"IMSRTX\", \"IMALN\", \"IMSRP1\", \"IMSRP2\", \"IMSRP3\", \"IMSRP4\", \"IMSRP5\", \"IMSRP6\", \"IMSRP7\", \"IMSRP8\", \"IMSRP9\", \"IMSRP0\", \"IMPRP1\", \"IMPRP2\", \"IMPRP3\", \"IMPRP4\", \"IMPRP5\", \"IMPRP6\", \"IMPRP7\", \"IMPRP8\", \"IMPRP9\", \"IMPRP0\", \"IMCDCD\", \"IMPDGR\", \"IMDSGP\", \"IMPRGR\", \"IMRPRC\", \"IMORPR\", \"IMBUYR\", \"IMDRAW\", \"IMRVNO\", \"IMDSZE\", \"IMVCUD\", \"IMCARS\", \"IMCARP\", \"IMSHCN\", \"IMSHCM\", \"IMUOM1\", \"IMUOM2\", \"IMUOM3\", \"IMUOM4\", \"IMUOM6\", \"IMUOM8\", \"IMUOM9\", \"IMUWUM\", \"IMUVM1\", \"IMSUTM\", \"IMUMVW\", \"IMCYCL\", \"IMGLPT\", \"IMPLEV\", \"IMPPLV\", \"IMCLEV\", \"IMPRPO\", \"IMCKAV\", \"IMBPFG\", \"IMSRCE\", \"IMOT1Y\", \"IMOT2Y\", \"IMSTDP\", \"IMFRMP\", \"IMTHRP\", \"IMSTDG\", \"IMFRGD\", \"IMTHGD\", \"IMCOTY\", \"IMSTKT\", \"IMLNTY\", \"IMCONT\", \"IMBACK\", \"IMIFLA\", \"IMTFLA\", \"IMINMG\", \"IMABCS\", \"IMABCM\", \"IMABCI\", \"IMOVR\", \"IMWARR\", \"IMCMCG\", \"IMSRNR\", \"IMPMTH\", \"IMFIFO\", \"IMLOTS\", \"IMSLD\", \"IMANPL\", \"IMMPST\", \"IMPCTM\", \"IMMMPC\", \"IMPTSC\", \"IMSNS\", \"IMLTLV\", \"IMLTMF\", \"IMLTCM\", \"IMOPC\", \"IMOPV\", \"IMACQ\", \"IMMLQ\", \"IMLTPU\", \"IMMPSP\", \"IMMRPP\", \"IMITC\", \"IMORDW\", \"IMMTF1\", \"IMMTF2\", \"IMMTF3\", \"IMMTF4\", \"IMMTF5\", \"IMEXPD\", \"IMDEFD\", \"IMSFLT\", \"IMMAKE\", \"IMCOBY\", \"IMLLX\", \"IMCMGL\", \"IMCOMH\", \"IMURCD\", \"IMURDT\", \"IMURAT\", \"IMURAB\", \"IMURRF\", \"IMUSER\", \"IMPID\", \"IMJOBN\", \"IMUPMJ\", \"IMTDAY\", \"IMUPCN\", \"IMSCC0\", \"IMUMUP\", \"IMUMDF\", \"IMUMS0\", \"IMUMS1\", \"IMUMS2\", \"IMUMS3\", \"IMUMS4\", \"IMUMS5\", \"IMUMS6\", \"IMUMS7\", \"IMUMS8\", \"IMPOC\", \"IMAVRT\", \"IMEQTY\", \"IMWTRQ\", \"IMTMPL\", \"IMSEG1\", \"IMSEG2\", \"IMSEG3\", \"IMSEG4\", \"IMSEG5\", \"IMSEG6\", \"IMSEG7\", \"IMSEG8\", \"IMSEG9\", \"IMSEG0\", \"IMMIC\", \"IMAING\", \"IMBBDD\", \"IMCMDM\", \"IMLECM\", \"IMLEDD\", \"IMPEFD\", \"IMSBDD\", \"IMU1DD\", \"IMU2DD\", \"IMU3DD\", \"IMU4DD\", \"IMU5DD\", \"IMDLTL\", \"IMDPPO\", \"IMDUAL\", \"IMXDCK\", \"IMLAF\", \"IMLTFM\", \"IMRWLA\", \"IMLNPA\", \"IMLOTC\", \"IMAPSC\", \"IMAUOM\", \"IMCONB\", \"IMGCMP\", \"IMPRI1\", \"IMPRI2\", \"IMASHL\", \"IMVMINV\", \"IMCMETH\", \"IMEXPI\", \"IMOPTH\", \"IMCUTH\", \"IMUMTH\", \"IMLMFG\", \"IMLINE\", \"IMDFTPCT\", \"IMKBIT\", \"IMDFENDITM\", \"IMKANEXLL\", \"IMSCPSELL\", \"IMMOPTH\", \"IMMCUTH\", \"IMCUMTH\", \"IMATPRN\", \"IMATPCA\", \"IMATPAC\", \"IMCOORE\", \"IMVCPFC\", \"IMPNYN\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_HUB F4101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_S01 F4101_S01 ON F4101_HUB.ID = F4101_S01.ID\n    where F4101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4101_S01.ID ORDER BY F4101_S01.FD DESC) = 1 \n),*/\n\nmerge_key as\n(\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DEB_PERIODE\n    UNION\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DISPO\n),\n\nsource_data as \n(    \n    select\n    mk.ARTICLE_CODE as ITEM_CD,\n    mk.SITE_CODE as SITE_CD,\n    NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE) as TIME_ID,\n    mk.PHOTO_DATE as PHOTO_DT,\n    sha2_binary(to_variant(array_construct(ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT)),512) as PERIOD_INVENTORY_KEY,\n    NVL(sdp.CREATION_DATE,sd.CREATION_DATE) as CREATION_DT,\n    NVL(sdp.QUANTITE_VAL,0) as QTY_START_PERIOD_UOM,\n    NVL(sd.QUANTITE_VAL,0) as QTY_AVAILABLE_UOM,\n    NVL(sdp.FD,sd.FD) as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'NSKEP' as RSCR\n    --Perte de cl\u00e9 via item\n    --sha2_binary(to_variant(array_construct(mk.SITE_CODE)),512) as SITE_KEY,\n    --sha2_binary(to_variant(array_construct(F4101.IMITM, F4101.IMLITM)),512) as ITEM_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_period_date.CALENDAR_KEY)),512) as TIME_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_photo_date.CALENDAR_KEY)),512) as PHOTO_KEY,\n    --sha2_binary(to_variant(array_construct(SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY)),512) as T_LINK_PERIOD_INVENTORY_KEY\n    from merge_key mk\n    left outer join E_DD_STOCK_DEB_PERIODE sdp\n        on sdp.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sdp.SITE_CODE = mk.SITE_CODE\n        and sdp.PERIODE_CODE = mk.PERIODE_CODE\n        and sdp.PHOTO_DATE = mk.PHOTO_DATE\n    left outer join E_DD_STOCK_DISPO sd\n        on sd.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sd.SITE_CODE = mk.SITE_CODE\n        and sd.PERIODE_CODE = mk.PERIODE_CODE\n        and sd.PHOTO_DATE = mk.PHOTO_DATE\n    --left outer join F4101 on F4101.IMLITM = mk.ARTICLE_CODE\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_period_date on calendar_period_date.DT_DDMMYYYY = NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE)\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_photo_date on calendar_photo_date.DT_DDMMYYYY = mk.PHOTO_DATE\n)\n\nselect \n    PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM, EFFECTIVE_FROM, LDTS, RSCR, --SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY, T_LINK_PERIOD_INVENTORY_KEY,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM)),512) as HASHDIFF\nfrom source_data\n),source_data AS (\n    SELECT a.\"PERIOD_INVENTORY_KEY\", a.\"HASHDIFF\", a.\"ITEM_CD\", a.\"SITE_CD\", a.\"TIME_ID\", a.\"PHOTO_DT\", a.\"CREATION_DT\", a.\"QTY_START_PERIOD_UOM\", a.\"QTY_AVAILABLE_UOM\", a.\"EFFECTIVE_FROM\", a.\"LDTS\", a.\"RSCR\"\n    FROM __dbt__cte__dwh_dscp_period_inventory_tmp AS a\n    WHERE a.\"PERIOD_INVENTORY_KEY\" IS NOT NULL\n),\n\n\n\nlatest_records AS (\n    SELECT a.\"PERIOD_INVENTORY_KEY\", a.\"HASHDIFF\", a.\"LDTS\"\n    FROM (\n        SELECT current_records.\"PERIOD_INVENTORY_KEY\", current_records.\"HASHDIFF\", current_records.\"LDTS\",\n            RANK() OVER (\n               PARTITION BY current_records.\"PERIOD_INVENTORY_KEY\"\n               ORDER BY current_records.\"LDTS\" DESC\n            ) AS rank\n        FROM PRFR_00_DEV_20_SILVER_DB.PRFR_SC_SUPPLY_PLANNING.dwh_dscp_period_inventory_sat AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.\"PERIOD_INVENTORY_KEY\"\n                FROM source_data\n            ) AS source_records\n                ON current_records.\"PERIOD_INVENTORY_KEY\" = source_records.\"PERIOD_INVENTORY_KEY\"\n    ) AS a\n    WHERE a.rank = 1\n),records_to_insert AS (\n    SELECT DISTINCT stage.\"PERIOD_INVENTORY_KEY\", stage.\"HASHDIFF\", stage.\"ITEM_CD\", stage.\"SITE_CD\", stage.\"TIME_ID\", stage.\"PHOTO_DT\", stage.\"CREATION_DT\", stage.\"QTY_START_PERIOD_UOM\", stage.\"QTY_AVAILABLE_UOM\", stage.\"EFFECTIVE_FROM\", stage.\"LDTS\", stage.\"RSCR\"\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.\"PERIOD_INVENTORY_KEY\" = stage.\"PERIOD_INVENTORY_KEY\"\n        AND latest_records.\"HASHDIFF\" = stage.\"HASHDIFF\"\n    WHERE latest_records.\"HASHDIFF\" IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_dscp_period_inventory_tmp", "sql": " __dbt__cte__dwh_dscp_period_inventory_tmp as (\nWITH \n\nE_DD_STOCK_DEB_PERIODE AS (\n  SELECT \n    E_DD_STOCK_DEB_PERIODE_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DEB_PERIODE_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_HUB E_DD_STOCK_DEB_PERIODE_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_S01 E_DD_STOCK_DEB_PERIODE_S01 ON E_DD_STOCK_DEB_PERIODE_HUB.ID = E_DD_STOCK_DEB_PERIODE_S01.ID\n    where E_DD_STOCK_DEB_PERIODE_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DEB_PERIODE_S01.ID ORDER BY E_DD_STOCK_DEB_PERIODE_S01.FD DESC) = 1 \n),\n\nE_DD_STOCK_DISPO AS (\n  SELECT \n    E_DD_STOCK_DISPO_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DISPO_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_HUB E_DD_STOCK_DISPO_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_S01 E_DD_STOCK_DISPO_S01 ON E_DD_STOCK_DISPO_HUB.ID = E_DD_STOCK_DISPO_S01.ID\n    where E_DD_STOCK_DISPO_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DISPO_S01.ID ORDER BY E_DD_STOCK_DISPO_S01.FD DESC) = 1 \n),\n/*\nF4101 AS (\n  SELECT \n    F4101_HUB.\"ID\", \"IMITM\",\n    F4101_S01.\"FD\", \"TD\", \"IMLITM\", \"IMAITM\", \"IMDSC1\", \"IMDSC2\", \"IMSRTX\", \"IMALN\", \"IMSRP1\", \"IMSRP2\", \"IMSRP3\", \"IMSRP4\", \"IMSRP5\", \"IMSRP6\", \"IMSRP7\", \"IMSRP8\", \"IMSRP9\", \"IMSRP0\", \"IMPRP1\", \"IMPRP2\", \"IMPRP3\", \"IMPRP4\", \"IMPRP5\", \"IMPRP6\", \"IMPRP7\", \"IMPRP8\", \"IMPRP9\", \"IMPRP0\", \"IMCDCD\", \"IMPDGR\", \"IMDSGP\", \"IMPRGR\", \"IMRPRC\", \"IMORPR\", \"IMBUYR\", \"IMDRAW\", \"IMRVNO\", \"IMDSZE\", \"IMVCUD\", \"IMCARS\", \"IMCARP\", \"IMSHCN\", \"IMSHCM\", \"IMUOM1\", \"IMUOM2\", \"IMUOM3\", \"IMUOM4\", \"IMUOM6\", \"IMUOM8\", \"IMUOM9\", \"IMUWUM\", \"IMUVM1\", \"IMSUTM\", \"IMUMVW\", \"IMCYCL\", \"IMGLPT\", \"IMPLEV\", \"IMPPLV\", \"IMCLEV\", \"IMPRPO\", \"IMCKAV\", \"IMBPFG\", \"IMSRCE\", \"IMOT1Y\", \"IMOT2Y\", \"IMSTDP\", \"IMFRMP\", \"IMTHRP\", \"IMSTDG\", \"IMFRGD\", \"IMTHGD\", \"IMCOTY\", \"IMSTKT\", \"IMLNTY\", \"IMCONT\", \"IMBACK\", \"IMIFLA\", \"IMTFLA\", \"IMINMG\", \"IMABCS\", \"IMABCM\", \"IMABCI\", \"IMOVR\", \"IMWARR\", \"IMCMCG\", \"IMSRNR\", \"IMPMTH\", \"IMFIFO\", \"IMLOTS\", \"IMSLD\", \"IMANPL\", \"IMMPST\", \"IMPCTM\", \"IMMMPC\", \"IMPTSC\", \"IMSNS\", \"IMLTLV\", \"IMLTMF\", \"IMLTCM\", \"IMOPC\", \"IMOPV\", \"IMACQ\", \"IMMLQ\", \"IMLTPU\", \"IMMPSP\", \"IMMRPP\", \"IMITC\", \"IMORDW\", \"IMMTF1\", \"IMMTF2\", \"IMMTF3\", \"IMMTF4\", \"IMMTF5\", \"IMEXPD\", \"IMDEFD\", \"IMSFLT\", \"IMMAKE\", \"IMCOBY\", \"IMLLX\", \"IMCMGL\", \"IMCOMH\", \"IMURCD\", \"IMURDT\", \"IMURAT\", \"IMURAB\", \"IMURRF\", \"IMUSER\", \"IMPID\", \"IMJOBN\", \"IMUPMJ\", \"IMTDAY\", \"IMUPCN\", \"IMSCC0\", \"IMUMUP\", \"IMUMDF\", \"IMUMS0\", \"IMUMS1\", \"IMUMS2\", \"IMUMS3\", \"IMUMS4\", \"IMUMS5\", \"IMUMS6\", \"IMUMS7\", \"IMUMS8\", \"IMPOC\", \"IMAVRT\", \"IMEQTY\", \"IMWTRQ\", \"IMTMPL\", \"IMSEG1\", \"IMSEG2\", \"IMSEG3\", \"IMSEG4\", \"IMSEG5\", \"IMSEG6\", \"IMSEG7\", \"IMSEG8\", \"IMSEG9\", \"IMSEG0\", \"IMMIC\", \"IMAING\", \"IMBBDD\", \"IMCMDM\", \"IMLECM\", \"IMLEDD\", \"IMPEFD\", \"IMSBDD\", \"IMU1DD\", \"IMU2DD\", \"IMU3DD\", \"IMU4DD\", \"IMU5DD\", \"IMDLTL\", \"IMDPPO\", \"IMDUAL\", \"IMXDCK\", \"IMLAF\", \"IMLTFM\", \"IMRWLA\", \"IMLNPA\", \"IMLOTC\", \"IMAPSC\", \"IMAUOM\", \"IMCONB\", \"IMGCMP\", \"IMPRI1\", \"IMPRI2\", \"IMASHL\", \"IMVMINV\", \"IMCMETH\", \"IMEXPI\", \"IMOPTH\", \"IMCUTH\", \"IMUMTH\", \"IMLMFG\", \"IMLINE\", \"IMDFTPCT\", \"IMKBIT\", \"IMDFENDITM\", \"IMKANEXLL\", \"IMSCPSELL\", \"IMMOPTH\", \"IMMCUTH\", \"IMCUMTH\", \"IMATPRN\", \"IMATPCA\", \"IMATPAC\", \"IMCOORE\", \"IMVCPFC\", \"IMPNYN\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_HUB F4101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_S01 F4101_S01 ON F4101_HUB.ID = F4101_S01.ID\n    where F4101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4101_S01.ID ORDER BY F4101_S01.FD DESC) = 1 \n),*/\n\nmerge_key as\n(\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DEB_PERIODE\n    UNION\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DISPO\n),\n\nsource_data as \n(    \n    select\n    mk.ARTICLE_CODE as ITEM_CD,\n    mk.SITE_CODE as SITE_CD,\n    NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE) as TIME_ID,\n    mk.PHOTO_DATE as PHOTO_DT,\n    sha2_binary(to_variant(array_construct(ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT)),512) as PERIOD_INVENTORY_KEY,\n    NVL(sdp.CREATION_DATE,sd.CREATION_DATE) as CREATION_DT,\n    NVL(sdp.QUANTITE_VAL,0) as QTY_START_PERIOD_UOM,\n    NVL(sd.QUANTITE_VAL,0) as QTY_AVAILABLE_UOM,\n    NVL(sdp.FD,sd.FD) as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'NSKEP' as RSCR\n    --Perte de cl\u00e9 via item\n    --sha2_binary(to_variant(array_construct(mk.SITE_CODE)),512) as SITE_KEY,\n    --sha2_binary(to_variant(array_construct(F4101.IMITM, F4101.IMLITM)),512) as ITEM_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_period_date.CALENDAR_KEY)),512) as TIME_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_photo_date.CALENDAR_KEY)),512) as PHOTO_KEY,\n    --sha2_binary(to_variant(array_construct(SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY)),512) as T_LINK_PERIOD_INVENTORY_KEY\n    from merge_key mk\n    left outer join E_DD_STOCK_DEB_PERIODE sdp\n        on sdp.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sdp.SITE_CODE = mk.SITE_CODE\n        and sdp.PERIODE_CODE = mk.PERIODE_CODE\n        and sdp.PHOTO_DATE = mk.PHOTO_DATE\n    left outer join E_DD_STOCK_DISPO sd\n        on sd.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sd.SITE_CODE = mk.SITE_CODE\n        and sd.PERIODE_CODE = mk.PERIODE_CODE\n        and sd.PHOTO_DATE = mk.PHOTO_DATE\n    --left outer join F4101 on F4101.IMLITM = mk.ARTICLE_CODE\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_period_date on calendar_period_date.DT_DDMMYYYY = NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE)\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_photo_date on calendar_photo_date.DT_DDMMYYYY = mk.PHOTO_DATE\n)\n\nselect \n    PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM, EFFECTIVE_FROM, LDTS, RSCR, --SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY, T_LINK_PERIOD_INVENTORY_KEY,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM)),512) as HASHDIFF\nfrom source_data\n)"}]}, "model.dbt_grizzly.planned_stock": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_SC_SUPPLY_PLANNING", "name": "planned_stock", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\dscp_sch\\02_3NF\\planned_stock.sql", "original_file_path": "models\\20_silver_db\\dscp_sch\\02_3NF\\planned_stock.sql", "unique_id": "model.dbt_grizzly.planned_stock", "fqn": ["dbt_grizzly", "20_silver_db", "dscp_sch", "02_3NF", "planned_stock"], "alias": "planned_stock", "checksum": {"name": "sha256", "checksum": "800529bab7bb00bea682670b88d0f31519db0a46fda9b3e1ddf9e99ec5843711"}, "config": {"enabled": true, "alias": null, "schema": "SC_SUPPLY_PLANNING", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.DSCP", "3NF"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.DSCP", "3NF"], "description": "Merge data from silver NSKEP tables hub and sat", "columns": {"ITEM_CD": {"name": "ITEM_CD", "description": "Code de l'article", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_CD": {"name": "SITE_CD", "description": "Code du Site", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TIME_ID": {"name": "TIME_ID", "description": "Date de d\u00e9but de semaine", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PHOTO_DT": {"name": "PHOTO_DT", "description": "Date de photo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATION_DT": {"name": "CREATION_DT", "description": "Date de cr\u00e9ation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QTY_START_PERIOD_UOM": {"name": "QTY_START_PERIOD_UOM", "description": "Quantit\u00e9 en d\u00e9but de p\u00e9riode", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QTY_AVAILABLE_UOM": {"name": "QTY_AVAILABLE_UOM", "description": "Quantit\u00e9 disponible", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\20_silver_db\\dscp_sch\\02_3NF\\planned_stock.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["3NF"], "schema": "SC_SUPPLY_PLANNING", "materialized": "view"}, "created_at": 1683884072.9031348, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_SC_SUPPLY_PLANNING.planned_stock", "raw_code": "with\r\nperiod_inventory as (\r\n    select hub.*, sat.CREATION_DT, sat.QTY_START_PERIOD_UOM, sat.QTY_AVAILABLE_UOM\r\n    from {{ ref(\"dwh_dscp_period_inventory_hub\") }} hub\r\n    inner join {{ ref(\"dwh_dscp_period_inventory_sat\") }} sat on hub.PERIOD_INVENTORY_KEY = sat.PERIOD_INVENTORY_KEY\r\n    qualify row_number() over (partition by sat.PERIOD_INVENTORY_KEY order by sat.LDTS desc) = 1 --garder la derni\u00e8re version de la semaine en cours\r\n),\r\ncalendar as (\r\n    select DT_DDMMYYYY\r\n    from {{source('PARAMETERS','CALENDAR_HUB')}} calendar\r\n    where DT_DDMMYYYY between DATE_TRUNC('week',CURRENT_TIMESTAMP) and DATEADD(WEEK, 18, DATE_TRUNC('week',CURRENT_TIMESTAMP)) --garder que les 19 semaines dans le futur \u00e0 partir d'aujourd'hui\r\n    and DAYOFWEEKISO(DT_DDMMYYYY) = 1 --g\u00e9n\u00e9rer les dates manquantes uniquement pour avoir autant de lignes que de semaines\r\n),\r\nmax_photo_dt as (\r\n    select max(photo_dt) as MAX_PHOTO_DT from period_inventory\r\n),\r\nsource_data as (\r\n    select ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT,\r\n    nvl(QTY_START_PERIOD_UOM,0) as QTY_START_PERIOD_UOM, --populer les semaines manquantes en source avec quantit\u00e9 \u00e9gale 0\r\n    nvl(QTY_AVAILABLE_UOM,0) as QTY_AVAILABLE_UOM --populer les semaines manquantes en source avec quantit\u00e9 \u00e9gale 0\r\n    from calendar\r\n    left outer join period_inventory on period_inventory.TIME_ID = calendar.DT_DDMMYYYY\r\n    left outer join max_photo_dt\r\n    where PHOTO_DT = MAX_PHOTO_DT --garder uniquement la photo de la derni\u00e8re semaine charg\u00e9e\r\n    --where PHOTO_DT = DATE_TRUNC('week',CURRENT_TIMESTAMP) --garder uniquement la photo de la semaine en cours\r\n)\r\n\r\nselect ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM\r\nfrom source_data", "language": "sql", "refs": [["dwh_dscp_period_inventory_hub"], ["dwh_dscp_period_inventory_sat"]], "sources": [["PARAMETERS", "CALENDAR_HUB"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_grizzly.PARAMETERS.CALENDAR_HUB", "model.dbt_grizzly.dwh_dscp_period_inventory_hub", "model.dbt_grizzly.dwh_dscp_period_inventory_sat"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\dscp_sch\\02_3NF\\planned_stock.sql", "compiled": true, "compiled_code": "with\nperiod_inventory as (\n    select hub.*, sat.CREATION_DT, sat.QTY_START_PERIOD_UOM, sat.QTY_AVAILABLE_UOM\n    from PRFR_00_DEV_20_SILVER_DB.PRFR_SC_SUPPLY_PLANNING.dwh_dscp_period_inventory_hub hub\n    inner join PRFR_00_DEV_20_SILVER_DB.PRFR_SC_SUPPLY_PLANNING.dwh_dscp_period_inventory_sat sat on hub.PERIOD_INVENTORY_KEY = sat.PERIOD_INVENTORY_KEY\n    qualify row_number() over (partition by sat.PERIOD_INVENTORY_KEY order by sat.LDTS desc) = 1 --garder la derni\u00e8re version de la semaine en cours\n),\ncalendar as (\n    select DT_DDMMYYYY\n    from PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar\n    where DT_DDMMYYYY between DATE_TRUNC('week',CURRENT_TIMESTAMP) and DATEADD(WEEK, 18, DATE_TRUNC('week',CURRENT_TIMESTAMP)) --garder que les 19 semaines dans le futur \u00e0 partir d'aujourd'hui\n    and DAYOFWEEKISO(DT_DDMMYYYY) = 1 --g\u00e9n\u00e9rer les dates manquantes uniquement pour avoir autant de lignes que de semaines\n),\nmax_photo_dt as (\n    select max(photo_dt) as MAX_PHOTO_DT from period_inventory\n),\nsource_data as (\n    select ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT,\n    nvl(QTY_START_PERIOD_UOM,0) as QTY_START_PERIOD_UOM, --populer les semaines manquantes en source avec quantit\u00e9 \u00e9gale 0\n    nvl(QTY_AVAILABLE_UOM,0) as QTY_AVAILABLE_UOM --populer les semaines manquantes en source avec quantit\u00e9 \u00e9gale 0\n    from calendar\n    left outer join period_inventory on period_inventory.TIME_ID = calendar.DT_DDMMYYYY\n    left outer join max_photo_dt\n    where PHOTO_DT = MAX_PHOTO_DT --garder uniquement la photo de la derni\u00e8re semaine charg\u00e9e\n    --where PHOTO_DT = DATE_TRUNC('week',CURRENT_TIMESTAMP) --garder uniquement la photo de la semaine en cours\n)\n\nselect ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM\nfrom source_data", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbt_grizzly.dwh_work_order_parts_list_tmp": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_REF_PRODUCTION_SCH", "name": "dwh_work_order_parts_list_tmp", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\production_sch\\00_stage\\dwh_work_order_parts_list_tmp.sql", "original_file_path": "models\\20_silver_db\\production_sch\\00_stage\\dwh_work_order_parts_list_tmp.sql", "unique_id": "model.dbt_grizzly.dwh_work_order_parts_list_tmp", "fqn": ["dbt_grizzly", "20_silver_db", "production_sch", "00_stage", "dwh_work_order_parts_list_tmp"], "alias": "dwh_work_order_parts_list_tmp", "checksum": {"name": "sha256", "checksum": "32a043b0af06ab34e82b321a8f54e7e3bd7456652ade7716b6fd3c22189617da"}, "config": {"enabled": true, "alias": null, "schema": "DWH_REF_PRODUCTION_SCH", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "production", "DataProduct.Name.Production", "stage"], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "production", "DataProduct.Name.Production", "stage"], "description": "Merge data from bronze JDE tables hub and sat", "columns": {"PARTS_LIST_KEY": {"name": "PARTS_LIST_KEY", "description": "Hash of the 1 natural key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSACTION_ID": {"name": "TRANSACTION_ID", "description": "Num Transaction Interne", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OF_ID": {"name": "OF_ID", "description": "N\u00b0 OF", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE_OF_CD": {"name": "TYPE_OF_CD", "description": "OF Type - Code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEM_ID": {"name": "ITEM_ID", "description": "Code Interne Composant", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEM_CD": {"name": "ITEM_CD", "description": "Code article composant", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UOM_CD": {"name": "UOM_CD", "description": "Unit\u00e9 de Mesure - Code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOCATION": {"name": "LOCATION", "description": "Emplacement", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOT_NUM": {"name": "LOT_NUM", "description": "Composant - N\u00b0 Lot", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QTY_AVAILABLE": {"name": "QTY_AVAILABLE", "description": "Quantit\u00e9 Consomm\u00e9e", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QTY_ORDER": {"name": "QTY_ORDER", "description": "Quantit\u00e9 Pr\u00e9vue", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QTY_CANCELED": {"name": "QTY_CANCELED", "description": "Quantit\u00e9 Annul\u00e9e", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QTY_HELD": {"name": "QTY_HELD", "description": "Quantit\u00e9 Bloqu\u00e9e", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QTY_COMMITED": {"name": "QTY_COMMITED", "description": "Quantit\u00e9 R\u00e9serv\u00e9e", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\20_silver_db\\production_sch\\00_stage\\dwh_work_order_parts_list_tmp.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["stage"], "schema": "DWH_REF_PRODUCTION_SCH", "materialized": "ephemeral"}, "created_at": 1683884072.9179814, "relation_name": null, "raw_code": "with\r\n    {{ cte_table_generator(\"F3111\") }},\r\n    source_data as (\r\n        select\r\n            sha2_binary(to_variant(array_construct(F3111.\"WMUKID\")), 512) as PARTS_LIST_KEY,  /* cle technique*/\r\n            F3111.\"WMUKID\" as TRANSACTION_ID,  /*Num Transaction Interne*/\r\n            F3111.\"WMDOCO\" as OF_ID, /*N\u00b0 OF*/\r\n            F3111.\"WMDCTO\" as TYPE_OF_CD ,/*OF Type - Code */\r\n            F3111.\"WMCPIT\" as ITEM_ID, /*Code Interne Composant*/\r\n            F3111.\"WMCPIL\" as ITEM_CD, /*Code article composant*/\r\n            F3111.\"WMUM\" as UOM_CD, /*Unit\u00e9 de Mesure - Code*/\r\n            F3111.\"WMLOCN\" as LOCATION, /*Emplacement*/\r\n            F3111.\"WMLOTN\" as LOT_NUM, /*Composant - N\u00b0 Lot*/\r\n            F3111.\"WMTRQT\"/1000 as QTY_AVAILABLE, /*Quantit\u00e9 Consomm\u00e9e*/\r\n            F3111.\"WMUORG\"/1000 as QTY_ORDER, /*Quantit\u00e9 Pr\u00e9vue*/\r\n            F3111.\"WMSOCN\"/1000 as QTY_CANCELED, /*Quantit\u00e9 Annul\u00e9e*/\r\n            F3111.\"WMSOBK\"/1000 as QTY_HELD, /*Quantit\u00e9 Bloqu\u00e9e*/\r\n            F3111.\"WMQNTA\"/1000 as QTY_COMMITED, /*Quantit\u00e9 R\u00e9serv\u00e9e*/\r\n            F3111.fd as start_date,  /* Date de debut*/\r\n            F3111.td as end_date,  /* Date de fin */\r\n            F3111.fd as effective_from,  /* Date effective */\r\n            '{{ var(\"start_datetime\")}}'::datetime as ldts,  /* Date de chargement*/\r\n            'JDE' as rscr  /* Donn\u00e9es JDE*/\r\n        from F3111\r\n    )\r\n\r\nselect\r\n     PARTS_LIST_KEY\r\n    ,TRANSACTION_ID\r\n    ,OF_ID\r\n    ,TYPE_OF_CD\r\n    ,ITEM_ID\r\n    ,ITEM_CD\r\n    ,UOM_CD\r\n    ,LOCATION\r\n    ,LOT_NUM\r\n    ,QTY_AVAILABLE\r\n    ,QTY_ORDER\r\n    ,QTY_CANCELED\r\n    ,QTY_HELD\r\n    ,QTY_COMMITED\r\n    ,start_date\r\n    ,end_date\r\n    ,effective_from\r\n    ,ldts\r\n    ,rscr\r\n    ,sha2_binary(to_variant(array_construct(\r\n     TRANSACTION_ID\r\n    ,OF_ID\r\n    ,TYPE_OF_CD\r\n    ,ITEM_ID\r\n    ,ITEM_CD\r\n    ,UOM_CD\r\n    ,LOCATION\r\n    ,LOT_NUM\r\n    ,QTY_AVAILABLE\r\n    ,QTY_ORDER\r\n    ,QTY_CANCELED\r\n    ,QTY_HELD\r\n    ,QTY_COMMITED)), 512) as hashdiff\r\nfrom source_data", "language": "sql", "refs": [], "sources": [["RAW_JDE", "F3111_HUB"], ["RAW_JDE", "F3111_S01"], ["RAW_JDE", "F3111_HUB"], ["RAW_JDE", "F3111_S01"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_grizzly.cte_table_generator"], "nodes": ["source.dbt_grizzly.RAW_JDE.F3111_HUB", "source.dbt_grizzly.RAW_JDE.F3111_S01", "source.dbt_grizzly.RAW_JDE.F3111_HUB", "source.dbt_grizzly.RAW_JDE.F3111_S01"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\production_sch\\00_stage\\dwh_work_order_parts_list_tmp.sql", "compiled": true, "compiled_code": "with\n    \nF3111 AS (\n  SELECT \n    F3111_HUB.\"ID\", \"WMUKID\",\n    F3111_S01.\"FD\", \"TD\", \"WMDOCO\", \"WMDCTO\", \"WMSFXO\", \"WMTBM\", \"WMFORQ\", \"WMITC\", \"WMCOBY\", \"WMCOTY\", \"WMCPNT\", \"WMFRMP\", \"WMTHRP\", \"WMFRGD\", \"WMTHGD\", \"WMRKCO\", \"WMRORN\", \"WMRCTO\", \"WMRLLN\", \"WMOPSQ\", \"WMBSEQ\", \"WMRSCP\", \"WMSCRP\", \"WMREWP\", \"WMASIP\", \"WMCPYP\", \"WMSTPP\", \"WMLOVD\", \"WMCPIT\", \"WMCPIL\", \"WMCPIA\", \"WMCMCU\", \"WMDSC1\", \"WMDSC2\", \"WMLOCN\", \"WMLOTN\", \"WMAN8\", \"WMLNTY\", \"WMSERN\", \"WMTRDJ\", \"WMDRQJ\", \"WMUORG\", \"WMTRQT\", \"WMSOCN\", \"WMSOBK\", \"WMCTS1\", \"WMQNTA\", \"WMUM\", \"WMEA\", \"WMRTG\", \"WMMTST\", \"WMDCT\", \"WMSHNO\", \"WMMCU\", \"WMOMCU\", \"WMOBJ\", \"WMSUB\", \"WMCMRV\", \"WMSTRX\", \"WMPARS\", \"WMCOMM\", \"WMURCD\", \"WMURDT\", \"WMURAT\", \"WMURRF\", \"WMURAB\", \"WMUSER\", \"WMPID\", \"WMJOBN\", \"WMUPMJ\", \"WMTDAY\", \"WMVEND\", \"WMPOC\", \"WMCTS4\", \"WMCTS7\", \"WMCTS8\", \"WMGLD\", \"WMSBFL\", \"WMAING\", \"WMSSTQ\", \"WMUOM2\", \"WMAPSC\", \"WMPSN\", \"WMDLEJ\", \"WMCOST\", \"WMCHPP\", \"WMCPNB\", \"WMBSEQAN\", \"DELETED_FLG\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F3111_HUB F3111_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F3111_S01 F3111_S01 ON F3111_HUB.ID = F3111_S01.ID\n    where F3111_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F3111_S01.ID ORDER BY F3111_S01.FD DESC) = 1 \n),\n    source_data as (\n        select\n            sha2_binary(to_variant(array_construct(F3111.\"WMUKID\")), 512) as PARTS_LIST_KEY,  /* cle technique*/\n            F3111.\"WMUKID\" as TRANSACTION_ID,  /*Num Transaction Interne*/\n            F3111.\"WMDOCO\" as OF_ID, /*N\u00b0 OF*/\n            F3111.\"WMDCTO\" as TYPE_OF_CD ,/*OF Type - Code */\n            F3111.\"WMCPIT\" as ITEM_ID, /*Code Interne Composant*/\n            F3111.\"WMCPIL\" as ITEM_CD, /*Code article composant*/\n            F3111.\"WMUM\" as UOM_CD, /*Unit\u00e9 de Mesure - Code*/\n            F3111.\"WMLOCN\" as LOCATION, /*Emplacement*/\n            F3111.\"WMLOTN\" as LOT_NUM, /*Composant - N\u00b0 Lot*/\n            F3111.\"WMTRQT\"/1000 as QTY_AVAILABLE, /*Quantit\u00e9 Consomm\u00e9e*/\n            F3111.\"WMUORG\"/1000 as QTY_ORDER, /*Quantit\u00e9 Pr\u00e9vue*/\n            F3111.\"WMSOCN\"/1000 as QTY_CANCELED, /*Quantit\u00e9 Annul\u00e9e*/\n            F3111.\"WMSOBK\"/1000 as QTY_HELD, /*Quantit\u00e9 Bloqu\u00e9e*/\n            F3111.\"WMQNTA\"/1000 as QTY_COMMITED, /*Quantit\u00e9 R\u00e9serv\u00e9e*/\n            F3111.fd as start_date,  /* Date de debut*/\n            F3111.td as end_date,  /* Date de fin */\n            F3111.fd as effective_from,  /* Date effective */\n            '2023-05-12 09:34:26'::datetime as ldts,  /* Date de chargement*/\n            'JDE' as rscr  /* Donn\u00e9es JDE*/\n        from F3111\n    )\n\nselect\n     PARTS_LIST_KEY\n    ,TRANSACTION_ID\n    ,OF_ID\n    ,TYPE_OF_CD\n    ,ITEM_ID\n    ,ITEM_CD\n    ,UOM_CD\n    ,LOCATION\n    ,LOT_NUM\n    ,QTY_AVAILABLE\n    ,QTY_ORDER\n    ,QTY_CANCELED\n    ,QTY_HELD\n    ,QTY_COMMITED\n    ,start_date\n    ,end_date\n    ,effective_from\n    ,ldts\n    ,rscr\n    ,sha2_binary(to_variant(array_construct(\n     TRANSACTION_ID\n    ,OF_ID\n    ,TYPE_OF_CD\n    ,ITEM_ID\n    ,ITEM_CD\n    ,UOM_CD\n    ,LOCATION\n    ,LOT_NUM\n    ,QTY_AVAILABLE\n    ,QTY_ORDER\n    ,QTY_CANCELED\n    ,QTY_HELD\n    ,QTY_COMMITED)), 512) as hashdiff\nfrom source_data", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbt_grizzly.dwh_work_order_tmp": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_REF_PRODUCTION_SCH", "name": "dwh_work_order_tmp", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\production_sch\\00_stage\\dwh_work_order_tmp.sql", "original_file_path": "models\\20_silver_db\\production_sch\\00_stage\\dwh_work_order_tmp.sql", "unique_id": "model.dbt_grizzly.dwh_work_order_tmp", "fqn": ["dbt_grizzly", "20_silver_db", "production_sch", "00_stage", "dwh_work_order_tmp"], "alias": "dwh_work_order_tmp", "checksum": {"name": "sha256", "checksum": "7d88b0750f7c75fdcb5c82349431396fbbd28db91e881c6db1de0343abdcd2c0"}, "config": {"enabled": true, "alias": null, "schema": "DWH_REF_PRODUCTION_SCH", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "production", "DataProduct.Name.Production", "stage"], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "production", "DataProduct.Name.Production", "stage"], "description": "Merge data from bronze JDE tables hub and sat", "columns": {"DOCUMENT_NUM": {"name": "DOCUMENT_NUM", "description": "Document (Order No Invoice etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPANY_CD": {"name": "COMPANY_CD", "description": "Company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Item Number - Short", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_CD": {"name": "SITE_CD", "description": "Branch", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRODUCTION_DT": {"name": "PRODUCTION_DT", "description": "Date - Completion (Julian)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPPED_QTY": {"name": "SHIPPED_QTY", "description": "Quantity Shipped", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CODE_TYPE_OF": {"name": "CODE_TYPE_OF", "description": "OF Type - Code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CODE_ARTICLE": {"name": "CODE_ARTICLE", "description": "Code Article", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASKED_DTOF": {"name": "ASKED_DTOF", "description": "ASKED_DT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDER_ST_CD": {"name": "ORDER_ST_CD", "description": "ORDER_ST_CD", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\20_silver_db\\production_sch\\00_stage\\dwh_work_order_tmp.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["stage"], "schema": "DWH_REF_PRODUCTION_SCH", "materialized": "ephemeral"}, "created_at": 1683884072.9260254, "relation_name": null, "raw_code": "with\r\n    {{ cte_table_generator(\"F4801\") }},\r\n    source_data as (\r\n        select\r\n            sha2_binary(to_variant(array_construct(f4801.\"WADOCO\",f4801.\"WADCTO\",f4801.\"WACO\")), 512) as work_order_key,  /* cle technique*/\r\n            f4801.\"WADOCO\" as document_num,  /* Document (Order No Invoice etc.)*/\r\n            f4801.\"WACO\" as company_cd,  /* Company*/\r\n            f4801.\"WAITM\" as item_id,  /* Item Number - Short*/\r\n            f4801.\"WAMMCU\" as site_cd,  /* Branch*/\r\n            f4801.\"WASTRX\" as production_dt,  /* Date - Completion (Julian)*/\r\n            f4801.\"WASOQS\" as shipped_qty,  /* Quantity Shipped*/\r\n            f4801.\"WATRT\" as routing_type,\r\n            f4801.\"WADCTO\" as CODE_TYPE_OF, /*OF Type - Code*/\r\n            f4801.\"WALITM\" as CODE_ARTICLE, /*Code Article*/\r\n            f4801.\"WADRQJ\" as ASKED_DT, /*ASKED_DT*/\r\n            f4801.\"WASRST\" as ORDER_ST_CD, /*ORDER_ST_CD*/\r\n            f4801.fd as start_date,  /* Date de debut*/\r\n            f4801.td as end_date,  /* Date de fin */\r\n            f4801.fd as effective_from,  /* Date effective */\r\n            '{{ var(\"start_datetime\")}}'::datetime as ldts,  /* Date de chargement*/\r\n            'JDE' as rscr  /* Donn\u00e9es JDE*/\r\n        from f4801\r\n    )\r\n\r\nselect\r\n    work_order_key,\r\n    document_num,\r\n    company_cd,\r\n    item_id,\r\n    site_cd,\r\n    production_dt,\r\n    shipped_qty,\r\n    routing_type,\r\n    CODE_TYPE_OF,\r\n    CODE_ARTICLE,\r\n    ASKED_DT,\r\n    ORDER_ST_CD,\r\n    start_date,\r\n    end_date,\r\n    effective_from,\r\n    ldts,\r\n    rscr,\r\n    sha2_binary(to_variant(array_construct(document_num,company_cd,item_id,site_cd,production_dt,shipped_qty,routing_type,CODE_TYPE_OF,CODE_ARTICLE,ASKED_DT,ORDER_ST_CD)), 512) as hashdiff\r\nfrom source_data", "language": "sql", "refs": [], "sources": [["RAW_JDE", "F4801_HUB"], ["RAW_JDE", "F4801_S01"], ["RAW_JDE", "F4801_HUB"], ["RAW_JDE", "F4801_S01"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_grizzly.cte_table_generator"], "nodes": ["source.dbt_grizzly.RAW_JDE.F4801_HUB", "source.dbt_grizzly.RAW_JDE.F4801_S01", "source.dbt_grizzly.RAW_JDE.F4801_HUB", "source.dbt_grizzly.RAW_JDE.F4801_S01"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\production_sch\\00_stage\\dwh_work_order_tmp.sql", "compiled": true, "compiled_code": "with\n    \nF4801 AS (\n  SELECT \n    F4801_HUB.\"ID\", \"WADOCO\",\n    F4801_S01.\"FD\", \"TD\", \"WADCTO\", \"WASFXO\", \"WARCTO\", \"WARORN\", \"WALNID\", \"WAPTWO\", \"WAPARS\", \"WATYPS\", \"WAPRTS\", \"WADL01\", \"WASTCM\", \"WACO\", \"WAMCU\", \"WAMMCU\", \"WALOCN\", \"WAAISL\", \"WABIN\", \"WASRST\", \"WADCG\", \"WASUB\", \"WAAN8\", \"WAANO\", \"WAANSA\", \"WAANPA\", \"WAANP\", \"WADPL\", \"WAANT\", \"WANAN8\", \"WATRDJ\", \"WASTRT\", \"WADRQJ\", \"WASTRX\", \"WADAP\", \"WADAT\", \"WAPPDT\", \"WAWR01\", \"WAWR02\", \"WAWR03\", \"WAWR04\", \"WAWR05\", \"WAWR06\", \"WAWR07\", \"WAWR08\", \"WAWR09\", \"WAWR10\", \"WAVR01\", \"WAVR02\", \"WAAMTO\", \"WASETC\", \"WABRT\", \"WAPAYT\", \"WAAMTC\", \"WAHRSO\", \"WAHRSC\", \"WAAMTA\", \"WAHRSA\", \"WAITM\", \"WAAITM\", \"WALITM\", \"WANUMB\", \"WAAPID\", \"WAUORG\", \"WASOBK\", \"WASOCN\", \"WASOQS\", \"WAQTYT\", \"WAUOM\", \"WASHNO\", \"WAPBTM\", \"WATBM\", \"WATRT\", \"WASHTY\", \"WAPEC\", \"WAPPFG\", \"WABM\", \"WARTG\", \"WASPRT\", \"WAUNCD\", \"WAINDC\", \"WARESC\", \"WAMOH\", \"WATDT\", \"WAPOU\", \"WAPC\", \"WALTLV\", \"WALTCM\", \"WACTS1\", \"WALOTN\", \"WALOTP\", \"WALOTG\", \"WARAT1\", \"WARAT2\", \"WADCT\", \"WASBLI\", \"WARKCO\", \"WABREV\", \"WARREV\", \"WADRWC\", \"WARTCH\", \"WAPNRQ\", \"WAREAS\", \"WAPHSE\", \"WAXDSP\", \"WABOMC\", \"WAURCD\", \"WAURDT\", \"WAURAT\", \"WAURAB\", \"WAURRF\", \"WAUSER\", \"WAPID\", \"WAJOBN\", \"WAUPMJ\", \"WATDAY\", \"WAAAID\", \"WANTST\", \"WAXRTO\", \"WAESDN\", \"WAACDN\", \"WASAID\", \"WAMPOS\", \"WAAPRT\", \"WAAMLC\", \"WAAMMC\", \"WAAMOT\", \"WALBAM\", \"WAMTAM\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4801_HUB F4801_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4801_S01 F4801_S01 ON F4801_HUB.ID = F4801_S01.ID\n    where F4801_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4801_S01.ID ORDER BY F4801_S01.FD DESC) = 1 \n),\n    source_data as (\n        select\n            sha2_binary(to_variant(array_construct(f4801.\"WADOCO\",f4801.\"WADCTO\",f4801.\"WACO\")), 512) as work_order_key,  /* cle technique*/\n            f4801.\"WADOCO\" as document_num,  /* Document (Order No Invoice etc.)*/\n            f4801.\"WACO\" as company_cd,  /* Company*/\n            f4801.\"WAITM\" as item_id,  /* Item Number - Short*/\n            f4801.\"WAMMCU\" as site_cd,  /* Branch*/\n            f4801.\"WASTRX\" as production_dt,  /* Date - Completion (Julian)*/\n            f4801.\"WASOQS\" as shipped_qty,  /* Quantity Shipped*/\n            f4801.\"WATRT\" as routing_type,\n            f4801.\"WADCTO\" as CODE_TYPE_OF, /*OF Type - Code*/\n            f4801.\"WALITM\" as CODE_ARTICLE, /*Code Article*/\n            f4801.\"WADRQJ\" as ASKED_DT, /*ASKED_DT*/\n            f4801.\"WASRST\" as ORDER_ST_CD, /*ORDER_ST_CD*/\n            f4801.fd as start_date,  /* Date de debut*/\n            f4801.td as end_date,  /* Date de fin */\n            f4801.fd as effective_from,  /* Date effective */\n            '2023-05-12 09:34:26'::datetime as ldts,  /* Date de chargement*/\n            'JDE' as rscr  /* Donn\u00e9es JDE*/\n        from f4801\n    )\n\nselect\n    work_order_key,\n    document_num,\n    company_cd,\n    item_id,\n    site_cd,\n    production_dt,\n    shipped_qty,\n    routing_type,\n    CODE_TYPE_OF,\n    CODE_ARTICLE,\n    ASKED_DT,\n    ORDER_ST_CD,\n    start_date,\n    end_date,\n    effective_from,\n    ldts,\n    rscr,\n    sha2_binary(to_variant(array_construct(document_num,company_cd,item_id,site_cd,production_dt,shipped_qty,routing_type,CODE_TYPE_OF,CODE_ARTICLE,ASKED_DT,ORDER_ST_CD)), 512) as hashdiff\nfrom source_data", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbt_grizzly.dwh_work_order_hub": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_REF_PRODUCTION_SCH", "name": "dwh_work_order_hub", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\production_sch\\01_business_vault\\dwh_work_order_hub.sql", "original_file_path": "models\\20_silver_db\\production_sch\\01_business_vault\\dwh_work_order_hub.sql", "unique_id": "model.dbt_grizzly.dwh_work_order_hub", "fqn": ["dbt_grizzly", "20_silver_db", "production_sch", "01_business_vault", "dwh_work_order_hub"], "alias": "dwh_work_order_hub", "checksum": {"name": "sha256", "checksum": "6950480f4231cfd60a6510a876aeadf219466b041302d10f87e97c76b1e203af"}, "config": {"enabled": true, "alias": null, "schema": "DWH_REF_PRODUCTION_SCH", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "production", "DataProduct.Name.Production", "business_vault"], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "production", "DataProduct.Name.Production", "business_vault"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["business_vault"], "schema": "DWH_REF_PRODUCTION_SCH", "materialized": "incremental"}, "created_at": 1683884071.9048173, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PRODUCTION_SCH.dwh_work_order_hub", "raw_code": "{%- set source_model = \"dwh_work_order_tmp\" -%}\r\n{%- set src_pk = \"WORK_ORDER_KEY\" -%}\r\n{%- set src_nk = [\"DOCUMENT_NUM\",\"COMPANY_CD\",\"CODE_TYPE_OF\"] -%}\r\n{%- set src_ldts = \"LDTS\" -%}\r\n{%- set src_source = \"RSCR\" -%}\r\n\r\n{{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\r\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["dwh_work_order_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.hub"], "nodes": ["model.dbt_grizzly.dwh_work_order_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\production_sch\\01_business_vault\\dwh_work_order_hub.sql", "compiled": true, "compiled_code": "-- Generated by dbtvault.\n\nWITH  __dbt__cte__dwh_work_order_tmp as (\nwith\n    \nF4801 AS (\n  SELECT \n    F4801_HUB.\"ID\", \"WADOCO\",\n    F4801_S01.\"FD\", \"TD\", \"WADCTO\", \"WASFXO\", \"WARCTO\", \"WARORN\", \"WALNID\", \"WAPTWO\", \"WAPARS\", \"WATYPS\", \"WAPRTS\", \"WADL01\", \"WASTCM\", \"WACO\", \"WAMCU\", \"WAMMCU\", \"WALOCN\", \"WAAISL\", \"WABIN\", \"WASRST\", \"WADCG\", \"WASUB\", \"WAAN8\", \"WAANO\", \"WAANSA\", \"WAANPA\", \"WAANP\", \"WADPL\", \"WAANT\", \"WANAN8\", \"WATRDJ\", \"WASTRT\", \"WADRQJ\", \"WASTRX\", \"WADAP\", \"WADAT\", \"WAPPDT\", \"WAWR01\", \"WAWR02\", \"WAWR03\", \"WAWR04\", \"WAWR05\", \"WAWR06\", \"WAWR07\", \"WAWR08\", \"WAWR09\", \"WAWR10\", \"WAVR01\", \"WAVR02\", \"WAAMTO\", \"WASETC\", \"WABRT\", \"WAPAYT\", \"WAAMTC\", \"WAHRSO\", \"WAHRSC\", \"WAAMTA\", \"WAHRSA\", \"WAITM\", \"WAAITM\", \"WALITM\", \"WANUMB\", \"WAAPID\", \"WAUORG\", \"WASOBK\", \"WASOCN\", \"WASOQS\", \"WAQTYT\", \"WAUOM\", \"WASHNO\", \"WAPBTM\", \"WATBM\", \"WATRT\", \"WASHTY\", \"WAPEC\", \"WAPPFG\", \"WABM\", \"WARTG\", \"WASPRT\", \"WAUNCD\", \"WAINDC\", \"WARESC\", \"WAMOH\", \"WATDT\", \"WAPOU\", \"WAPC\", \"WALTLV\", \"WALTCM\", \"WACTS1\", \"WALOTN\", \"WALOTP\", \"WALOTG\", \"WARAT1\", \"WARAT2\", \"WADCT\", \"WASBLI\", \"WARKCO\", \"WABREV\", \"WARREV\", \"WADRWC\", \"WARTCH\", \"WAPNRQ\", \"WAREAS\", \"WAPHSE\", \"WAXDSP\", \"WABOMC\", \"WAURCD\", \"WAURDT\", \"WAURAT\", \"WAURAB\", \"WAURRF\", \"WAUSER\", \"WAPID\", \"WAJOBN\", \"WAUPMJ\", \"WATDAY\", \"WAAAID\", \"WANTST\", \"WAXRTO\", \"WAESDN\", \"WAACDN\", \"WASAID\", \"WAMPOS\", \"WAAPRT\", \"WAAMLC\", \"WAAMMC\", \"WAAMOT\", \"WALBAM\", \"WAMTAM\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4801_HUB F4801_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4801_S01 F4801_S01 ON F4801_HUB.ID = F4801_S01.ID\n    where F4801_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4801_S01.ID ORDER BY F4801_S01.FD DESC) = 1 \n),\n    source_data as (\n        select\n            sha2_binary(to_variant(array_construct(f4801.\"WADOCO\",f4801.\"WADCTO\",f4801.\"WACO\")), 512) as work_order_key,  /* cle technique*/\n            f4801.\"WADOCO\" as document_num,  /* Document (Order No Invoice etc.)*/\n            f4801.\"WACO\" as company_cd,  /* Company*/\n            f4801.\"WAITM\" as item_id,  /* Item Number - Short*/\n            f4801.\"WAMMCU\" as site_cd,  /* Branch*/\n            f4801.\"WASTRX\" as production_dt,  /* Date - Completion (Julian)*/\n            f4801.\"WASOQS\" as shipped_qty,  /* Quantity Shipped*/\n            f4801.\"WATRT\" as routing_type,\n            f4801.\"WADCTO\" as CODE_TYPE_OF, /*OF Type - Code*/\n            f4801.\"WALITM\" as CODE_ARTICLE, /*Code Article*/\n            f4801.\"WADRQJ\" as ASKED_DT, /*ASKED_DT*/\n            f4801.\"WASRST\" as ORDER_ST_CD, /*ORDER_ST_CD*/\n            f4801.fd as start_date,  /* Date de debut*/\n            f4801.td as end_date,  /* Date de fin */\n            f4801.fd as effective_from,  /* Date effective */\n            '2023-05-12 09:34:26'::datetime as ldts,  /* Date de chargement*/\n            'JDE' as rscr  /* Donn\u00e9es JDE*/\n        from f4801\n    )\n\nselect\n    work_order_key,\n    document_num,\n    company_cd,\n    item_id,\n    site_cd,\n    production_dt,\n    shipped_qty,\n    routing_type,\n    CODE_TYPE_OF,\n    CODE_ARTICLE,\n    ASKED_DT,\n    ORDER_ST_CD,\n    start_date,\n    end_date,\n    effective_from,\n    ldts,\n    rscr,\n    sha2_binary(to_variant(array_construct(document_num,company_cd,item_id,site_cd,production_dt,shipped_qty,routing_type,CODE_TYPE_OF,CODE_ARTICLE,ASKED_DT,ORDER_ST_CD)), 512) as hashdiff\nfrom source_data\n),row_rank_1 AS (\n    SELECT rr.\"WORK_ORDER_KEY\", rr.\"DOCUMENT_NUM\", rr.\"COMPANY_CD\", rr.\"CODE_TYPE_OF\", rr.\"LDTS\", rr.\"RSCR\",\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.\"WORK_ORDER_KEY\"\n               ORDER BY rr.\"LDTS\"\n           ) AS row_number\n    FROM __dbt__cte__dwh_work_order_tmp AS rr\n    WHERE rr.\"WORK_ORDER_KEY\" IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.\"WORK_ORDER_KEY\", a.\"DOCUMENT_NUM\", a.\"COMPANY_CD\", a.\"CODE_TYPE_OF\", a.\"LDTS\", a.\"RSCR\"\n    FROM row_rank_1 AS a\n    LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PRODUCTION_SCH.dwh_work_order_hub AS d\n    ON a.\"WORK_ORDER_KEY\" = d.\"WORK_ORDER_KEY\"\n    WHERE d.\"WORK_ORDER_KEY\" IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_work_order_tmp", "sql": " __dbt__cte__dwh_work_order_tmp as (\nwith\n    \nF4801 AS (\n  SELECT \n    F4801_HUB.\"ID\", \"WADOCO\",\n    F4801_S01.\"FD\", \"TD\", \"WADCTO\", \"WASFXO\", \"WARCTO\", \"WARORN\", \"WALNID\", \"WAPTWO\", \"WAPARS\", \"WATYPS\", \"WAPRTS\", \"WADL01\", \"WASTCM\", \"WACO\", \"WAMCU\", \"WAMMCU\", \"WALOCN\", \"WAAISL\", \"WABIN\", \"WASRST\", \"WADCG\", \"WASUB\", \"WAAN8\", \"WAANO\", \"WAANSA\", \"WAANPA\", \"WAANP\", \"WADPL\", \"WAANT\", \"WANAN8\", \"WATRDJ\", \"WASTRT\", \"WADRQJ\", \"WASTRX\", \"WADAP\", \"WADAT\", \"WAPPDT\", \"WAWR01\", \"WAWR02\", \"WAWR03\", \"WAWR04\", \"WAWR05\", \"WAWR06\", \"WAWR07\", \"WAWR08\", \"WAWR09\", \"WAWR10\", \"WAVR01\", \"WAVR02\", \"WAAMTO\", \"WASETC\", \"WABRT\", \"WAPAYT\", \"WAAMTC\", \"WAHRSO\", \"WAHRSC\", \"WAAMTA\", \"WAHRSA\", \"WAITM\", \"WAAITM\", \"WALITM\", \"WANUMB\", \"WAAPID\", \"WAUORG\", \"WASOBK\", \"WASOCN\", \"WASOQS\", \"WAQTYT\", \"WAUOM\", \"WASHNO\", \"WAPBTM\", \"WATBM\", \"WATRT\", \"WASHTY\", \"WAPEC\", \"WAPPFG\", \"WABM\", \"WARTG\", \"WASPRT\", \"WAUNCD\", \"WAINDC\", \"WARESC\", \"WAMOH\", \"WATDT\", \"WAPOU\", \"WAPC\", \"WALTLV\", \"WALTCM\", \"WACTS1\", \"WALOTN\", \"WALOTP\", \"WALOTG\", \"WARAT1\", \"WARAT2\", \"WADCT\", \"WASBLI\", \"WARKCO\", \"WABREV\", \"WARREV\", \"WADRWC\", \"WARTCH\", \"WAPNRQ\", \"WAREAS\", \"WAPHSE\", \"WAXDSP\", \"WABOMC\", \"WAURCD\", \"WAURDT\", \"WAURAT\", \"WAURAB\", \"WAURRF\", \"WAUSER\", \"WAPID\", \"WAJOBN\", \"WAUPMJ\", \"WATDAY\", \"WAAAID\", \"WANTST\", \"WAXRTO\", \"WAESDN\", \"WAACDN\", \"WASAID\", \"WAMPOS\", \"WAAPRT\", \"WAAMLC\", \"WAAMMC\", \"WAAMOT\", \"WALBAM\", \"WAMTAM\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4801_HUB F4801_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4801_S01 F4801_S01 ON F4801_HUB.ID = F4801_S01.ID\n    where F4801_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4801_S01.ID ORDER BY F4801_S01.FD DESC) = 1 \n),\n    source_data as (\n        select\n            sha2_binary(to_variant(array_construct(f4801.\"WADOCO\",f4801.\"WADCTO\",f4801.\"WACO\")), 512) as work_order_key,  /* cle technique*/\n            f4801.\"WADOCO\" as document_num,  /* Document (Order No Invoice etc.)*/\n            f4801.\"WACO\" as company_cd,  /* Company*/\n            f4801.\"WAITM\" as item_id,  /* Item Number - Short*/\n            f4801.\"WAMMCU\" as site_cd,  /* Branch*/\n            f4801.\"WASTRX\" as production_dt,  /* Date - Completion (Julian)*/\n            f4801.\"WASOQS\" as shipped_qty,  /* Quantity Shipped*/\n            f4801.\"WATRT\" as routing_type,\n            f4801.\"WADCTO\" as CODE_TYPE_OF, /*OF Type - Code*/\n            f4801.\"WALITM\" as CODE_ARTICLE, /*Code Article*/\n            f4801.\"WADRQJ\" as ASKED_DT, /*ASKED_DT*/\n            f4801.\"WASRST\" as ORDER_ST_CD, /*ORDER_ST_CD*/\n            f4801.fd as start_date,  /* Date de debut*/\n            f4801.td as end_date,  /* Date de fin */\n            f4801.fd as effective_from,  /* Date effective */\n            '2023-05-12 09:34:26'::datetime as ldts,  /* Date de chargement*/\n            'JDE' as rscr  /* Donn\u00e9es JDE*/\n        from f4801\n    )\n\nselect\n    work_order_key,\n    document_num,\n    company_cd,\n    item_id,\n    site_cd,\n    production_dt,\n    shipped_qty,\n    routing_type,\n    CODE_TYPE_OF,\n    CODE_ARTICLE,\n    ASKED_DT,\n    ORDER_ST_CD,\n    start_date,\n    end_date,\n    effective_from,\n    ldts,\n    rscr,\n    sha2_binary(to_variant(array_construct(document_num,company_cd,item_id,site_cd,production_dt,shipped_qty,routing_type,CODE_TYPE_OF,CODE_ARTICLE,ASKED_DT,ORDER_ST_CD)), 512) as hashdiff\nfrom source_data\n)"}]}, "model.dbt_grizzly.dwh_work_order_parts_list_hub": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_REF_PRODUCTION_SCH", "name": "dwh_work_order_parts_list_hub", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\production_sch\\01_business_vault\\dwh_work_order_parts_list_hub.sql", "original_file_path": "models\\20_silver_db\\production_sch\\01_business_vault\\dwh_work_order_parts_list_hub.sql", "unique_id": "model.dbt_grizzly.dwh_work_order_parts_list_hub", "fqn": ["dbt_grizzly", "20_silver_db", "production_sch", "01_business_vault", "dwh_work_order_parts_list_hub"], "alias": "dwh_work_order_parts_list_hub", "checksum": {"name": "sha256", "checksum": "59762edeed0e5552ecac3f4d6c144a2b8c191074151b9c10a8e2e9a642bae091"}, "config": {"enabled": true, "alias": null, "schema": "DWH_REF_PRODUCTION_SCH", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "production", "DataProduct.Name.Production", "business_vault"], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "production", "DataProduct.Name.Production", "business_vault"], "description": "Hub table of the transport tour head silver entity", "columns": {"PARTS_LIST_KEY": {"name": "PARTS_LIST_KEY", "description": "Hash of the 1 natural keys", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\20_silver_db\\production_sch\\01_business_vault\\dwh_work_order_parts_list_hub.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["business_vault"], "schema": "DWH_REF_PRODUCTION_SCH", "materialized": "incremental"}, "created_at": 1683884072.9341033, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PRODUCTION_SCH.dwh_work_order_parts_list_hub", "raw_code": "{%- set source_model = \"dwh_work_order_parts_list_tmp\" -%}\r\n{%- set src_pk = \"PARTS_LIST_KEY\" -%}\r\n{%- set src_nk = [\"TRANSACTION_ID\"] -%}\r\n{%- set src_ldts = \"LDTS\" -%}\r\n{%- set src_source = \"RSCR\" -%}\r\n\r\n{{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\r\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["dwh_work_order_parts_list_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.hub"], "nodes": ["model.dbt_grizzly.dwh_work_order_parts_list_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\production_sch\\01_business_vault\\dwh_work_order_parts_list_hub.sql", "compiled": true, "compiled_code": "-- Generated by dbtvault.\n\nWITH  __dbt__cte__dwh_work_order_parts_list_tmp as (\nwith\n    \nF3111 AS (\n  SELECT \n    F3111_HUB.\"ID\", \"WMUKID\",\n    F3111_S01.\"FD\", \"TD\", \"WMDOCO\", \"WMDCTO\", \"WMSFXO\", \"WMTBM\", \"WMFORQ\", \"WMITC\", \"WMCOBY\", \"WMCOTY\", \"WMCPNT\", \"WMFRMP\", \"WMTHRP\", \"WMFRGD\", \"WMTHGD\", \"WMRKCO\", \"WMRORN\", \"WMRCTO\", \"WMRLLN\", \"WMOPSQ\", \"WMBSEQ\", \"WMRSCP\", \"WMSCRP\", \"WMREWP\", \"WMASIP\", \"WMCPYP\", \"WMSTPP\", \"WMLOVD\", \"WMCPIT\", \"WMCPIL\", \"WMCPIA\", \"WMCMCU\", \"WMDSC1\", \"WMDSC2\", \"WMLOCN\", \"WMLOTN\", \"WMAN8\", \"WMLNTY\", \"WMSERN\", \"WMTRDJ\", \"WMDRQJ\", \"WMUORG\", \"WMTRQT\", \"WMSOCN\", \"WMSOBK\", \"WMCTS1\", \"WMQNTA\", \"WMUM\", \"WMEA\", \"WMRTG\", \"WMMTST\", \"WMDCT\", \"WMSHNO\", \"WMMCU\", \"WMOMCU\", \"WMOBJ\", \"WMSUB\", \"WMCMRV\", \"WMSTRX\", \"WMPARS\", \"WMCOMM\", \"WMURCD\", \"WMURDT\", \"WMURAT\", \"WMURRF\", \"WMURAB\", \"WMUSER\", \"WMPID\", \"WMJOBN\", \"WMUPMJ\", \"WMTDAY\", \"WMVEND\", \"WMPOC\", \"WMCTS4\", \"WMCTS7\", \"WMCTS8\", \"WMGLD\", \"WMSBFL\", \"WMAING\", \"WMSSTQ\", \"WMUOM2\", \"WMAPSC\", \"WMPSN\", \"WMDLEJ\", \"WMCOST\", \"WMCHPP\", \"WMCPNB\", \"WMBSEQAN\", \"DELETED_FLG\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F3111_HUB F3111_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F3111_S01 F3111_S01 ON F3111_HUB.ID = F3111_S01.ID\n    where F3111_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F3111_S01.ID ORDER BY F3111_S01.FD DESC) = 1 \n),\n    source_data as (\n        select\n            sha2_binary(to_variant(array_construct(F3111.\"WMUKID\")), 512) as PARTS_LIST_KEY,  /* cle technique*/\n            F3111.\"WMUKID\" as TRANSACTION_ID,  /*Num Transaction Interne*/\n            F3111.\"WMDOCO\" as OF_ID, /*N\u00b0 OF*/\n            F3111.\"WMDCTO\" as TYPE_OF_CD ,/*OF Type - Code */\n            F3111.\"WMCPIT\" as ITEM_ID, /*Code Interne Composant*/\n            F3111.\"WMCPIL\" as ITEM_CD, /*Code article composant*/\n            F3111.\"WMUM\" as UOM_CD, /*Unit\u00e9 de Mesure - Code*/\n            F3111.\"WMLOCN\" as LOCATION, /*Emplacement*/\n            F3111.\"WMLOTN\" as LOT_NUM, /*Composant - N\u00b0 Lot*/\n            F3111.\"WMTRQT\"/1000 as QTY_AVAILABLE, /*Quantit\u00e9 Consomm\u00e9e*/\n            F3111.\"WMUORG\"/1000 as QTY_ORDER, /*Quantit\u00e9 Pr\u00e9vue*/\n            F3111.\"WMSOCN\"/1000 as QTY_CANCELED, /*Quantit\u00e9 Annul\u00e9e*/\n            F3111.\"WMSOBK\"/1000 as QTY_HELD, /*Quantit\u00e9 Bloqu\u00e9e*/\n            F3111.\"WMQNTA\"/1000 as QTY_COMMITED, /*Quantit\u00e9 R\u00e9serv\u00e9e*/\n            F3111.fd as start_date,  /* Date de debut*/\n            F3111.td as end_date,  /* Date de fin */\n            F3111.fd as effective_from,  /* Date effective */\n            '2023-05-12 09:34:26'::datetime as ldts,  /* Date de chargement*/\n            'JDE' as rscr  /* Donn\u00e9es JDE*/\n        from F3111\n    )\n\nselect\n     PARTS_LIST_KEY\n    ,TRANSACTION_ID\n    ,OF_ID\n    ,TYPE_OF_CD\n    ,ITEM_ID\n    ,ITEM_CD\n    ,UOM_CD\n    ,LOCATION\n    ,LOT_NUM\n    ,QTY_AVAILABLE\n    ,QTY_ORDER\n    ,QTY_CANCELED\n    ,QTY_HELD\n    ,QTY_COMMITED\n    ,start_date\n    ,end_date\n    ,effective_from\n    ,ldts\n    ,rscr\n    ,sha2_binary(to_variant(array_construct(\n     TRANSACTION_ID\n    ,OF_ID\n    ,TYPE_OF_CD\n    ,ITEM_ID\n    ,ITEM_CD\n    ,UOM_CD\n    ,LOCATION\n    ,LOT_NUM\n    ,QTY_AVAILABLE\n    ,QTY_ORDER\n    ,QTY_CANCELED\n    ,QTY_HELD\n    ,QTY_COMMITED)), 512) as hashdiff\nfrom source_data\n),row_rank_1 AS (\n    SELECT rr.\"PARTS_LIST_KEY\", rr.\"TRANSACTION_ID\", rr.\"LDTS\", rr.\"RSCR\",\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.\"PARTS_LIST_KEY\"\n               ORDER BY rr.\"LDTS\"\n           ) AS row_number\n    FROM __dbt__cte__dwh_work_order_parts_list_tmp AS rr\n    WHERE rr.\"PARTS_LIST_KEY\" IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.\"PARTS_LIST_KEY\", a.\"TRANSACTION_ID\", a.\"LDTS\", a.\"RSCR\"\n    FROM row_rank_1 AS a\n    LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PRODUCTION_SCH.dwh_work_order_parts_list_hub AS d\n    ON a.\"PARTS_LIST_KEY\" = d.\"PARTS_LIST_KEY\"\n    WHERE d.\"PARTS_LIST_KEY\" IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_work_order_parts_list_tmp", "sql": " __dbt__cte__dwh_work_order_parts_list_tmp as (\nwith\n    \nF3111 AS (\n  SELECT \n    F3111_HUB.\"ID\", \"WMUKID\",\n    F3111_S01.\"FD\", \"TD\", \"WMDOCO\", \"WMDCTO\", \"WMSFXO\", \"WMTBM\", \"WMFORQ\", \"WMITC\", \"WMCOBY\", \"WMCOTY\", \"WMCPNT\", \"WMFRMP\", \"WMTHRP\", \"WMFRGD\", \"WMTHGD\", \"WMRKCO\", \"WMRORN\", \"WMRCTO\", \"WMRLLN\", \"WMOPSQ\", \"WMBSEQ\", \"WMRSCP\", \"WMSCRP\", \"WMREWP\", \"WMASIP\", \"WMCPYP\", \"WMSTPP\", \"WMLOVD\", \"WMCPIT\", \"WMCPIL\", \"WMCPIA\", \"WMCMCU\", \"WMDSC1\", \"WMDSC2\", \"WMLOCN\", \"WMLOTN\", \"WMAN8\", \"WMLNTY\", \"WMSERN\", \"WMTRDJ\", \"WMDRQJ\", \"WMUORG\", \"WMTRQT\", \"WMSOCN\", \"WMSOBK\", \"WMCTS1\", \"WMQNTA\", \"WMUM\", \"WMEA\", \"WMRTG\", \"WMMTST\", \"WMDCT\", \"WMSHNO\", \"WMMCU\", \"WMOMCU\", \"WMOBJ\", \"WMSUB\", \"WMCMRV\", \"WMSTRX\", \"WMPARS\", \"WMCOMM\", \"WMURCD\", \"WMURDT\", \"WMURAT\", \"WMURRF\", \"WMURAB\", \"WMUSER\", \"WMPID\", \"WMJOBN\", \"WMUPMJ\", \"WMTDAY\", \"WMVEND\", \"WMPOC\", \"WMCTS4\", \"WMCTS7\", \"WMCTS8\", \"WMGLD\", \"WMSBFL\", \"WMAING\", \"WMSSTQ\", \"WMUOM2\", \"WMAPSC\", \"WMPSN\", \"WMDLEJ\", \"WMCOST\", \"WMCHPP\", \"WMCPNB\", \"WMBSEQAN\", \"DELETED_FLG\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F3111_HUB F3111_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F3111_S01 F3111_S01 ON F3111_HUB.ID = F3111_S01.ID\n    where F3111_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F3111_S01.ID ORDER BY F3111_S01.FD DESC) = 1 \n),\n    source_data as (\n        select\n            sha2_binary(to_variant(array_construct(F3111.\"WMUKID\")), 512) as PARTS_LIST_KEY,  /* cle technique*/\n            F3111.\"WMUKID\" as TRANSACTION_ID,  /*Num Transaction Interne*/\n            F3111.\"WMDOCO\" as OF_ID, /*N\u00b0 OF*/\n            F3111.\"WMDCTO\" as TYPE_OF_CD ,/*OF Type - Code */\n            F3111.\"WMCPIT\" as ITEM_ID, /*Code Interne Composant*/\n            F3111.\"WMCPIL\" as ITEM_CD, /*Code article composant*/\n            F3111.\"WMUM\" as UOM_CD, /*Unit\u00e9 de Mesure - Code*/\n            F3111.\"WMLOCN\" as LOCATION, /*Emplacement*/\n            F3111.\"WMLOTN\" as LOT_NUM, /*Composant - N\u00b0 Lot*/\n            F3111.\"WMTRQT\"/1000 as QTY_AVAILABLE, /*Quantit\u00e9 Consomm\u00e9e*/\n            F3111.\"WMUORG\"/1000 as QTY_ORDER, /*Quantit\u00e9 Pr\u00e9vue*/\n            F3111.\"WMSOCN\"/1000 as QTY_CANCELED, /*Quantit\u00e9 Annul\u00e9e*/\n            F3111.\"WMSOBK\"/1000 as QTY_HELD, /*Quantit\u00e9 Bloqu\u00e9e*/\n            F3111.\"WMQNTA\"/1000 as QTY_COMMITED, /*Quantit\u00e9 R\u00e9serv\u00e9e*/\n            F3111.fd as start_date,  /* Date de debut*/\n            F3111.td as end_date,  /* Date de fin */\n            F3111.fd as effective_from,  /* Date effective */\n            '2023-05-12 09:34:26'::datetime as ldts,  /* Date de chargement*/\n            'JDE' as rscr  /* Donn\u00e9es JDE*/\n        from F3111\n    )\n\nselect\n     PARTS_LIST_KEY\n    ,TRANSACTION_ID\n    ,OF_ID\n    ,TYPE_OF_CD\n    ,ITEM_ID\n    ,ITEM_CD\n    ,UOM_CD\n    ,LOCATION\n    ,LOT_NUM\n    ,QTY_AVAILABLE\n    ,QTY_ORDER\n    ,QTY_CANCELED\n    ,QTY_HELD\n    ,QTY_COMMITED\n    ,start_date\n    ,end_date\n    ,effective_from\n    ,ldts\n    ,rscr\n    ,sha2_binary(to_variant(array_construct(\n     TRANSACTION_ID\n    ,OF_ID\n    ,TYPE_OF_CD\n    ,ITEM_ID\n    ,ITEM_CD\n    ,UOM_CD\n    ,LOCATION\n    ,LOT_NUM\n    ,QTY_AVAILABLE\n    ,QTY_ORDER\n    ,QTY_CANCELED\n    ,QTY_HELD\n    ,QTY_COMMITED)), 512) as hashdiff\nfrom source_data\n)"}]}, "model.dbt_grizzly.dwh_work_order_parts_list_sat": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_REF_PRODUCTION_SCH", "name": "dwh_work_order_parts_list_sat", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\production_sch\\01_business_vault\\dwh_work_order_parts_list_sat.sql", "original_file_path": "models\\20_silver_db\\production_sch\\01_business_vault\\dwh_work_order_parts_list_sat.sql", "unique_id": "model.dbt_grizzly.dwh_work_order_parts_list_sat", "fqn": ["dbt_grizzly", "20_silver_db", "production_sch", "01_business_vault", "dwh_work_order_parts_list_sat"], "alias": "dwh_work_order_parts_list_sat", "checksum": {"name": "sha256", "checksum": "382d1f9082ed9e74ca744834ee1670a694e41ce148508361ca4a81a51e0dbeeb"}, "config": {"enabled": true, "alias": null, "schema": "DWH_REF_PRODUCTION_SCH", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "production", "DataProduct.Name.Production", "business_vault"], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "production", "DataProduct.Name.Production", "business_vault"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["business_vault"], "schema": "DWH_REF_PRODUCTION_SCH", "materialized": "incremental"}, "created_at": 1683884071.9771233, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PRODUCTION_SCH.dwh_work_order_parts_list_sat", "raw_code": "{%- set source_model = \"dwh_work_order_parts_list_tmp\" -%}\r\n{%- set src_pk = \"PARTS_LIST_KEY\" -%}\r\n{%- set src_hashdiff = \"HASHDIFF\" -%}\r\n{%- set src_payload = [\"TRANSACTION_ID\",\"OF_ID\",\"TYPE_OF_CD\",\"ITEM_ID\",\"ITEM_CD\",\"UOM_CD\",\"LOCATION\",\"LOT_NUM\",\"QTY_AVAILABLE\",\"QTY_ORDER\",\"QTY_CANCELED\",\"QTY_HELD\",\"QTY_COMMITED\"] -%}\r\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\r\n{%- set src_ldts = \"LDTS\" -%}\r\n{%- set src_source = \"RSCR\" -%}\r\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                src_payload=src_payload, src_eff=src_eff,\r\n                src_ldts=src_ldts, src_source=src_source,\r\n                source_model=source_model) }}", "language": "sql", "refs": [["dwh_work_order_parts_list_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.sat"], "nodes": ["model.dbt_grizzly.dwh_work_order_parts_list_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\production_sch\\01_business_vault\\dwh_work_order_parts_list_sat.sql", "compiled": true, "compiled_code": "-- Generated by dbtvault.\n\n    \n\nWITH  __dbt__cte__dwh_work_order_parts_list_tmp as (\nwith\n    \nF3111 AS (\n  SELECT \n    F3111_HUB.\"ID\", \"WMUKID\",\n    F3111_S01.\"FD\", \"TD\", \"WMDOCO\", \"WMDCTO\", \"WMSFXO\", \"WMTBM\", \"WMFORQ\", \"WMITC\", \"WMCOBY\", \"WMCOTY\", \"WMCPNT\", \"WMFRMP\", \"WMTHRP\", \"WMFRGD\", \"WMTHGD\", \"WMRKCO\", \"WMRORN\", \"WMRCTO\", \"WMRLLN\", \"WMOPSQ\", \"WMBSEQ\", \"WMRSCP\", \"WMSCRP\", \"WMREWP\", \"WMASIP\", \"WMCPYP\", \"WMSTPP\", \"WMLOVD\", \"WMCPIT\", \"WMCPIL\", \"WMCPIA\", \"WMCMCU\", \"WMDSC1\", \"WMDSC2\", \"WMLOCN\", \"WMLOTN\", \"WMAN8\", \"WMLNTY\", \"WMSERN\", \"WMTRDJ\", \"WMDRQJ\", \"WMUORG\", \"WMTRQT\", \"WMSOCN\", \"WMSOBK\", \"WMCTS1\", \"WMQNTA\", \"WMUM\", \"WMEA\", \"WMRTG\", \"WMMTST\", \"WMDCT\", \"WMSHNO\", \"WMMCU\", \"WMOMCU\", \"WMOBJ\", \"WMSUB\", \"WMCMRV\", \"WMSTRX\", \"WMPARS\", \"WMCOMM\", \"WMURCD\", \"WMURDT\", \"WMURAT\", \"WMURRF\", \"WMURAB\", \"WMUSER\", \"WMPID\", \"WMJOBN\", \"WMUPMJ\", \"WMTDAY\", \"WMVEND\", \"WMPOC\", \"WMCTS4\", \"WMCTS7\", \"WMCTS8\", \"WMGLD\", \"WMSBFL\", \"WMAING\", \"WMSSTQ\", \"WMUOM2\", \"WMAPSC\", \"WMPSN\", \"WMDLEJ\", \"WMCOST\", \"WMCHPP\", \"WMCPNB\", \"WMBSEQAN\", \"DELETED_FLG\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F3111_HUB F3111_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F3111_S01 F3111_S01 ON F3111_HUB.ID = F3111_S01.ID\n    where F3111_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F3111_S01.ID ORDER BY F3111_S01.FD DESC) = 1 \n),\n    source_data as (\n        select\n            sha2_binary(to_variant(array_construct(F3111.\"WMUKID\")), 512) as PARTS_LIST_KEY,  /* cle technique*/\n            F3111.\"WMUKID\" as TRANSACTION_ID,  /*Num Transaction Interne*/\n            F3111.\"WMDOCO\" as OF_ID, /*N\u00b0 OF*/\n            F3111.\"WMDCTO\" as TYPE_OF_CD ,/*OF Type - Code */\n            F3111.\"WMCPIT\" as ITEM_ID, /*Code Interne Composant*/\n            F3111.\"WMCPIL\" as ITEM_CD, /*Code article composant*/\n            F3111.\"WMUM\" as UOM_CD, /*Unit\u00e9 de Mesure - Code*/\n            F3111.\"WMLOCN\" as LOCATION, /*Emplacement*/\n            F3111.\"WMLOTN\" as LOT_NUM, /*Composant - N\u00b0 Lot*/\n            F3111.\"WMTRQT\"/1000 as QTY_AVAILABLE, /*Quantit\u00e9 Consomm\u00e9e*/\n            F3111.\"WMUORG\"/1000 as QTY_ORDER, /*Quantit\u00e9 Pr\u00e9vue*/\n            F3111.\"WMSOCN\"/1000 as QTY_CANCELED, /*Quantit\u00e9 Annul\u00e9e*/\n            F3111.\"WMSOBK\"/1000 as QTY_HELD, /*Quantit\u00e9 Bloqu\u00e9e*/\n            F3111.\"WMQNTA\"/1000 as QTY_COMMITED, /*Quantit\u00e9 R\u00e9serv\u00e9e*/\n            F3111.fd as start_date,  /* Date de debut*/\n            F3111.td as end_date,  /* Date de fin */\n            F3111.fd as effective_from,  /* Date effective */\n            '2023-05-12 09:34:26'::datetime as ldts,  /* Date de chargement*/\n            'JDE' as rscr  /* Donn\u00e9es JDE*/\n        from F3111\n    )\n\nselect\n     PARTS_LIST_KEY\n    ,TRANSACTION_ID\n    ,OF_ID\n    ,TYPE_OF_CD\n    ,ITEM_ID\n    ,ITEM_CD\n    ,UOM_CD\n    ,LOCATION\n    ,LOT_NUM\n    ,QTY_AVAILABLE\n    ,QTY_ORDER\n    ,QTY_CANCELED\n    ,QTY_HELD\n    ,QTY_COMMITED\n    ,start_date\n    ,end_date\n    ,effective_from\n    ,ldts\n    ,rscr\n    ,sha2_binary(to_variant(array_construct(\n     TRANSACTION_ID\n    ,OF_ID\n    ,TYPE_OF_CD\n    ,ITEM_ID\n    ,ITEM_CD\n    ,UOM_CD\n    ,LOCATION\n    ,LOT_NUM\n    ,QTY_AVAILABLE\n    ,QTY_ORDER\n    ,QTY_CANCELED\n    ,QTY_HELD\n    ,QTY_COMMITED)), 512) as hashdiff\nfrom source_data\n),source_data AS (\n    SELECT a.\"PARTS_LIST_KEY\", a.\"HASHDIFF\", a.\"TRANSACTION_ID\", a.\"OF_ID\", a.\"TYPE_OF_CD\", a.\"ITEM_ID\", a.\"ITEM_CD\", a.\"UOM_CD\", a.\"LOCATION\", a.\"LOT_NUM\", a.\"QTY_AVAILABLE\", a.\"QTY_ORDER\", a.\"QTY_CANCELED\", a.\"QTY_HELD\", a.\"QTY_COMMITED\", a.\"EFFECTIVE_FROM\", a.\"LDTS\", a.\"RSCR\"\n    FROM __dbt__cte__dwh_work_order_parts_list_tmp AS a\n    WHERE a.\"PARTS_LIST_KEY\" IS NOT NULL\n),\n\n\n\nlatest_records AS (\n    SELECT a.\"PARTS_LIST_KEY\", a.\"HASHDIFF\", a.\"LDTS\"\n    FROM (\n        SELECT current_records.\"PARTS_LIST_KEY\", current_records.\"HASHDIFF\", current_records.\"LDTS\",\n            RANK() OVER (\n               PARTITION BY current_records.\"PARTS_LIST_KEY\"\n               ORDER BY current_records.\"LDTS\" DESC\n            ) AS rank\n        FROM PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PRODUCTION_SCH.dwh_work_order_parts_list_sat AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.\"PARTS_LIST_KEY\"\n                FROM source_data\n            ) AS source_records\n                ON current_records.\"PARTS_LIST_KEY\" = source_records.\"PARTS_LIST_KEY\"\n    ) AS a\n    WHERE a.rank = 1\n),records_to_insert AS (\n    SELECT DISTINCT stage.\"PARTS_LIST_KEY\", stage.\"HASHDIFF\", stage.\"TRANSACTION_ID\", stage.\"OF_ID\", stage.\"TYPE_OF_CD\", stage.\"ITEM_ID\", stage.\"ITEM_CD\", stage.\"UOM_CD\", stage.\"LOCATION\", stage.\"LOT_NUM\", stage.\"QTY_AVAILABLE\", stage.\"QTY_ORDER\", stage.\"QTY_CANCELED\", stage.\"QTY_HELD\", stage.\"QTY_COMMITED\", stage.\"EFFECTIVE_FROM\", stage.\"LDTS\", stage.\"RSCR\"\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.\"PARTS_LIST_KEY\" = stage.\"PARTS_LIST_KEY\"\n        AND latest_records.\"HASHDIFF\" = stage.\"HASHDIFF\"\n    WHERE latest_records.\"HASHDIFF\" IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_work_order_parts_list_tmp", "sql": " __dbt__cte__dwh_work_order_parts_list_tmp as (\nwith\n    \nF3111 AS (\n  SELECT \n    F3111_HUB.\"ID\", \"WMUKID\",\n    F3111_S01.\"FD\", \"TD\", \"WMDOCO\", \"WMDCTO\", \"WMSFXO\", \"WMTBM\", \"WMFORQ\", \"WMITC\", \"WMCOBY\", \"WMCOTY\", \"WMCPNT\", \"WMFRMP\", \"WMTHRP\", \"WMFRGD\", \"WMTHGD\", \"WMRKCO\", \"WMRORN\", \"WMRCTO\", \"WMRLLN\", \"WMOPSQ\", \"WMBSEQ\", \"WMRSCP\", \"WMSCRP\", \"WMREWP\", \"WMASIP\", \"WMCPYP\", \"WMSTPP\", \"WMLOVD\", \"WMCPIT\", \"WMCPIL\", \"WMCPIA\", \"WMCMCU\", \"WMDSC1\", \"WMDSC2\", \"WMLOCN\", \"WMLOTN\", \"WMAN8\", \"WMLNTY\", \"WMSERN\", \"WMTRDJ\", \"WMDRQJ\", \"WMUORG\", \"WMTRQT\", \"WMSOCN\", \"WMSOBK\", \"WMCTS1\", \"WMQNTA\", \"WMUM\", \"WMEA\", \"WMRTG\", \"WMMTST\", \"WMDCT\", \"WMSHNO\", \"WMMCU\", \"WMOMCU\", \"WMOBJ\", \"WMSUB\", \"WMCMRV\", \"WMSTRX\", \"WMPARS\", \"WMCOMM\", \"WMURCD\", \"WMURDT\", \"WMURAT\", \"WMURRF\", \"WMURAB\", \"WMUSER\", \"WMPID\", \"WMJOBN\", \"WMUPMJ\", \"WMTDAY\", \"WMVEND\", \"WMPOC\", \"WMCTS4\", \"WMCTS7\", \"WMCTS8\", \"WMGLD\", \"WMSBFL\", \"WMAING\", \"WMSSTQ\", \"WMUOM2\", \"WMAPSC\", \"WMPSN\", \"WMDLEJ\", \"WMCOST\", \"WMCHPP\", \"WMCPNB\", \"WMBSEQAN\", \"DELETED_FLG\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F3111_HUB F3111_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F3111_S01 F3111_S01 ON F3111_HUB.ID = F3111_S01.ID\n    where F3111_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F3111_S01.ID ORDER BY F3111_S01.FD DESC) = 1 \n),\n    source_data as (\n        select\n            sha2_binary(to_variant(array_construct(F3111.\"WMUKID\")), 512) as PARTS_LIST_KEY,  /* cle technique*/\n            F3111.\"WMUKID\" as TRANSACTION_ID,  /*Num Transaction Interne*/\n            F3111.\"WMDOCO\" as OF_ID, /*N\u00b0 OF*/\n            F3111.\"WMDCTO\" as TYPE_OF_CD ,/*OF Type - Code */\n            F3111.\"WMCPIT\" as ITEM_ID, /*Code Interne Composant*/\n            F3111.\"WMCPIL\" as ITEM_CD, /*Code article composant*/\n            F3111.\"WMUM\" as UOM_CD, /*Unit\u00e9 de Mesure - Code*/\n            F3111.\"WMLOCN\" as LOCATION, /*Emplacement*/\n            F3111.\"WMLOTN\" as LOT_NUM, /*Composant - N\u00b0 Lot*/\n            F3111.\"WMTRQT\"/1000 as QTY_AVAILABLE, /*Quantit\u00e9 Consomm\u00e9e*/\n            F3111.\"WMUORG\"/1000 as QTY_ORDER, /*Quantit\u00e9 Pr\u00e9vue*/\n            F3111.\"WMSOCN\"/1000 as QTY_CANCELED, /*Quantit\u00e9 Annul\u00e9e*/\n            F3111.\"WMSOBK\"/1000 as QTY_HELD, /*Quantit\u00e9 Bloqu\u00e9e*/\n            F3111.\"WMQNTA\"/1000 as QTY_COMMITED, /*Quantit\u00e9 R\u00e9serv\u00e9e*/\n            F3111.fd as start_date,  /* Date de debut*/\n            F3111.td as end_date,  /* Date de fin */\n            F3111.fd as effective_from,  /* Date effective */\n            '2023-05-12 09:34:26'::datetime as ldts,  /* Date de chargement*/\n            'JDE' as rscr  /* Donn\u00e9es JDE*/\n        from F3111\n    )\n\nselect\n     PARTS_LIST_KEY\n    ,TRANSACTION_ID\n    ,OF_ID\n    ,TYPE_OF_CD\n    ,ITEM_ID\n    ,ITEM_CD\n    ,UOM_CD\n    ,LOCATION\n    ,LOT_NUM\n    ,QTY_AVAILABLE\n    ,QTY_ORDER\n    ,QTY_CANCELED\n    ,QTY_HELD\n    ,QTY_COMMITED\n    ,start_date\n    ,end_date\n    ,effective_from\n    ,ldts\n    ,rscr\n    ,sha2_binary(to_variant(array_construct(\n     TRANSACTION_ID\n    ,OF_ID\n    ,TYPE_OF_CD\n    ,ITEM_ID\n    ,ITEM_CD\n    ,UOM_CD\n    ,LOCATION\n    ,LOT_NUM\n    ,QTY_AVAILABLE\n    ,QTY_ORDER\n    ,QTY_CANCELED\n    ,QTY_HELD\n    ,QTY_COMMITED)), 512) as hashdiff\nfrom source_data\n)"}]}, "model.dbt_grizzly.dwh_work_order_sat": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_REF_PRODUCTION_SCH", "name": "dwh_work_order_sat", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\production_sch\\01_business_vault\\dwh_work_order_sat.sql", "original_file_path": "models\\20_silver_db\\production_sch\\01_business_vault\\dwh_work_order_sat.sql", "unique_id": "model.dbt_grizzly.dwh_work_order_sat", "fqn": ["dbt_grizzly", "20_silver_db", "production_sch", "01_business_vault", "dwh_work_order_sat"], "alias": "dwh_work_order_sat", "checksum": {"name": "sha256", "checksum": "d92d05db2ae3aaf9daa0bc4e846b5a5432ba5e62a6a26c91a80fa97fc12a9cd8"}, "config": {"enabled": true, "alias": null, "schema": "DWH_REF_PRODUCTION_SCH", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "production", "DataProduct.Name.Production", "business_vault"], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "production", "DataProduct.Name.Production", "business_vault"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["business_vault"], "schema": "DWH_REF_PRODUCTION_SCH", "materialized": "incremental"}, "created_at": 1683884072.041576, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PRODUCTION_SCH.dwh_work_order_sat", "raw_code": "{%- set source_model = \"dwh_work_order_tmp\" -%}\r\n{%- set src_pk = \"WORK_ORDER_KEY\" -%}\r\n{%- set src_hashdiff = \"HASHDIFF\" -%}\r\n{%- set src_payload = [\"DOCUMENT_NUM\", \"COMPANY_CD\", \"ITEM_ID\", \"SITE_CD\", \"PRODUCTION_DT\", \"SHIPPED_QTY\",\"ROUTING_TYPE\", \"CODE_TYPE_OF\", \"CODE_ARTICLE\",\"ASKED_DT\",\"ORDER_ST_CD\"] -%}\r\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\r\n{%- set src_ldts = \"LDTS\" -%}\r\n{%- set src_source = \"RSCR\" -%}\r\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                src_payload=src_payload, src_eff=src_eff,\r\n                src_ldts=src_ldts, src_source=src_source,\r\n                source_model=source_model) }}", "language": "sql", "refs": [["dwh_work_order_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.sat"], "nodes": ["model.dbt_grizzly.dwh_work_order_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\production_sch\\01_business_vault\\dwh_work_order_sat.sql", "compiled": true, "compiled_code": "-- Generated by dbtvault.\n\n    \n\nWITH  __dbt__cte__dwh_work_order_tmp as (\nwith\n    \nF4801 AS (\n  SELECT \n    F4801_HUB.\"ID\", \"WADOCO\",\n    F4801_S01.\"FD\", \"TD\", \"WADCTO\", \"WASFXO\", \"WARCTO\", \"WARORN\", \"WALNID\", \"WAPTWO\", \"WAPARS\", \"WATYPS\", \"WAPRTS\", \"WADL01\", \"WASTCM\", \"WACO\", \"WAMCU\", \"WAMMCU\", \"WALOCN\", \"WAAISL\", \"WABIN\", \"WASRST\", \"WADCG\", \"WASUB\", \"WAAN8\", \"WAANO\", \"WAANSA\", \"WAANPA\", \"WAANP\", \"WADPL\", \"WAANT\", \"WANAN8\", \"WATRDJ\", \"WASTRT\", \"WADRQJ\", \"WASTRX\", \"WADAP\", \"WADAT\", \"WAPPDT\", \"WAWR01\", \"WAWR02\", \"WAWR03\", \"WAWR04\", \"WAWR05\", \"WAWR06\", \"WAWR07\", \"WAWR08\", \"WAWR09\", \"WAWR10\", \"WAVR01\", \"WAVR02\", \"WAAMTO\", \"WASETC\", \"WABRT\", \"WAPAYT\", \"WAAMTC\", \"WAHRSO\", \"WAHRSC\", \"WAAMTA\", \"WAHRSA\", \"WAITM\", \"WAAITM\", \"WALITM\", \"WANUMB\", \"WAAPID\", \"WAUORG\", \"WASOBK\", \"WASOCN\", \"WASOQS\", \"WAQTYT\", \"WAUOM\", \"WASHNO\", \"WAPBTM\", \"WATBM\", \"WATRT\", \"WASHTY\", \"WAPEC\", \"WAPPFG\", \"WABM\", \"WARTG\", \"WASPRT\", \"WAUNCD\", \"WAINDC\", \"WARESC\", \"WAMOH\", \"WATDT\", \"WAPOU\", \"WAPC\", \"WALTLV\", \"WALTCM\", \"WACTS1\", \"WALOTN\", \"WALOTP\", \"WALOTG\", \"WARAT1\", \"WARAT2\", \"WADCT\", \"WASBLI\", \"WARKCO\", \"WABREV\", \"WARREV\", \"WADRWC\", \"WARTCH\", \"WAPNRQ\", \"WAREAS\", \"WAPHSE\", \"WAXDSP\", \"WABOMC\", \"WAURCD\", \"WAURDT\", \"WAURAT\", \"WAURAB\", \"WAURRF\", \"WAUSER\", \"WAPID\", \"WAJOBN\", \"WAUPMJ\", \"WATDAY\", \"WAAAID\", \"WANTST\", \"WAXRTO\", \"WAESDN\", \"WAACDN\", \"WASAID\", \"WAMPOS\", \"WAAPRT\", \"WAAMLC\", \"WAAMMC\", \"WAAMOT\", \"WALBAM\", \"WAMTAM\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4801_HUB F4801_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4801_S01 F4801_S01 ON F4801_HUB.ID = F4801_S01.ID\n    where F4801_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4801_S01.ID ORDER BY F4801_S01.FD DESC) = 1 \n),\n    source_data as (\n        select\n            sha2_binary(to_variant(array_construct(f4801.\"WADOCO\",f4801.\"WADCTO\",f4801.\"WACO\")), 512) as work_order_key,  /* cle technique*/\n            f4801.\"WADOCO\" as document_num,  /* Document (Order No Invoice etc.)*/\n            f4801.\"WACO\" as company_cd,  /* Company*/\n            f4801.\"WAITM\" as item_id,  /* Item Number - Short*/\n            f4801.\"WAMMCU\" as site_cd,  /* Branch*/\n            f4801.\"WASTRX\" as production_dt,  /* Date - Completion (Julian)*/\n            f4801.\"WASOQS\" as shipped_qty,  /* Quantity Shipped*/\n            f4801.\"WATRT\" as routing_type,\n            f4801.\"WADCTO\" as CODE_TYPE_OF, /*OF Type - Code*/\n            f4801.\"WALITM\" as CODE_ARTICLE, /*Code Article*/\n            f4801.\"WADRQJ\" as ASKED_DT, /*ASKED_DT*/\n            f4801.\"WASRST\" as ORDER_ST_CD, /*ORDER_ST_CD*/\n            f4801.fd as start_date,  /* Date de debut*/\n            f4801.td as end_date,  /* Date de fin */\n            f4801.fd as effective_from,  /* Date effective */\n            '2023-05-12 09:34:26'::datetime as ldts,  /* Date de chargement*/\n            'JDE' as rscr  /* Donn\u00e9es JDE*/\n        from f4801\n    )\n\nselect\n    work_order_key,\n    document_num,\n    company_cd,\n    item_id,\n    site_cd,\n    production_dt,\n    shipped_qty,\n    routing_type,\n    CODE_TYPE_OF,\n    CODE_ARTICLE,\n    ASKED_DT,\n    ORDER_ST_CD,\n    start_date,\n    end_date,\n    effective_from,\n    ldts,\n    rscr,\n    sha2_binary(to_variant(array_construct(document_num,company_cd,item_id,site_cd,production_dt,shipped_qty,routing_type,CODE_TYPE_OF,CODE_ARTICLE,ASKED_DT,ORDER_ST_CD)), 512) as hashdiff\nfrom source_data\n),source_data AS (\n    SELECT a.\"WORK_ORDER_KEY\", a.\"HASHDIFF\", a.\"DOCUMENT_NUM\", a.\"COMPANY_CD\", a.\"ITEM_ID\", a.\"SITE_CD\", a.\"PRODUCTION_DT\", a.\"SHIPPED_QTY\", a.\"ROUTING_TYPE\", a.\"CODE_TYPE_OF\", a.\"CODE_ARTICLE\", a.\"ASKED_DT\", a.\"ORDER_ST_CD\", a.\"EFFECTIVE_FROM\", a.\"LDTS\", a.\"RSCR\"\n    FROM __dbt__cte__dwh_work_order_tmp AS a\n    WHERE a.\"WORK_ORDER_KEY\" IS NOT NULL\n),\n\n\n\nlatest_records AS (\n    SELECT a.\"WORK_ORDER_KEY\", a.\"HASHDIFF\", a.\"LDTS\"\n    FROM (\n        SELECT current_records.\"WORK_ORDER_KEY\", current_records.\"HASHDIFF\", current_records.\"LDTS\",\n            RANK() OVER (\n               PARTITION BY current_records.\"WORK_ORDER_KEY\"\n               ORDER BY current_records.\"LDTS\" DESC\n            ) AS rank\n        FROM PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PRODUCTION_SCH.dwh_work_order_sat AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.\"WORK_ORDER_KEY\"\n                FROM source_data\n            ) AS source_records\n                ON current_records.\"WORK_ORDER_KEY\" = source_records.\"WORK_ORDER_KEY\"\n    ) AS a\n    WHERE a.rank = 1\n),records_to_insert AS (\n    SELECT DISTINCT stage.\"WORK_ORDER_KEY\", stage.\"HASHDIFF\", stage.\"DOCUMENT_NUM\", stage.\"COMPANY_CD\", stage.\"ITEM_ID\", stage.\"SITE_CD\", stage.\"PRODUCTION_DT\", stage.\"SHIPPED_QTY\", stage.\"ROUTING_TYPE\", stage.\"CODE_TYPE_OF\", stage.\"CODE_ARTICLE\", stage.\"ASKED_DT\", stage.\"ORDER_ST_CD\", stage.\"EFFECTIVE_FROM\", stage.\"LDTS\", stage.\"RSCR\"\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.\"WORK_ORDER_KEY\" = stage.\"WORK_ORDER_KEY\"\n        AND latest_records.\"HASHDIFF\" = stage.\"HASHDIFF\"\n    WHERE latest_records.\"HASHDIFF\" IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_work_order_tmp", "sql": " __dbt__cte__dwh_work_order_tmp as (\nwith\n    \nF4801 AS (\n  SELECT \n    F4801_HUB.\"ID\", \"WADOCO\",\n    F4801_S01.\"FD\", \"TD\", \"WADCTO\", \"WASFXO\", \"WARCTO\", \"WARORN\", \"WALNID\", \"WAPTWO\", \"WAPARS\", \"WATYPS\", \"WAPRTS\", \"WADL01\", \"WASTCM\", \"WACO\", \"WAMCU\", \"WAMMCU\", \"WALOCN\", \"WAAISL\", \"WABIN\", \"WASRST\", \"WADCG\", \"WASUB\", \"WAAN8\", \"WAANO\", \"WAANSA\", \"WAANPA\", \"WAANP\", \"WADPL\", \"WAANT\", \"WANAN8\", \"WATRDJ\", \"WASTRT\", \"WADRQJ\", \"WASTRX\", \"WADAP\", \"WADAT\", \"WAPPDT\", \"WAWR01\", \"WAWR02\", \"WAWR03\", \"WAWR04\", \"WAWR05\", \"WAWR06\", \"WAWR07\", \"WAWR08\", \"WAWR09\", \"WAWR10\", \"WAVR01\", \"WAVR02\", \"WAAMTO\", \"WASETC\", \"WABRT\", \"WAPAYT\", \"WAAMTC\", \"WAHRSO\", \"WAHRSC\", \"WAAMTA\", \"WAHRSA\", \"WAITM\", \"WAAITM\", \"WALITM\", \"WANUMB\", \"WAAPID\", \"WAUORG\", \"WASOBK\", \"WASOCN\", \"WASOQS\", \"WAQTYT\", \"WAUOM\", \"WASHNO\", \"WAPBTM\", \"WATBM\", \"WATRT\", \"WASHTY\", \"WAPEC\", \"WAPPFG\", \"WABM\", \"WARTG\", \"WASPRT\", \"WAUNCD\", \"WAINDC\", \"WARESC\", \"WAMOH\", \"WATDT\", \"WAPOU\", \"WAPC\", \"WALTLV\", \"WALTCM\", \"WACTS1\", \"WALOTN\", \"WALOTP\", \"WALOTG\", \"WARAT1\", \"WARAT2\", \"WADCT\", \"WASBLI\", \"WARKCO\", \"WABREV\", \"WARREV\", \"WADRWC\", \"WARTCH\", \"WAPNRQ\", \"WAREAS\", \"WAPHSE\", \"WAXDSP\", \"WABOMC\", \"WAURCD\", \"WAURDT\", \"WAURAT\", \"WAURAB\", \"WAURRF\", \"WAUSER\", \"WAPID\", \"WAJOBN\", \"WAUPMJ\", \"WATDAY\", \"WAAAID\", \"WANTST\", \"WAXRTO\", \"WAESDN\", \"WAACDN\", \"WASAID\", \"WAMPOS\", \"WAAPRT\", \"WAAMLC\", \"WAAMMC\", \"WAAMOT\", \"WALBAM\", \"WAMTAM\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4801_HUB F4801_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4801_S01 F4801_S01 ON F4801_HUB.ID = F4801_S01.ID\n    where F4801_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4801_S01.ID ORDER BY F4801_S01.FD DESC) = 1 \n),\n    source_data as (\n        select\n            sha2_binary(to_variant(array_construct(f4801.\"WADOCO\",f4801.\"WADCTO\",f4801.\"WACO\")), 512) as work_order_key,  /* cle technique*/\n            f4801.\"WADOCO\" as document_num,  /* Document (Order No Invoice etc.)*/\n            f4801.\"WACO\" as company_cd,  /* Company*/\n            f4801.\"WAITM\" as item_id,  /* Item Number - Short*/\n            f4801.\"WAMMCU\" as site_cd,  /* Branch*/\n            f4801.\"WASTRX\" as production_dt,  /* Date - Completion (Julian)*/\n            f4801.\"WASOQS\" as shipped_qty,  /* Quantity Shipped*/\n            f4801.\"WATRT\" as routing_type,\n            f4801.\"WADCTO\" as CODE_TYPE_OF, /*OF Type - Code*/\n            f4801.\"WALITM\" as CODE_ARTICLE, /*Code Article*/\n            f4801.\"WADRQJ\" as ASKED_DT, /*ASKED_DT*/\n            f4801.\"WASRST\" as ORDER_ST_CD, /*ORDER_ST_CD*/\n            f4801.fd as start_date,  /* Date de debut*/\n            f4801.td as end_date,  /* Date de fin */\n            f4801.fd as effective_from,  /* Date effective */\n            '2023-05-12 09:34:26'::datetime as ldts,  /* Date de chargement*/\n            'JDE' as rscr  /* Donn\u00e9es JDE*/\n        from f4801\n    )\n\nselect\n    work_order_key,\n    document_num,\n    company_cd,\n    item_id,\n    site_cd,\n    production_dt,\n    shipped_qty,\n    routing_type,\n    CODE_TYPE_OF,\n    CODE_ARTICLE,\n    ASKED_DT,\n    ORDER_ST_CD,\n    start_date,\n    end_date,\n    effective_from,\n    ldts,\n    rscr,\n    sha2_binary(to_variant(array_construct(document_num,company_cd,item_id,site_cd,production_dt,shipped_qty,routing_type,CODE_TYPE_OF,CODE_ARTICLE,ASKED_DT,ORDER_ST_CD)), 512) as hashdiff\nfrom source_data\n)"}]}, "model.dbt_grizzly.dwh_ddo_parent_company_tmp": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_REF_COMPANY_SCH", "name": "dwh_ddo_parent_company_tmp", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\ref_company_sch\\00_stage\\dwh_ddo_parent_company_tmp.sql", "original_file_path": "models\\20_silver_db\\ref_company_sch\\00_stage\\dwh_ddo_parent_company_tmp.sql", "unique_id": "model.dbt_grizzly.dwh_ddo_parent_company_tmp", "fqn": ["dbt_grizzly", "20_silver_db", "ref_company_sch", "00_stage", "dwh_ddo_parent_company_tmp"], "alias": "dwh_ddo_parent_company_tmp", "checksum": {"name": "sha256", "checksum": "7672ecc2c24cbe01c638a58ac03c686c01ec7adc52702b54b6ea254d29378cbf"}, "config": {"enabled": true, "alias": null, "schema": "DWH_REF_COMPANY_SCH", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "ref_company", "stage"], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "ref_company", "stage"], "description": "Filter AD_P_PARAM table on PARAM_CLASS_CD = 'LSV_SOCIETE_MERE'", "columns": {"PARENT_COMPANY_KEY": {"name": "PARENT_COMPANY_KEY", "description": "Cl\u00e9 primaire hash\u00e9e", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARENT_COMPANY_CD": {"name": "PARENT_COMPANY_CD", "description": "Parent Company Code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARENT_COMPANY_NAME": {"name": "PARENT_COMPANY_NAME", "description": "Parent Company Name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EFFECTIVE_FROM": {"name": "EFFECTIVE_FROM", "description": "Date d'effectivit\u00e9", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LDTS": {"name": "LDTS", "description": "Date de chargement", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RSCR": {"name": "RSCR", "description": "Nom de la source", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HASHDIFF": {"name": "HASHDIFF", "description": "Champ de hashage", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\20_silver_db\\ref_company_sch\\00_stage\\dwh_ddo_parent_company_tmp.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["stage"], "schema": "DWH_REF_COMPANY_SCH", "materialized": "ephemeral"}, "created_at": 1683884072.9523408, "relation_name": null, "raw_code": "with\r\nsource_data as \r\n(    \r\n    select\r\n    sha2_binary(to_variant(array_construct(OBJ_CD)),512) as PARENT_COMPANY_KEY,\r\n    OBJ_CD as PARENT_COMPANY_CD,\r\n    OBJ_NAME as PARENT_COMPANY_NAME,\r\n    VLD_START_DT as EFFECTIVE_FROM,\r\n    '{{ var(\"start_datetime\")}}'::DATETIME as LDTS, \r\n    'AD_P_PARAM' as RSCR\r\n    from {{source('PARAMETERS','AD_P_PARAM') }}\r\n    where PARAM_CLASS_CD = 'LSV_SOCIETE_MERE'\r\n)\r\n\r\nselect \r\n    PARENT_COMPANY_KEY, PARENT_COMPANY_CD, PARENT_COMPANY_NAME, EFFECTIVE_FROM, LDTS, RSCR,\r\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PARENT_COMPANY_KEY, PARENT_COMPANY_CD, PARENT_COMPANY_NAME)),512) as HASHDIFF\r\nfrom source_data", "language": "sql", "refs": [], "sources": [["PARAMETERS", "AD_P_PARAM"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_grizzly.PARAMETERS.AD_P_PARAM"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\ref_company_sch\\00_stage\\dwh_ddo_parent_company_tmp.sql", "compiled": true, "compiled_code": "with\nsource_data as \n(    \n    select\n    sha2_binary(to_variant(array_construct(OBJ_CD)),512) as PARENT_COMPANY_KEY,\n    OBJ_CD as PARENT_COMPANY_CD,\n    OBJ_NAME as PARENT_COMPANY_NAME,\n    VLD_START_DT as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'AD_P_PARAM' as RSCR\n    from PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM\n    where PARAM_CLASS_CD = 'LSV_SOCIETE_MERE'\n)\n\nselect \n    PARENT_COMPANY_KEY, PARENT_COMPANY_CD, PARENT_COMPANY_NAME, EFFECTIVE_FROM, LDTS, RSCR,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PARENT_COMPANY_KEY, PARENT_COMPANY_CD, PARENT_COMPANY_NAME)),512) as HASHDIFF\nfrom source_data", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbt_grizzly.dwh_ddo_parent_company_hub": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_REF_COMPANY_SCH", "name": "dwh_ddo_parent_company_hub", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\ref_company_sch\\01_business_vault\\dwh_ddo_parent_company_hub.sql", "original_file_path": "models\\20_silver_db\\ref_company_sch\\01_business_vault\\dwh_ddo_parent_company_hub.sql", "unique_id": "model.dbt_grizzly.dwh_ddo_parent_company_hub", "fqn": ["dbt_grizzly", "20_silver_db", "ref_company_sch", "01_business_vault", "dwh_ddo_parent_company_hub"], "alias": "dwh_ddo_parent_company_hub", "checksum": {"name": "sha256", "checksum": "c144f9897036ff807418a36a0491635df91ba2c124f403bf1e0290caa093dd84"}, "config": {"enabled": true, "alias": null, "schema": "DWH_REF_COMPANY_SCH", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "ref_company", "business_vault"], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "ref_company", "business_vault"], "description": "Hub table of the item bottling silver entity", "columns": {"PARENT_COMPANY_KEY": {"name": "PARENT_COMPANY_KEY", "description": "Cl\u00e9 primaire hash\u00e9e", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARENT_COMPANY_CD": {"name": "PARENT_COMPANY_CD", "description": "Parent Company Code", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\20_silver_db\\ref_company_sch\\01_business_vault\\dwh_ddo_parent_company_hub.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["business_vault"], "schema": "DWH_REF_COMPANY_SCH", "materialized": "incremental"}, "created_at": 1683884072.954595, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_COMPANY_SCH.dwh_ddo_parent_company_hub", "raw_code": "{%- set source_model = \"dwh_ddo_parent_company_tmp\" -%}\r\n{%- set src_pk = \"PARENT_COMPANY_KEY\" -%}\r\n{%- set src_nk = [\"PARENT_COMPANY_CD\"] -%}\r\n{%- set src_ldts = \"LDTS\" -%}\r\n{%- set src_source = \"RSCR\" -%}\r\n\r\n{{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\r\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["dwh_ddo_parent_company_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.hub"], "nodes": ["model.dbt_grizzly.dwh_ddo_parent_company_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\ref_company_sch\\01_business_vault\\dwh_ddo_parent_company_hub.sql", "compiled": true, "compiled_code": "-- Generated by dbtvault.\n\nWITH  __dbt__cte__dwh_ddo_parent_company_tmp as (\nwith\nsource_data as \n(    \n    select\n    sha2_binary(to_variant(array_construct(OBJ_CD)),512) as PARENT_COMPANY_KEY,\n    OBJ_CD as PARENT_COMPANY_CD,\n    OBJ_NAME as PARENT_COMPANY_NAME,\n    VLD_START_DT as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'AD_P_PARAM' as RSCR\n    from PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM\n    where PARAM_CLASS_CD = 'LSV_SOCIETE_MERE'\n)\n\nselect \n    PARENT_COMPANY_KEY, PARENT_COMPANY_CD, PARENT_COMPANY_NAME, EFFECTIVE_FROM, LDTS, RSCR,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PARENT_COMPANY_KEY, PARENT_COMPANY_CD, PARENT_COMPANY_NAME)),512) as HASHDIFF\nfrom source_data\n),row_rank_1 AS (\n    SELECT rr.\"PARENT_COMPANY_KEY\", rr.\"PARENT_COMPANY_CD\", rr.\"LDTS\", rr.\"RSCR\",\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.\"PARENT_COMPANY_KEY\"\n               ORDER BY rr.\"LDTS\"\n           ) AS row_number\n    FROM __dbt__cte__dwh_ddo_parent_company_tmp AS rr\n    WHERE rr.\"PARENT_COMPANY_KEY\" IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.\"PARENT_COMPANY_KEY\", a.\"PARENT_COMPANY_CD\", a.\"LDTS\", a.\"RSCR\"\n    FROM row_rank_1 AS a\n    LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_COMPANY_SCH.dwh_ddo_parent_company_hub AS d\n    ON a.\"PARENT_COMPANY_KEY\" = d.\"PARENT_COMPANY_KEY\"\n    WHERE d.\"PARENT_COMPANY_KEY\" IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_ddo_parent_company_tmp", "sql": " __dbt__cte__dwh_ddo_parent_company_tmp as (\nwith\nsource_data as \n(    \n    select\n    sha2_binary(to_variant(array_construct(OBJ_CD)),512) as PARENT_COMPANY_KEY,\n    OBJ_CD as PARENT_COMPANY_CD,\n    OBJ_NAME as PARENT_COMPANY_NAME,\n    VLD_START_DT as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'AD_P_PARAM' as RSCR\n    from PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM\n    where PARAM_CLASS_CD = 'LSV_SOCIETE_MERE'\n)\n\nselect \n    PARENT_COMPANY_KEY, PARENT_COMPANY_CD, PARENT_COMPANY_NAME, EFFECTIVE_FROM, LDTS, RSCR,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PARENT_COMPANY_KEY, PARENT_COMPANY_CD, PARENT_COMPANY_NAME)),512) as HASHDIFF\nfrom source_data\n)"}]}, "model.dbt_grizzly.dwh_ddo_parent_company_sat": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_REF_COMPANY_SCH", "name": "dwh_ddo_parent_company_sat", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\ref_company_sch\\01_business_vault\\dwh_ddo_parent_company_sat.sql", "original_file_path": "models\\20_silver_db\\ref_company_sch\\01_business_vault\\dwh_ddo_parent_company_sat.sql", "unique_id": "model.dbt_grizzly.dwh_ddo_parent_company_sat", "fqn": ["dbt_grizzly", "20_silver_db", "ref_company_sch", "01_business_vault", "dwh_ddo_parent_company_sat"], "alias": "dwh_ddo_parent_company_sat", "checksum": {"name": "sha256", "checksum": "ad73e2de10aa9d2ee02cf4ef051422dd6c5bc4f280786360f0df4360702bd1f4"}, "config": {"enabled": true, "alias": null, "schema": "DWH_REF_COMPANY_SCH", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "ref_company", "business_vault"], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "ref_company", "business_vault"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["business_vault"], "schema": "DWH_REF_COMPANY_SCH", "materialized": "incremental"}, "created_at": 1683884072.1514513, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_COMPANY_SCH.dwh_ddo_parent_company_sat", "raw_code": "{%- set source_model = \"dwh_ddo_parent_company_tmp\" -%}\r\n{%- set src_pk = \"PARENT_COMPANY_KEY\" -%}\r\n{%- set src_hashdiff = \"HASHDIFF\" -%}\r\n{%- set src_payload = [\"PARENT_COMPANY_CD\",\"PARENT_COMPANY_NAME\"] -%}\r\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\r\n{%- set src_ldts = \"LDTS\" -%}\r\n{%- set src_source = \"RSCR\" -%}\r\n\r\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                src_payload=src_payload, src_eff=src_eff,\r\n                src_ldts=src_ldts, src_source=src_source,\r\n                source_model=source_model) }}", "language": "sql", "refs": [["dwh_ddo_parent_company_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.sat"], "nodes": ["model.dbt_grizzly.dwh_ddo_parent_company_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\ref_company_sch\\01_business_vault\\dwh_ddo_parent_company_sat.sql", "compiled": true, "compiled_code": "-- Generated by dbtvault.\n\n    \n\nWITH  __dbt__cte__dwh_ddo_parent_company_tmp as (\nwith\nsource_data as \n(    \n    select\n    sha2_binary(to_variant(array_construct(OBJ_CD)),512) as PARENT_COMPANY_KEY,\n    OBJ_CD as PARENT_COMPANY_CD,\n    OBJ_NAME as PARENT_COMPANY_NAME,\n    VLD_START_DT as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'AD_P_PARAM' as RSCR\n    from PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM\n    where PARAM_CLASS_CD = 'LSV_SOCIETE_MERE'\n)\n\nselect \n    PARENT_COMPANY_KEY, PARENT_COMPANY_CD, PARENT_COMPANY_NAME, EFFECTIVE_FROM, LDTS, RSCR,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PARENT_COMPANY_KEY, PARENT_COMPANY_CD, PARENT_COMPANY_NAME)),512) as HASHDIFF\nfrom source_data\n),source_data AS (\n    SELECT a.\"PARENT_COMPANY_KEY\", a.\"HASHDIFF\", a.\"PARENT_COMPANY_CD\", a.\"PARENT_COMPANY_NAME\", a.\"EFFECTIVE_FROM\", a.\"LDTS\", a.\"RSCR\"\n    FROM __dbt__cte__dwh_ddo_parent_company_tmp AS a\n    WHERE a.\"PARENT_COMPANY_KEY\" IS NOT NULL\n),\n\n\n\nlatest_records AS (\n    SELECT a.\"PARENT_COMPANY_KEY\", a.\"HASHDIFF\", a.\"LDTS\"\n    FROM (\n        SELECT current_records.\"PARENT_COMPANY_KEY\", current_records.\"HASHDIFF\", current_records.\"LDTS\",\n            RANK() OVER (\n               PARTITION BY current_records.\"PARENT_COMPANY_KEY\"\n               ORDER BY current_records.\"LDTS\" DESC\n            ) AS rank\n        FROM PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_COMPANY_SCH.dwh_ddo_parent_company_sat AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.\"PARENT_COMPANY_KEY\"\n                FROM source_data\n            ) AS source_records\n                ON current_records.\"PARENT_COMPANY_KEY\" = source_records.\"PARENT_COMPANY_KEY\"\n    ) AS a\n    WHERE a.rank = 1\n),records_to_insert AS (\n    SELECT DISTINCT stage.\"PARENT_COMPANY_KEY\", stage.\"HASHDIFF\", stage.\"PARENT_COMPANY_CD\", stage.\"PARENT_COMPANY_NAME\", stage.\"EFFECTIVE_FROM\", stage.\"LDTS\", stage.\"RSCR\"\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.\"PARENT_COMPANY_KEY\" = stage.\"PARENT_COMPANY_KEY\"\n        AND latest_records.\"HASHDIFF\" = stage.\"HASHDIFF\"\n    WHERE latest_records.\"HASHDIFF\" IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_ddo_parent_company_tmp", "sql": " __dbt__cte__dwh_ddo_parent_company_tmp as (\nwith\nsource_data as \n(    \n    select\n    sha2_binary(to_variant(array_construct(OBJ_CD)),512) as PARENT_COMPANY_KEY,\n    OBJ_CD as PARENT_COMPANY_CD,\n    OBJ_NAME as PARENT_COMPANY_NAME,\n    VLD_START_DT as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'AD_P_PARAM' as RSCR\n    from PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM\n    where PARAM_CLASS_CD = 'LSV_SOCIETE_MERE'\n)\n\nselect \n    PARENT_COMPANY_KEY, PARENT_COMPANY_CD, PARENT_COMPANY_NAME, EFFECTIVE_FROM, LDTS, RSCR,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PARENT_COMPANY_KEY, PARENT_COMPANY_CD, PARENT_COMPANY_NAME)),512) as HASHDIFF\nfrom source_data\n)"}]}, "model.dbt_grizzly.ddo_parent_company": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_REF_COMPANY_SCH", "name": "ddo_parent_company", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\ref_company_sch\\02_3NF\\ddo_parent_company.sql", "original_file_path": "models\\20_silver_db\\ref_company_sch\\02_3NF\\ddo_parent_company.sql", "unique_id": "model.dbt_grizzly.ddo_parent_company", "fqn": ["dbt_grizzly", "20_silver_db", "ref_company_sch", "02_3NF", "ddo_parent_company"], "alias": "ddo_parent_company", "checksum": {"name": "sha256", "checksum": "5da5df1b567b0d24f3301a2907b305a1f04b7861347b79fcc91c812f50507371"}, "config": {"enabled": true, "alias": null, "schema": "DWH_REF_COMPANY_SCH", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "ref_company", "3NF"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "ref_company", "3NF"], "description": "Merge data from silver PARENT_COMPANY tables hub and sat", "columns": {"PARENT_COMPANY_CD": {"name": "PARENT_COMPANY_CD", "description": "Parent Company Code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARENT_COMPANY_NAME": {"name": "PARENT_COMPANY_NAME", "description": "Parent Company Name", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\20_silver_db\\ref_company_sch\\02_3NF\\ddo_parent_company.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["3NF"], "schema": "DWH_REF_COMPANY_SCH", "materialized": "view"}, "created_at": 1683884072.9729788, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_COMPANY_SCH.ddo_parent_company", "raw_code": "{%- set src_hub = \"dwh_ddo_parent_company_hub\" -%}\r\n{%- set src_sat = \"dwh_ddo_parent_company_sat\" -%}\r\n{%- set src_pk = \"PARENT_COMPANY_KEY\" -%}\r\n{%- set src_ldts = \"LDTS\" -%}\r\n{%- set src_payload = [\"PARENT_COMPANY_CD\",\"PARENT_COMPANY_NAME\"] -%}\r\n\r\n{{ create_3NF(src_hub=ref(src_hub),\r\n              src_sat=ref(src_sat),\r\n              src_pk=src_pk,\r\n              src_ldts=src_ldts,\r\n              src_payload=src_payload) }}", "language": "sql", "refs": [["dwh_ddo_parent_company_hub"], ["dwh_ddo_parent_company_sat"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_grizzly.create_3NF"], "nodes": ["model.dbt_grizzly.dwh_ddo_parent_company_hub", "model.dbt_grizzly.dwh_ddo_parent_company_sat"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\ref_company_sch\\02_3NF\\ddo_parent_company.sql", "compiled": true, "compiled_code": "with source_data_init as (\n    select distinct sat.\"PARENT_COMPANY_CD\", sat.\"PARENT_COMPANY_NAME\"\n    from PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_COMPANY_SCH.dwh_ddo_parent_company_hub hub\n    inner join PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_COMPANY_SCH.dwh_ddo_parent_company_sat sat on hub.PARENT_COMPANY_KEY = sat.PARENT_COMPANY_KEY\n    qualify row_number() over (partition by sat.PARENT_COMPANY_KEY order by sat.LDTS desc) = 1\n)\nselect \"PARENT_COMPANY_CD\", \"PARENT_COMPANY_NAME\"\nfrom source_data_init\n\n\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbt_grizzly.purchase_order": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_REF_PURCHASE_SCH", "name": "purchase_order", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\ref_purchase_sch\\00_3NF\\purchase_order.sql", "original_file_path": "models\\20_silver_db\\ref_purchase_sch\\00_3NF\\purchase_order.sql", "unique_id": "model.dbt_grizzly.purchase_order", "fqn": ["dbt_grizzly", "20_silver_db", "ref_purchase_sch", "00_3NF", "purchase_order"], "alias": "purchase_order", "checksum": {"name": "sha256", "checksum": "0db559eb651a37797137526607af23abc36a97be7b634bc032b950f5ffc6e94f"}, "config": {"enabled": true, "alias": null, "schema": "DWH_REF_PURCHASE_SCH", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "ref_purchase", "DataProduct.Name.Purchase", "3NF"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "ref_purchase", "DataProduct.Name.Purchase", "3NF"], "description": "Merge data from silver PURCHASE_ORDER tables hub and sat", "columns": {"TIME_ID": {"name": "TIME_ID", "description": "Identifiant Temps", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEM_ID": {"name": "ITEM_ID", "description": "Identifiant Article", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_ID": {"name": "SUPPLIER_ID", "description": "Fournisseur ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_CD": {"name": "SITE_CD", "description": "Site", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_NUM": {"name": "PO_NUM", "description": "Num\u00e9ro de commande", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_LINE_NUM": {"name": "PO_LINE_NUM", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_TYPE_CD": {"name": "PO_TYPE_CD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_DELIVERY_INIT_DT": {"name": "PO_DELIVERY_INIT_DT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_DELIVERY_REVIEW_DT": {"name": "PO_DELIVERY_REVIEW_DT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_QTY_INIT_PUOM": {"name": "PO_QTY_INIT_PUOM", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_QTY_REVIEW_PUOM": {"name": "PO_QTY_REVIEW_PUOM", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_DELIVERED_QTY_PUOM": {"name": "PO_DELIVERED_QTY_PUOM", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_DELIVERED_QTY_LT": {"name": "PO_DELIVERED_QTY_LT", "description": "Quantit\u00e9 command\u00e9e en LT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_DELIVERED_QTY_BT": {"name": "PO_DELIVERED_QTY_BT", "description": "Quantit\u00e9 command\u00e9e en BT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_DELIVERED_QTY_CA": {"name": "PO_DELIVERED_QTY_CA", "description": "Quantit\u00e9 command\u00e9e en CA", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_DELIVERED_QTY_PL": {"name": "PO_DELIVERED_QTY_PL", "description": "Quantit\u00e9 command\u00e9e en PL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_FLG": {"name": "PO_FLG", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_DELIVERED_FLG": {"name": "PO_DELIVERED_FLG", "description": "Commande r\u00e9ceptionn\u00e9e", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_DELIVERED_ON_TIME_FLG": {"name": "PO_DELIVERED_ON_TIME_FLG", "description": "Commande  r\u00e9ceptionn\u00e9e ONTIME", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_DELIVERED_IN_FULL_FLG": {"name": "PO_DELIVERED_IN_FULL_FLG", "description": "Commande r\u00e9ceptionn\u00e9e IN FULL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_DELIVERED_OTIF_FLG": {"name": "PO_DELIVERED_OTIF_FLG", "description": "Commande R\u00e9ceptionn\u00e9e OTIF", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PO_CANCELED_FLG --Commande Annul\u00e9e": {"name": "PO_CANCELED_FLG --Commande Annul\u00e9e", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\20_silver_db\\ref_purchase_sch\\00_3NF\\purchase_order.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["3NF"], "schema": "DWH_REF_PURCHASE_SCH", "materialized": "view"}, "created_at": 1683884072.9913094, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PURCHASE_SCH.purchase_order", "raw_code": "with PURCHASE_ORDER_DETAIL as\r\n(\r\n    select\r\n    {{ dbt_utils.star(source('PURCHASE','PURCHASE_ORDER_DETAIL_SAT'), relation_alias = 'sat') | replace(\"\\n \", \"\") }},\r\n    sha2_binary(to_variant(array_construct(sat.ITEM_ID, sat.ITEM_CD)),512) as ITEM_KEY\r\n    from {{ source('PURCHASE','PURCHASE_ORDER_DETAIL_HUB') }} hub\r\n    inner join {{ source('PURCHASE','PURCHASE_ORDER_DETAIL_SAT') }} sat on hub.PO_DETAIL_KEY = sat.PO_DETAIL_KEY\r\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY sat.PO_DETAIL_KEY ORDER BY sat.LDTS DESC) = 1\r\n),\r\nITEM_COEFF_MEASURE_UNIT as \r\n(\r\n    select\r\n    {{ dbt_utils.star(source('ITEM','ITEM_COEFF_MEASURE_UNIT_SAT'), relation_alias = 'sat') | replace(\"\\n \", \"\") }}\r\n    from {{ source('ITEM','ITEM_COEFF_MEASURE_UNIT_HUB') }} hub\r\n    inner join {{ source('ITEM','ITEM_COEFF_MEASURE_UNIT_SAT') }}  sat on hub.ITEM_KEY = sat.ITEM_KEY\r\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY sat.ITEM_KEY ORDER BY sat.LDTS DESC) = 1\r\n),\r\nCALENDAR as \r\n(\r\n    select sat.dt_ddmmyyyy, LAG(sat.dt_ddmmyyyy,5) OVER (ORDER BY sat.dt_ddmmyyyy) as dt_ddmmyyyy_lag_5_open_day\r\n    from {{ source('PARAMETERS','CALENDAR_HUB') }} hub\r\n    inner join {{ source('PARAMETERS','CALENDAR_SAT') }} sat on hub.CALENDAR_KEY = sat.CALENDAR_KEY\r\n    where day_open_flg = 0\r\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY sat.CALENDAR_KEY ORDER BY sat.LDTS DESC) = 1\r\n)\r\n\r\nselect\r\nIFF(DELIVERED_QTY_PUOM > 0 and TRIM(LAST_STATUS_CD) <> '980', RECEIPT_DT, REQ_DELIVERY_INIT_DT) as TIME_ID, --Identifiant Temps\r\nPOD.ITEM_ID, --Identifiant Article\r\nPOD.SUPPLIER_ID, --Fournisseur ID\r\nCOST_CENTER_CD as SITE_CD, --Site\r\nPOD.ORDER_CD as PO_NUM, --Num\u00e9ro de commande\r\nPOD.ORDER_LINE_NUM as PO_LINE_NUM,\r\nPOD.ORDER_TYPE_CD as PO_TYPE_CD,\r\nREQ_DELIVERY_INIT_DT as PO_DELIVERY_INIT_DT,\r\nREQ_DELIVERY_REVIEW_DT as PO_DELIVERY_REVIEW_DT,\r\nORDER_QTY_INIT_PUOM as PO_QTY_INIT_PUOM,\r\nORDER_QTY_REVIEW_PUOM as PO_QTY_REVIEW_PUOM,\r\nIFF(DELIVERED_QTY_PUOM > 0 and TRIM(LAST_STATUS_CD) <> '980', DELIVERED_QTY_PUOM, 0) as PO_DELIVERED_QTY_PUOM,\r\nIFF(PO_DELIVERED_QTY_PUOM > 0 and ICMUH.ITEM_KEY is not null, DELIVERED_QTY_PUOM * CNV_COEFF_LT, 0) as PO_DELIVERED_QTY_LT, --Quantit\u00e9 command\u00e9e en LT\r\nIFF(PO_DELIVERED_QTY_PUOM > 0 and ICMUH.ITEM_KEY is not null, DELIVERED_QTY_PUOM * CNV_COEFF_BT, 0) as PO_DELIVERED_QTY_BT, --Quantit\u00e9 command\u00e9e en BT\r\nIFF(PO_DELIVERED_QTY_PUOM > 0 and ICMUH.ITEM_KEY is not null, DELIVERED_QTY_PUOM * CNV_COEFF_CA, 0) as PO_DELIVERED_QTY_CA, --Quantit\u00e9 command\u00e9e en CA\r\nIFF(PO_DELIVERED_QTY_PUOM > 0 and ICMUH.ITEM_KEY is not null, DELIVERED_QTY_PUOM * CNV_COEFF_PL, 0) as PO_DELIVERED_QTY_PL, --Quantit\u00e9 command\u00e9e en PL\r\n1 as PO_FLG,\r\nIFF(DELIVERED_QTY_PUOM > 0 and TRIM(LAST_STATUS_CD) <> '980', 1, 0) as PO_DELIVERED_FLG, --Commande r\u00e9ceptionn\u00e9e\r\nIFF(DELIVERED_QTY_PUOM > 0 and TRIM(LAST_STATUS_CD) <> '980' and REQ_DELIVERY_INIT_DT >= C.dt_ddmmyyyy_lag_5_open_day, 1, 0) as PO_DELIVERED_ON_TIME_FLG,--Commande  r\u00e9ceptionn\u00e9e ONTIME\r\nIFF(DELIVERED_QTY_PUOM > 0 and TRIM(LAST_STATUS_CD) <> '980' and DELIVERED_QTY_PUOM = ORDER_QTY_INIT_PUOM, 1, 0) as PO_DELIVERED_IN_FULL_FLG, --Commande r\u00e9ceptionn\u00e9e IN FULL\r\nIFF(DELIVERED_QTY_PUOM > 0 and TRIM(LAST_STATUS_CD) <> '980' and REQ_DELIVERY_INIT_DT >= C.dt_ddmmyyyy_lag_5_open_day and DELIVERED_QTY_PUOM = ORDER_QTY_INIT_PUOM, 1, 0) as PO_DELIVERED_OTIF_FLG, --Commande R\u00e9ceptionn\u00e9e OTIF\r\nIFF(TRIM(LAST_STATUS_CD) = '980', 1, 0) as PO_CANCELED_FLG --Commande Annul\u00e9e\r\n\r\nfrom PURCHASE_ORDER_DETAIL POD\r\nleft outer join ITEM_COEFF_MEASURE_UNIT ICMUH on ICMUH.ITEM_KEY = POD.ITEM_KEY\r\nleft outer join CALENDAR C on C.dt_ddmmyyyy = POD.RECEIPT_DT", "language": "sql", "refs": [], "sources": [["PURCHASE", "PURCHASE_ORDER_DETAIL_SAT"], ["PURCHASE", "PURCHASE_ORDER_DETAIL_HUB"], ["PURCHASE", "PURCHASE_ORDER_DETAIL_SAT"], ["ITEM", "ITEM_COEFF_MEASURE_UNIT_SAT"], ["ITEM", "ITEM_COEFF_MEASURE_UNIT_HUB"], ["ITEM", "ITEM_COEFF_MEASURE_UNIT_SAT"], ["PARAMETERS", "CALENDAR_HUB"], ["PARAMETERS", "CALENDAR_SAT"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["source.dbt_grizzly.PURCHASE.PURCHASE_ORDER_DETAIL_SAT", "source.dbt_grizzly.PURCHASE.PURCHASE_ORDER_DETAIL_HUB", "source.dbt_grizzly.PURCHASE.PURCHASE_ORDER_DETAIL_SAT", "source.dbt_grizzly.ITEM.ITEM_COEFF_MEASURE_UNIT_SAT", "source.dbt_grizzly.ITEM.ITEM_COEFF_MEASURE_UNIT_HUB", "source.dbt_grizzly.ITEM.ITEM_COEFF_MEASURE_UNIT_SAT", "source.dbt_grizzly.PARAMETERS.CALENDAR_HUB", "source.dbt_grizzly.PARAMETERS.CALENDAR_SAT"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\ref_purchase_sch\\00_3NF\\purchase_order.sql", "compiled": true, "compiled_code": "with PURCHASE_ORDER_DETAIL as\n(\n    select\n    sat.\"PO_DETAIL_KEY\", sat.\"HASHDIFF\", sat.\"ORDER_CD\", sat.\"ORDER_TYPE_CD\", sat.\"ORDER_COMPANY_CD\", sat.\"ORDER_SUFFIX_CD\", sat.\"ORDER_LINE_NUM\", sat.\"ITEM_CD\", sat.\"ORDER_AUTHOR_CD\", sat.\"COST_CENTER_CD\", sat.\"ACCOUNT_COST_CD\", sat.\"TAXABLE_PURCHASE_CD\", sat.\"PAYMENT_CONDITION_CD\", sat.\"LAST_STATUS_CD\", sat.\"DEVICE_CD\", sat.\"LOCATION_CD\", sat.\"SUPPLIER_ID\", sat.\"ACCOUNT_ID_CD\", sat.\"IMMO_CD\", sat.\"INCOTERMS_CD\", sat.\"ITEM_ID\", sat.\"MOTIF_CD\", sat.\"NUMBER_BUYER_CD\", sat.\"ACCOUNT_NUM_CD\", sat.\"ACCOUNT_OBJECT_CD\", sat.\"APPROVAL_PATH_CD\", sat.\"PROJECT_CD\", sat.\"DELIVERY_REFERENCE_CD\", sat.\"ORDER_ORIGIN_CD\", sat.\"SUB_ACCOUNT_CD\", sat.\"STATUS_NEXT_CD\", sat.\"TAXES_CD\", sat.\"ORDER_ORIGIN_TYPE_CD\", sat.\"ORDER_LINE_TYPE_CD\", sat.\"TAXE_TYPE_CD\", sat.\"UNIT_MEASURE_PURCHASE_CD\", sat.\"ITEM_MEASURE_UNIT_CD\", sat.\"ORDER_CANCELLATION_DT\", sat.\"ORDER_DT\", sat.\"ACCOUNTING_GB_DT\", sat.\"REQUESTED_DELIVERY_DT\", sat.\"EFFECTIVE_DELIVERY_DT\", sat.\"PROMISED_DELIVERY_DT\", sat.\"DESC_INCOTERMS\", sat.\"DESC_ORDER_TYPE\", sat.\"DESCRIPTION_REASON\", sat.\"ITEM_DESCRIPTION_1\", sat.\"ITEM_DESCRIPTION_2\", sat.\"DOC_ORIGIN\", sat.\"ORDER_AMOUNT\", sat.\"ORDER_LINE_AMOUNT\", sat.\"AMOUNT_NOT_RECEIVED\", sat.\"AMOUNT_PURCHASE_PRICE\", sat.\"AMOUNT_RECEIVED\", sat.\"ORDER_LINE_NUM_ORIGIN\", sat.\"NUM_OF\", sat.\"QTY_ORDERED\", sat.\"QTY_NOT_RECEIVED\", sat.\"DELEVERY_QTY\", sat.\"RATE_DEVICE\", sat.\"USER_CD\", sat.\"RECEIPT_DT\", sat.\"PUOM_CD\", sat.\"ORDER_QTY_INIT_PUOM\", sat.\"TRANSIT_START_DT\", sat.\"TRANSIT_END_DT\", sat.\"ORDER_FLOW_TYPE_CD\", sat.\"REQ_DELIVERY_INIT_DT\", sat.\"ORDERED_QTY_INIT\", sat.\"DELIVERED_QTY_PUOM\", sat.\"ORDER_QTY_REVIEW_PUOM\", sat.\"ORDER_QTY_REVIEW\", sat.\"REQ_DELIVERY_REVIEW_DT\", sat.\"TIME_OF_THE_DAY\", sat.\"EFFECTIVE_FROM\", sat.\"LDTS\", sat.\"RSCR\",\n    sha2_binary(to_variant(array_construct(sat.ITEM_ID, sat.ITEM_CD)),512) as ITEM_KEY\n    from PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PURCHASE_SCH.DWH_PURCHASE_ORDER_DETAIL_HUB hub\n    inner join PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PURCHASE_SCH.DWH_PURCHASE_ORDER_DETAIL_SAT sat on hub.PO_DETAIL_KEY = sat.PO_DETAIL_KEY\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY sat.PO_DETAIL_KEY ORDER BY sat.LDTS DESC) = 1\n),\nITEM_COEFF_MEASURE_UNIT as \n(\n    select\n    sat.\"ITEM_KEY\", sat.\"HASHDIFF\", sat.\"ITEM_ID\", sat.\"ITEM_CD\", sat.\"MEASURE_UNIT_CD\", sat.\"CNV_COEFF_BT\", sat.\"CNV_COEFF_LT\", sat.\"CNV_COEFF_UR\", sat.\"CNV_COEFF_PL\", sat.\"CNV_COEFF_CO\", sat.\"CNV_COEFF_CA\", sat.\"CNV_COEFF_KG\", sat.\"CNV_COEFF_BQ\", sat.\"CNV_COEFF_PK\", sat.\"CNV_COEFF_CS\", sat.\"CNV_COEFF_DE\", sat.\"CNV_COEFF_BO\", sat.\"CNV_COEFF_PB\", sat.\"CNV_COEFF_9L\", sat.\"CNV_COEFF_L1\", sat.\"CNV_COEFF_EB\", sat.\"CNV_COEFF_PN\", sat.\"CNV_COEFF_M3\", sat.\"CNV_COEFF_UN\", sat.\"CNV_COEFF_PQ\", sat.\"CNV_COEFF_UC\", sat.\"CNV_COEFF_C1\", sat.\"CNV_COEFF_C2\", sat.\"CNV_COEFF_C3\", sat.\"CNV_COEFF_HP\", sat.\"CNV_COEFF_CN\", sat.\"START_DATE\", sat.\"END_DATE\", sat.\"EFFECTIVE_FROM\", sat.\"LDTS\", sat.\"RSCR\"\n    from PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_ITEM_SCH.DWH_ITEM_COEFF_MEASURE_UNIT_HUB hub\n    inner join PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_ITEM_SCH.DWH_ITEM_COEFF_MEASURE_UNIT_SAT  sat on hub.ITEM_KEY = sat.ITEM_KEY\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY sat.ITEM_KEY ORDER BY sat.LDTS DESC) = 1\n),\nCALENDAR as \n(\n    select sat.dt_ddmmyyyy, LAG(sat.dt_ddmmyyyy,5) OVER (ORDER BY sat.dt_ddmmyyyy) as dt_ddmmyyyy_lag_5_open_day\n    from PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB hub\n    inner join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_SAT sat on hub.CALENDAR_KEY = sat.CALENDAR_KEY\n    where day_open_flg = 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY sat.CALENDAR_KEY ORDER BY sat.LDTS DESC) = 1\n)\n\nselect\nIFF(DELIVERED_QTY_PUOM > 0 and TRIM(LAST_STATUS_CD) <> '980', RECEIPT_DT, REQ_DELIVERY_INIT_DT) as TIME_ID, --Identifiant Temps\nPOD.ITEM_ID, --Identifiant Article\nPOD.SUPPLIER_ID, --Fournisseur ID\nCOST_CENTER_CD as SITE_CD, --Site\nPOD.ORDER_CD as PO_NUM, --Num\u00e9ro de commande\nPOD.ORDER_LINE_NUM as PO_LINE_NUM,\nPOD.ORDER_TYPE_CD as PO_TYPE_CD,\nREQ_DELIVERY_INIT_DT as PO_DELIVERY_INIT_DT,\nREQ_DELIVERY_REVIEW_DT as PO_DELIVERY_REVIEW_DT,\nORDER_QTY_INIT_PUOM as PO_QTY_INIT_PUOM,\nORDER_QTY_REVIEW_PUOM as PO_QTY_REVIEW_PUOM,\nIFF(DELIVERED_QTY_PUOM > 0 and TRIM(LAST_STATUS_CD) <> '980', DELIVERED_QTY_PUOM, 0) as PO_DELIVERED_QTY_PUOM,\nIFF(PO_DELIVERED_QTY_PUOM > 0 and ICMUH.ITEM_KEY is not null, DELIVERED_QTY_PUOM * CNV_COEFF_LT, 0) as PO_DELIVERED_QTY_LT, --Quantit\u00e9 command\u00e9e en LT\nIFF(PO_DELIVERED_QTY_PUOM > 0 and ICMUH.ITEM_KEY is not null, DELIVERED_QTY_PUOM * CNV_COEFF_BT, 0) as PO_DELIVERED_QTY_BT, --Quantit\u00e9 command\u00e9e en BT\nIFF(PO_DELIVERED_QTY_PUOM > 0 and ICMUH.ITEM_KEY is not null, DELIVERED_QTY_PUOM * CNV_COEFF_CA, 0) as PO_DELIVERED_QTY_CA, --Quantit\u00e9 command\u00e9e en CA\nIFF(PO_DELIVERED_QTY_PUOM > 0 and ICMUH.ITEM_KEY is not null, DELIVERED_QTY_PUOM * CNV_COEFF_PL, 0) as PO_DELIVERED_QTY_PL, --Quantit\u00e9 command\u00e9e en PL\n1 as PO_FLG,\nIFF(DELIVERED_QTY_PUOM > 0 and TRIM(LAST_STATUS_CD) <> '980', 1, 0) as PO_DELIVERED_FLG, --Commande r\u00e9ceptionn\u00e9e\nIFF(DELIVERED_QTY_PUOM > 0 and TRIM(LAST_STATUS_CD) <> '980' and REQ_DELIVERY_INIT_DT >= C.dt_ddmmyyyy_lag_5_open_day, 1, 0) as PO_DELIVERED_ON_TIME_FLG,--Commande  r\u00e9ceptionn\u00e9e ONTIME\nIFF(DELIVERED_QTY_PUOM > 0 and TRIM(LAST_STATUS_CD) <> '980' and DELIVERED_QTY_PUOM = ORDER_QTY_INIT_PUOM, 1, 0) as PO_DELIVERED_IN_FULL_FLG, --Commande r\u00e9ceptionn\u00e9e IN FULL\nIFF(DELIVERED_QTY_PUOM > 0 and TRIM(LAST_STATUS_CD) <> '980' and REQ_DELIVERY_INIT_DT >= C.dt_ddmmyyyy_lag_5_open_day and DELIVERED_QTY_PUOM = ORDER_QTY_INIT_PUOM, 1, 0) as PO_DELIVERED_OTIF_FLG, --Commande R\u00e9ceptionn\u00e9e OTIF\nIFF(TRIM(LAST_STATUS_CD) = '980', 1, 0) as PO_CANCELED_FLG --Commande Annul\u00e9e\n\nfrom PURCHASE_ORDER_DETAIL POD\nleft outer join ITEM_COEFF_MEASURE_UNIT ICMUH on ICMUH.ITEM_KEY = POD.ITEM_KEY\nleft outer join CALENDAR C on C.dt_ddmmyyyy = POD.RECEIPT_DT", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbt_grizzly.dwh_site_tmp": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_SITE_SCH", "name": "dwh_site_tmp", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\site_sch\\00_stage\\dwh_site_tmp.sql", "original_file_path": "models\\20_silver_db\\site_sch\\00_stage\\dwh_site_tmp.sql", "unique_id": "model.dbt_grizzly.dwh_site_tmp", "fqn": ["dbt_grizzly", "20_silver_db", "site_sch", "00_stage", "dwh_site_tmp"], "alias": "dwh_site_tmp", "checksum": {"name": "sha256", "checksum": "445eda473c474fca60201a82323c5e6d2d29c83cae9309800ea6165d936f68b9"}, "config": {"enabled": true, "alias": null, "schema": "DWH_SITE_SCH", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.Site", "stage"], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.Site", "stage"], "description": "Merge data from bronze JDE tables hub and sat", "columns": {"SITE_KEY": {"name": "SITE_KEY", "description": "Primary key hashed from the SITE_CD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPANY_KEY": {"name": "COMPANY_KEY", "description": "Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_KEY": {"name": "CUSTOMER_KEY", "description": "Cl\u00e9 hash\u00e9e des utilisateurs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_COMPANY_LINK_KEY": {"name": "SITE_COMPANY_LINK_KEY", "description": "Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_CUSTOMER_LINK_KEY": {"name": "SITE_CUSTOMER_LINK_KEY", "description": "Cl\u00e9 hash\u00e9e des utilisateurs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_CD": {"name": "SITE_CD", "description": "Magasin - Code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_NAME": {"name": "SITE_NAME", "description": "Libell\u00e9 du site", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYP_REF": {"name": "TYP_REF", "description": "Typologie du Referentiel tracabilit\u00e9", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_TYPE_CD": {"name": "SITE_TYPE_CD", "description": "Code du type de site", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_TYPE_NAME": {"name": "SITE_TYPE_NAME", "description": "Libell\u00e9 du type de site", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_PRF_CD": {"name": "SITE_PRF_CD", "description": "Code du site PRF", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_PRF_NAME": {"name": "SITE_PRF_NAME", "description": "Libell\u00e9 du site PRF", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DER_FLG": {"name": "DER_FLG", "description": "Flag indiquant que nous sommes sur une DER", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_GUARDSHIP_CD": {"name": "SITE_GUARDSHIP_CD", "description": "Code du site de rattachement (DER)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_GUARDSHIP_NAME": {"name": "SITE_GUARDSHIP_NAME", "description": "Libell\u00e9 du site de rattachement (DER)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CAPACITY_PROPRE_NBR_PL": {"name": "CAPACITY_PROPRE_NBR_PL", "description": "Capacit\u00e9 en nombre de palette pour les produits propres", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CAPACITY_NEGOCE_NBR_PL": {"name": "CAPACITY_NEGOCE_NBR_PL", "description": "Capacit\u00e9 en nombre de palette pour les produits de negoce", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CAPACITY_NBR_PL": {"name": "CAPACITY_NBR_PL", "description": "Capacit\u00e9 en nombre de palette", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EFFECTIVE_FROM": {"name": "EFFECTIVE_FROM", "description": "Date effective", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LDTS": {"name": "LDTS", "description": "Date de chargement", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RSCR": {"name": "RSCR", "description": "Donnees JDE", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HASHDIFF": {"name": "HASHDIFF", "description": "Champ de hashage", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\20_silver_db\\site_sch\\00_stage\\dwh_site_tmp.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["stage"], "schema": "DWH_SITE_SCH", "materialized": "ephemeral"}, "created_at": 1683884073.0073838, "relation_name": null, "raw_code": "WITH\r\n    {{cte_table_generator('F0006')}},\r\n    {{cte_table_generator('F0005')}},\r\n    {{cte_table_generator('F0101')}},\r\n\r\nsite_type as (\r\n    --select aban8, abat1,abalph,mcrp05,mcrp07,mcmcu from\r\n    select TRIM(F0006.MCMCU) as MCMCU,\r\n    CASE WHEN TRIM(F0006.MCMCU) = TRIM(F0006.MCRP05) THEN 'DER'\r\n         WHEN F0006.MCRP07 = 'SU' THEN 'SU'\r\n         WHEN F0006.MCRP07 = 'A' THEN 'ACH'\r\n         WHEN F0006.MCRP07 = 'ST' THEN 'ST'\r\n         WHEN F0101.ABAT1 = 'ST' THEN 'ST'\r\n         WHEN F0101.ABAT1 = 'KT' THEN 'DISP'\r\n         WHEN F0101.ABAT1 = 'D' THEN 'DL'\r\n         WHEN F0101.ABAT1 = 'AD' THEN 'DF'\r\n    END as SITE_TYPE_CD --Code du type de site\r\n    from F0101\r\n    inner join F0006 on F0101.ABAN8 = F0006.MCAN8\r\n    where F0101.abat1 in ('D','AD','ST','KT')\r\n),\r\n\r\nsource_data as (\r\n  select\r\n    sha2_binary(to_variant(array_construct(TRIM(F0006.MCMCU))),512) as SITE_KEY, --cle technique\r\n    sha2_binary(to_variant(array_construct(F0006.MCCO)),512) as COMPANY_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\r\n    sha2_binary(to_variant(array_construct(F0006.MCAN8)),512) AS CUSTOMER_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\r\n    sha2_binary(to_variant(array_construct(SITE_KEY,COMPANY_KEY)),512) as SITE_COMPANY_LINK_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\r\n    sha2_binary(to_variant(array_construct(SITE_KEY,CUSTOMER_KEY)),512) AS SITE_CUSTOMER_LINK_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\r\n    TRIM(F0006.MCMCU)  as SITE_CD, --Magasin - Code\r\n    F0006.MCDL01 as SITE_NAME, --Libell\u00e9 du site\r\n    IFF(AD_P_PARAM.PARAM_CLASS_CD = 'LSV_TYPE_SITE', F0101_TIER.ABAT1 , NULL) as TYP_REF, --Typologie du Referentiel tracabilit\u00e9\r\n    site_type.SITE_TYPE_CD as SITE_TYPE_CD, --Code du type de site*/\r\n    AD_P_PARAM.OBJ_NAME as SITE_TYPE_NAME, --Libell\u00e9 du type de site\r\n    AD_P_PARAM.OBJ_CPLT_1 as SITE_PRF_CD,  --Code du site PRF\r\n    AD_P_PARAM.OBJ_CPLT_2 as SITE_PRF_NAME,  --Libell\u00e9 du site PRF\r\n    IFF(SITE_TYPE.SITE_TYPE_CD = 'DER', 1 , 0) as DER_FLG, --Flag indiquant que nous sommes sur une DER\r\n    F0006.MCCO as COMPANY_ID,\r\n    --company_hub.COMPANY_CD as COMPANY_ID, --Identifiant technique de la soci\u00e9t\u00e9\r\n    --case when TRIM(F0101_0.ABAT1) in ('D','AD') then F0006.MCAN8 else NULL end  as PARTY_ID, --Identifiant technique du tiers\r\n    F0006.MCRP05 as SITE_GUARDSHIP_CD, --Code du site de rattachement (DER)\r\n    F0005_SITE_GUARDSHIP_NAME.DRDL01 as SITE_GUARDSHIP_NAME, --Libell\u00e9 du site de rattachement (DER)\r\n    F0005_CAPACITY_PROPRE_NBR_PL.DRDL01 as CAPACITY_PROPRE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits propres\r\n    F0005_CAPACITY_NEGOCE_NBR_PL.DRDL01 as CAPACITY_NEGOCE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits de negoce\r\n    F0005_CAPACITY_NBR_PL.DRDL01 as CAPACITY_NBR_PL, --Capacit\u00e9 en nombre de palette\r\n    F0006.FD as EFFECTIVE_FROM, -- Date effective  \r\n    '{{var(\"start_datetime\")}}'::DATETIME as LDTS, -- Date de chargement\r\n    'JDE' as RSCR -- Donnees JDE\r\n  from F0006\r\n\r\n  inner join SITE_TYPE on TRIM(SITE_TYPE.MCMCU) = TRIM(F0006.MCMCU)\r\n  LEFT JOIN {{source('PARAMETERS','AD_P_PARAM')}} AD_P_PARAM ON TRIM(AD_P_PARAM.OBJ_CD) = TRIM(SITE_TYPE.SITE_TYPE_CD) AND PARAM_CLASS_CD = 'LSV_TYPE_SITE'\r\n\r\n  LEFT JOIN (select distinct ABMCU from F0101 where ABAT1 in ('ST','KT','D','AD')) F0101 ON TRIM(F0101.ABMCU)=TRIM(F0006.MCMCU)\r\n  LEFT JOIN F0101 F0101_TIER ON F0101_TIER.ABAN8 = TRIM(F0006.MCAN8)\r\n  LEFT JOIN F0005 F0005_SITE_GUARDSHIP_NAME ON TRIM(F0005_SITE_GUARDSHIP_NAME.DRKY) = F0006.MCRP05 AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRSY) = '00' AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRRT) = '05' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\r\n  LEFT JOIN F0005 F0005_CAPACITY_PROPRE_NBR_PL ON TRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRKY) = F0006.MCRP02 AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRRT) = '02' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\r\n  LEFT JOIN F0005 F0005_CAPACITY_NEGOCE_NBR_PL ON TRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRKY) = F0006.MCRP03 AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRRT) = '03' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\r\n  LEFT JOIN F0005 F0005_CAPACITY_NBR_PL ON TRIM(F0005_CAPACITY_NBR_PL.DRKY) = F0006.MCRP04 AND RTRIM(F0005_CAPACITY_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NBR_PL.DRRT) = '04' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\r\n)\r\nselect\r\nSITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG,COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL, EFFECTIVE_FROM, LDTS, RSCR,\r\nsha2_binary(to_variant(ARRAY_CONSTRUCT(SITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG, COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL)),512) as HASHDIFF\r\nfrom source_data", "language": "sql", "refs": [], "sources": [["RAW_JDE", "F0006_HUB"], ["RAW_JDE", "F0006_S01"], ["RAW_JDE", "F0006_HUB"], ["RAW_JDE", "F0006_S01"], ["RAW_JDE", "F0005_HUB"], ["RAW_JDE", "F0005_S01"], ["RAW_JDE", "F0005_HUB"], ["RAW_JDE", "F0005_S01"], ["RAW_JDE", "F0101_HUB"], ["RAW_JDE", "F0101_S01"], ["RAW_JDE", "F0101_HUB"], ["RAW_JDE", "F0101_S01"], ["PARAMETERS", "AD_P_PARAM"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_grizzly.cte_table_generator"], "nodes": ["source.dbt_grizzly.RAW_JDE.F0006_HUB", "source.dbt_grizzly.RAW_JDE.F0006_S01", "source.dbt_grizzly.RAW_JDE.F0006_HUB", "source.dbt_grizzly.RAW_JDE.F0006_S01", "source.dbt_grizzly.RAW_JDE.F0005_HUB", "source.dbt_grizzly.RAW_JDE.F0005_S01", "source.dbt_grizzly.RAW_JDE.F0005_HUB", "source.dbt_grizzly.RAW_JDE.F0005_S01", "source.dbt_grizzly.RAW_JDE.F0101_HUB", "source.dbt_grizzly.RAW_JDE.F0101_S01", "source.dbt_grizzly.RAW_JDE.F0101_HUB", "source.dbt_grizzly.RAW_JDE.F0101_S01", "source.dbt_grizzly.PARAMETERS.AD_P_PARAM"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\site_sch\\00_stage\\dwh_site_tmp.sql", "compiled": true, "compiled_code": "WITH\n    \nF0006 AS (\n  SELECT \n    F0006_HUB.\"ID\", \"MCMCU\",\n    F0006_S01.\"FD\", \"TD\", \"MCSTYL\", \"MCDC\", \"MCLDM\", \"MCCO\", \"MCAN8\", \"MCAN8O\", \"MCCNTY\", \"MCADDS\", \"MCFMOD\", \"MCDL01\", \"MCDL02\", \"MCDL03\", \"MCDL04\", \"MCRP01\", \"MCRP02\", \"MCRP03\", \"MCRP04\", \"MCRP05\", \"MCRP06\", \"MCRP07\", \"MCRP08\", \"MCRP09\", \"MCRP10\", \"MCRP11\", \"MCRP12\", \"MCRP13\", \"MCRP14\", \"MCRP15\", \"MCRP16\", \"MCRP17\", \"MCRP18\", \"MCRP19\", \"MCRP20\", \"MCRP21\", \"MCRP22\", \"MCRP23\", \"MCRP24\", \"MCRP25\", \"MCRP26\", \"MCRP27\", \"MCRP28\", \"MCRP29\", \"MCRP30\", \"MCTA\", \"MCTXJS\", \"MCTXA1\", \"MCEXR1\", \"MCTC01\", \"MCTC02\", \"MCTC03\", \"MCTC04\", \"MCTC05\", \"MCTC06\", \"MCTC07\", \"MCTC08\", \"MCTC09\", \"MCTC10\", \"MCND01\", \"MCND02\", \"MCND03\", \"MCND04\", \"MCND05\", \"MCND06\", \"MCND07\", \"MCND08\", \"MCND09\", \"MCND10\", \"MCCC01\", \"MCCC02\", \"MCCC03\", \"MCCC04\", \"MCCC05\", \"MCCC06\", \"MCCC07\", \"MCCC08\", \"MCCC09\", \"MCCC10\", \"MCPECC\", \"MCALS\", \"MCISS\", \"MCGLBA\", \"MCALCL\", \"MCLMTH\", \"MCLF\", \"MCOBJ1\", \"MCOBJ2\", \"MCOBJ3\", \"MCSUB1\", \"MCTOU\", \"MCSBLI\", \"MCANPA\", \"MCCT\", \"MCCERT\", \"MCMCUS\", \"MCBTYP\", \"MCPC\", \"MCPCA\", \"MCPCC\", \"MCINTA\", \"MCINTL\", \"MCD1J\", \"MCD2J\", \"MCD3J\", \"MCD4J\", \"MCD5J\", \"MCD6J\", \"MCFPDJ\", \"MCCAC\", \"MCPAC\", \"MCEEO\", \"MCERC\", \"MCUSER\", \"MCPID\", \"MCUPMJ\", \"MCJOBN\", \"MCUPMT\", \"MCBPTP\", \"MCAPSB\", \"MCTSBU\", \"MCRP31\", \"MCRP32\", \"MCRP33\", \"MCRP34\", \"MCRP35\", \"MCRP36\", \"MCRP37\", \"MCRP38\", \"MCRP39\", \"MCRP40\", \"MCRP41\", \"MCRP42\", \"MCRP43\", \"MCRP44\", \"MCRP45\", \"MCRP46\", \"MCRP47\", \"MCRP48\", \"MCRP49\", \"MCRP50\", \"MCAN8GCA1\", \"MCAN8GCA2\", \"MCAN8GCA3\", \"MCAN8GCA4\", \"MCAN8GCA5\", \"MCRMCU1\", \"MCDOCO\", \"MCPCTN\", \"MCCLNU\", \"MCBUCA\", \"MCADJENT\", \"MCUAFL\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_HUB F0006_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_S01 F0006_S01 ON F0006_HUB.ID = F0006_S01.ID\n    where F0006_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0006_S01.ID ORDER BY F0006_S01.FD DESC) = 1 \n),\n    \nF0005 AS (\n  SELECT \n    F0005_HUB.\"ID\", \"DRSY\", \"DRRT\", \"DRKY\",\n    F0005_S01.\"FD\", \"TD\", \"DRDL01\", \"DRDL02\", \"DRSPHD\", \"DRUDCO\", \"DRHRDC\", \"DRUSER\", \"DRPID\", \"DRUPMJ\", \"DRJOBN\", \"DRUPMT\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_HUB F0005_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_S01 F0005_S01 ON F0005_HUB.ID = F0005_S01.ID\n    where F0005_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0005_S01.ID ORDER BY F0005_S01.FD DESC) = 1 \n),\n    \nF0101 AS (\n  SELECT \n    F0101_HUB.\"ID\", \"ABAN8\",\n    F0101_S01.\"FD\", \"TD\", \"ABALKY\", \"ABTAX\", \"ABALPH\", \"ABDC\", \"ABMCU\", \"ABSIC\", \"ABLNGP\", \"ABAT1\", \"ABCM\", \"ABTAXC\", \"ABAT2\", \"ABAT3\", \"ABAT4\", \"ABAT5\", \"ABATP\", \"ABATR\", \"ABATPR\", \"ABAB3\", \"ABATE\", \"ABSBLI\", \"ABEFTB\", \"ABAN81\", \"ABAN82\", \"ABAN83\", \"ABAN84\", \"ABAN86\", \"ABAN85\", \"ABAC01\", \"ABAC02\", \"ABAC03\", \"ABAC04\", \"ABAC05\", \"ABAC06\", \"ABAC07\", \"ABAC08\", \"ABAC09\", \"ABAC10\", \"ABAC11\", \"ABAC12\", \"ABAC13\", \"ABAC14\", \"ABAC15\", \"ABAC16\", \"ABAC17\", \"ABAC18\", \"ABAC19\", \"ABAC20\", \"ABAC21\", \"ABAC22\", \"ABAC23\", \"ABAC24\", \"ABAC25\", \"ABAC26\", \"ABAC27\", \"ABAC28\", \"ABAC29\", \"ABAC30\", \"ABGLBA\", \"ABPTI\", \"ABPDI\", \"ABMSGA\", \"ABRMK\", \"ABTXCT\", \"ABTX2\", \"ABALP1\", \"ABURCD\", \"ABURDT\", \"ABURAT\", \"ABURAB\", \"ABURRF\", \"ABUSER\", \"ABPID\", \"ABUPMJ\", \"ABJOBN\", \"ABUPMT\", \"ABPRGF\", \"ABSCCLTP\", \"ABTICKER\", \"ABEXCHG\", \"ABDUNS\", \"ABCLASS01\", \"ABCLASS02\", \"ABCLASS03\", \"ABCLASS04\", \"ABCLASS05\", \"ABNOE\", \"ABGROWTHR\", \"ABYEARSTAR\", \"ABAEMPGP\", \"ABACTIN\", \"ABREVRNG\", \"ABSYNCS\", \"ABPERRS\", \"ABCAAD\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_HUB F0101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_S01 F0101_S01 ON F0101_HUB.ID = F0101_S01.ID\n    where F0101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0101_S01.ID ORDER BY F0101_S01.FD DESC) = 1 \n),\n\nsite_type as (\n    --select aban8, abat1,abalph,mcrp05,mcrp07,mcmcu from\n    select TRIM(F0006.MCMCU) as MCMCU,\n    CASE WHEN TRIM(F0006.MCMCU) = TRIM(F0006.MCRP05) THEN 'DER'\n         WHEN F0006.MCRP07 = 'SU' THEN 'SU'\n         WHEN F0006.MCRP07 = 'A' THEN 'ACH'\n         WHEN F0006.MCRP07 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'KT' THEN 'DISP'\n         WHEN F0101.ABAT1 = 'D' THEN 'DL'\n         WHEN F0101.ABAT1 = 'AD' THEN 'DF'\n    END as SITE_TYPE_CD --Code du type de site\n    from F0101\n    inner join F0006 on F0101.ABAN8 = F0006.MCAN8\n    where F0101.abat1 in ('D','AD','ST','KT')\n),\n\nsource_data as (\n  select\n    sha2_binary(to_variant(array_construct(TRIM(F0006.MCMCU))),512) as SITE_KEY, --cle technique\n    sha2_binary(to_variant(array_construct(F0006.MCCO)),512) as COMPANY_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(F0006.MCAN8)),512) AS CUSTOMER_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    sha2_binary(to_variant(array_construct(SITE_KEY,COMPANY_KEY)),512) as SITE_COMPANY_LINK_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(SITE_KEY,CUSTOMER_KEY)),512) AS SITE_CUSTOMER_LINK_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    TRIM(F0006.MCMCU)  as SITE_CD, --Magasin - Code\n    F0006.MCDL01 as SITE_NAME, --Libell\u00e9 du site\n    IFF(AD_P_PARAM.PARAM_CLASS_CD = 'LSV_TYPE_SITE', F0101_TIER.ABAT1 , NULL) as TYP_REF, --Typologie du Referentiel tracabilit\u00e9\n    site_type.SITE_TYPE_CD as SITE_TYPE_CD, --Code du type de site*/\n    AD_P_PARAM.OBJ_NAME as SITE_TYPE_NAME, --Libell\u00e9 du type de site\n    AD_P_PARAM.OBJ_CPLT_1 as SITE_PRF_CD,  --Code du site PRF\n    AD_P_PARAM.OBJ_CPLT_2 as SITE_PRF_NAME,  --Libell\u00e9 du site PRF\n    IFF(SITE_TYPE.SITE_TYPE_CD = 'DER', 1 , 0) as DER_FLG, --Flag indiquant que nous sommes sur une DER\n    F0006.MCCO as COMPANY_ID,\n    --company_hub.COMPANY_CD as COMPANY_ID, --Identifiant technique de la soci\u00e9t\u00e9\n    --case when TRIM(F0101_0.ABAT1) in ('D','AD') then F0006.MCAN8 else NULL end  as PARTY_ID, --Identifiant technique du tiers\n    F0006.MCRP05 as SITE_GUARDSHIP_CD, --Code du site de rattachement (DER)\n    F0005_SITE_GUARDSHIP_NAME.DRDL01 as SITE_GUARDSHIP_NAME, --Libell\u00e9 du site de rattachement (DER)\n    F0005_CAPACITY_PROPRE_NBR_PL.DRDL01 as CAPACITY_PROPRE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits propres\n    F0005_CAPACITY_NEGOCE_NBR_PL.DRDL01 as CAPACITY_NEGOCE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits de negoce\n    F0005_CAPACITY_NBR_PL.DRDL01 as CAPACITY_NBR_PL, --Capacit\u00e9 en nombre de palette\n    F0006.FD as EFFECTIVE_FROM, -- Date effective  \n    '2023-05-12 09:34:26'::DATETIME as LDTS, -- Date de chargement\n    'JDE' as RSCR -- Donnees JDE\n  from F0006\n\n  inner join SITE_TYPE on TRIM(SITE_TYPE.MCMCU) = TRIM(F0006.MCMCU)\n  LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM AD_P_PARAM ON TRIM(AD_P_PARAM.OBJ_CD) = TRIM(SITE_TYPE.SITE_TYPE_CD) AND PARAM_CLASS_CD = 'LSV_TYPE_SITE'\n\n  LEFT JOIN (select distinct ABMCU from F0101 where ABAT1 in ('ST','KT','D','AD')) F0101 ON TRIM(F0101.ABMCU)=TRIM(F0006.MCMCU)\n  LEFT JOIN F0101 F0101_TIER ON F0101_TIER.ABAN8 = TRIM(F0006.MCAN8)\n  LEFT JOIN F0005 F0005_SITE_GUARDSHIP_NAME ON TRIM(F0005_SITE_GUARDSHIP_NAME.DRKY) = F0006.MCRP05 AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRSY) = '00' AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRRT) = '05' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_PROPRE_NBR_PL ON TRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRKY) = F0006.MCRP02 AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRRT) = '02' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NEGOCE_NBR_PL ON TRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRKY) = F0006.MCRP03 AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRRT) = '03' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NBR_PL ON TRIM(F0005_CAPACITY_NBR_PL.DRKY) = F0006.MCRP04 AND RTRIM(F0005_CAPACITY_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NBR_PL.DRRT) = '04' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n)\nselect\nSITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG,COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL, EFFECTIVE_FROM, LDTS, RSCR,\nsha2_binary(to_variant(ARRAY_CONSTRUCT(SITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG, COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL)),512) as HASHDIFF\nfrom source_data", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbt_grizzly.dwh_site_company_link": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_SITE_SCH", "name": "dwh_site_company_link", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\site_sch\\01_business_vault\\dwh_site_company_link.sql", "original_file_path": "models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_company_link.sql", "unique_id": "model.dbt_grizzly.dwh_site_company_link", "fqn": ["dbt_grizzly", "20_silver_db", "site_sch", "01_business_vault", "dwh_site_company_link"], "alias": "dwh_site_company_link", "checksum": {"name": "sha256", "checksum": "52f3e02cde986cfe0cd45f24a50df80837b70946b6631373c45e85616e62c7fb"}, "config": {"enabled": true, "alias": null, "schema": "DWH_SITE_SCH", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.Site", "business_vault"], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.Site", "business_vault"], "description": "Link table between SITE hub and COMPANY hub", "columns": {"SITE_COMPANY_LINK_KEY": {"name": "SITE_COMPANY_LINK_KEY", "description": "Cl\u00e9 primaire du lien Site vers Company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPANY_KEY": {"name": "COMPANY_KEY", "description": "Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_KEY": {"name": "CUSTOMER_KEY", "description": "Cl\u00e9 hash\u00e9e des utilisateurs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LDTS": {"name": "LDTS", "description": "Date de chargement", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RSCR": {"name": "RSCR", "description": "Donnees JDE", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_company_link.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["business_vault"], "schema": "DWH_SITE_SCH", "materialized": "incremental"}, "created_at": 1683884073.0234609, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_SITE_SCH.dwh_site_company_link", "raw_code": "{%- set source_model = \"dwh_site_tmp\" -%}\r\n{%- set src_pk = \"SITE_COMPANY_LINK_KEY\" -%}\r\n{%- set src_fk = [\"SITE_KEY\",\"COMPANY_KEY\"] -%}\r\n{%- set src_ldts = \"LDTS\" -%}\r\n{%- set src_source = \"RSCR\" -%}\r\n\r\n{{ dbtvault.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\r\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["dwh_site_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.link"], "nodes": ["model.dbt_grizzly.dwh_site_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_company_link.sql", "compiled": true, "compiled_code": "\n\n    -- Generated by dbtvault.\n\n    \n\nWITH  __dbt__cte__dwh_site_tmp as (\nWITH\n    \nF0006 AS (\n  SELECT \n    F0006_HUB.\"ID\", \"MCMCU\",\n    F0006_S01.\"FD\", \"TD\", \"MCSTYL\", \"MCDC\", \"MCLDM\", \"MCCO\", \"MCAN8\", \"MCAN8O\", \"MCCNTY\", \"MCADDS\", \"MCFMOD\", \"MCDL01\", \"MCDL02\", \"MCDL03\", \"MCDL04\", \"MCRP01\", \"MCRP02\", \"MCRP03\", \"MCRP04\", \"MCRP05\", \"MCRP06\", \"MCRP07\", \"MCRP08\", \"MCRP09\", \"MCRP10\", \"MCRP11\", \"MCRP12\", \"MCRP13\", \"MCRP14\", \"MCRP15\", \"MCRP16\", \"MCRP17\", \"MCRP18\", \"MCRP19\", \"MCRP20\", \"MCRP21\", \"MCRP22\", \"MCRP23\", \"MCRP24\", \"MCRP25\", \"MCRP26\", \"MCRP27\", \"MCRP28\", \"MCRP29\", \"MCRP30\", \"MCTA\", \"MCTXJS\", \"MCTXA1\", \"MCEXR1\", \"MCTC01\", \"MCTC02\", \"MCTC03\", \"MCTC04\", \"MCTC05\", \"MCTC06\", \"MCTC07\", \"MCTC08\", \"MCTC09\", \"MCTC10\", \"MCND01\", \"MCND02\", \"MCND03\", \"MCND04\", \"MCND05\", \"MCND06\", \"MCND07\", \"MCND08\", \"MCND09\", \"MCND10\", \"MCCC01\", \"MCCC02\", \"MCCC03\", \"MCCC04\", \"MCCC05\", \"MCCC06\", \"MCCC07\", \"MCCC08\", \"MCCC09\", \"MCCC10\", \"MCPECC\", \"MCALS\", \"MCISS\", \"MCGLBA\", \"MCALCL\", \"MCLMTH\", \"MCLF\", \"MCOBJ1\", \"MCOBJ2\", \"MCOBJ3\", \"MCSUB1\", \"MCTOU\", \"MCSBLI\", \"MCANPA\", \"MCCT\", \"MCCERT\", \"MCMCUS\", \"MCBTYP\", \"MCPC\", \"MCPCA\", \"MCPCC\", \"MCINTA\", \"MCINTL\", \"MCD1J\", \"MCD2J\", \"MCD3J\", \"MCD4J\", \"MCD5J\", \"MCD6J\", \"MCFPDJ\", \"MCCAC\", \"MCPAC\", \"MCEEO\", \"MCERC\", \"MCUSER\", \"MCPID\", \"MCUPMJ\", \"MCJOBN\", \"MCUPMT\", \"MCBPTP\", \"MCAPSB\", \"MCTSBU\", \"MCRP31\", \"MCRP32\", \"MCRP33\", \"MCRP34\", \"MCRP35\", \"MCRP36\", \"MCRP37\", \"MCRP38\", \"MCRP39\", \"MCRP40\", \"MCRP41\", \"MCRP42\", \"MCRP43\", \"MCRP44\", \"MCRP45\", \"MCRP46\", \"MCRP47\", \"MCRP48\", \"MCRP49\", \"MCRP50\", \"MCAN8GCA1\", \"MCAN8GCA2\", \"MCAN8GCA3\", \"MCAN8GCA4\", \"MCAN8GCA5\", \"MCRMCU1\", \"MCDOCO\", \"MCPCTN\", \"MCCLNU\", \"MCBUCA\", \"MCADJENT\", \"MCUAFL\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_HUB F0006_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_S01 F0006_S01 ON F0006_HUB.ID = F0006_S01.ID\n    where F0006_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0006_S01.ID ORDER BY F0006_S01.FD DESC) = 1 \n),\n    \nF0005 AS (\n  SELECT \n    F0005_HUB.\"ID\", \"DRSY\", \"DRRT\", \"DRKY\",\n    F0005_S01.\"FD\", \"TD\", \"DRDL01\", \"DRDL02\", \"DRSPHD\", \"DRUDCO\", \"DRHRDC\", \"DRUSER\", \"DRPID\", \"DRUPMJ\", \"DRJOBN\", \"DRUPMT\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_HUB F0005_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_S01 F0005_S01 ON F0005_HUB.ID = F0005_S01.ID\n    where F0005_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0005_S01.ID ORDER BY F0005_S01.FD DESC) = 1 \n),\n    \nF0101 AS (\n  SELECT \n    F0101_HUB.\"ID\", \"ABAN8\",\n    F0101_S01.\"FD\", \"TD\", \"ABALKY\", \"ABTAX\", \"ABALPH\", \"ABDC\", \"ABMCU\", \"ABSIC\", \"ABLNGP\", \"ABAT1\", \"ABCM\", \"ABTAXC\", \"ABAT2\", \"ABAT3\", \"ABAT4\", \"ABAT5\", \"ABATP\", \"ABATR\", \"ABATPR\", \"ABAB3\", \"ABATE\", \"ABSBLI\", \"ABEFTB\", \"ABAN81\", \"ABAN82\", \"ABAN83\", \"ABAN84\", \"ABAN86\", \"ABAN85\", \"ABAC01\", \"ABAC02\", \"ABAC03\", \"ABAC04\", \"ABAC05\", \"ABAC06\", \"ABAC07\", \"ABAC08\", \"ABAC09\", \"ABAC10\", \"ABAC11\", \"ABAC12\", \"ABAC13\", \"ABAC14\", \"ABAC15\", \"ABAC16\", \"ABAC17\", \"ABAC18\", \"ABAC19\", \"ABAC20\", \"ABAC21\", \"ABAC22\", \"ABAC23\", \"ABAC24\", \"ABAC25\", \"ABAC26\", \"ABAC27\", \"ABAC28\", \"ABAC29\", \"ABAC30\", \"ABGLBA\", \"ABPTI\", \"ABPDI\", \"ABMSGA\", \"ABRMK\", \"ABTXCT\", \"ABTX2\", \"ABALP1\", \"ABURCD\", \"ABURDT\", \"ABURAT\", \"ABURAB\", \"ABURRF\", \"ABUSER\", \"ABPID\", \"ABUPMJ\", \"ABJOBN\", \"ABUPMT\", \"ABPRGF\", \"ABSCCLTP\", \"ABTICKER\", \"ABEXCHG\", \"ABDUNS\", \"ABCLASS01\", \"ABCLASS02\", \"ABCLASS03\", \"ABCLASS04\", \"ABCLASS05\", \"ABNOE\", \"ABGROWTHR\", \"ABYEARSTAR\", \"ABAEMPGP\", \"ABACTIN\", \"ABREVRNG\", \"ABSYNCS\", \"ABPERRS\", \"ABCAAD\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_HUB F0101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_S01 F0101_S01 ON F0101_HUB.ID = F0101_S01.ID\n    where F0101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0101_S01.ID ORDER BY F0101_S01.FD DESC) = 1 \n),\n\nsite_type as (\n    --select aban8, abat1,abalph,mcrp05,mcrp07,mcmcu from\n    select TRIM(F0006.MCMCU) as MCMCU,\n    CASE WHEN TRIM(F0006.MCMCU) = TRIM(F0006.MCRP05) THEN 'DER'\n         WHEN F0006.MCRP07 = 'SU' THEN 'SU'\n         WHEN F0006.MCRP07 = 'A' THEN 'ACH'\n         WHEN F0006.MCRP07 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'KT' THEN 'DISP'\n         WHEN F0101.ABAT1 = 'D' THEN 'DL'\n         WHEN F0101.ABAT1 = 'AD' THEN 'DF'\n    END as SITE_TYPE_CD --Code du type de site\n    from F0101\n    inner join F0006 on F0101.ABAN8 = F0006.MCAN8\n    where F0101.abat1 in ('D','AD','ST','KT')\n),\n\nsource_data as (\n  select\n    sha2_binary(to_variant(array_construct(TRIM(F0006.MCMCU))),512) as SITE_KEY, --cle technique\n    sha2_binary(to_variant(array_construct(F0006.MCCO)),512) as COMPANY_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(F0006.MCAN8)),512) AS CUSTOMER_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    sha2_binary(to_variant(array_construct(SITE_KEY,COMPANY_KEY)),512) as SITE_COMPANY_LINK_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(SITE_KEY,CUSTOMER_KEY)),512) AS SITE_CUSTOMER_LINK_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    TRIM(F0006.MCMCU)  as SITE_CD, --Magasin - Code\n    F0006.MCDL01 as SITE_NAME, --Libell\u00e9 du site\n    IFF(AD_P_PARAM.PARAM_CLASS_CD = 'LSV_TYPE_SITE', F0101_TIER.ABAT1 , NULL) as TYP_REF, --Typologie du Referentiel tracabilit\u00e9\n    site_type.SITE_TYPE_CD as SITE_TYPE_CD, --Code du type de site*/\n    AD_P_PARAM.OBJ_NAME as SITE_TYPE_NAME, --Libell\u00e9 du type de site\n    AD_P_PARAM.OBJ_CPLT_1 as SITE_PRF_CD,  --Code du site PRF\n    AD_P_PARAM.OBJ_CPLT_2 as SITE_PRF_NAME,  --Libell\u00e9 du site PRF\n    IFF(SITE_TYPE.SITE_TYPE_CD = 'DER', 1 , 0) as DER_FLG, --Flag indiquant que nous sommes sur une DER\n    F0006.MCCO as COMPANY_ID,\n    --company_hub.COMPANY_CD as COMPANY_ID, --Identifiant technique de la soci\u00e9t\u00e9\n    --case when TRIM(F0101_0.ABAT1) in ('D','AD') then F0006.MCAN8 else NULL end  as PARTY_ID, --Identifiant technique du tiers\n    F0006.MCRP05 as SITE_GUARDSHIP_CD, --Code du site de rattachement (DER)\n    F0005_SITE_GUARDSHIP_NAME.DRDL01 as SITE_GUARDSHIP_NAME, --Libell\u00e9 du site de rattachement (DER)\n    F0005_CAPACITY_PROPRE_NBR_PL.DRDL01 as CAPACITY_PROPRE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits propres\n    F0005_CAPACITY_NEGOCE_NBR_PL.DRDL01 as CAPACITY_NEGOCE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits de negoce\n    F0005_CAPACITY_NBR_PL.DRDL01 as CAPACITY_NBR_PL, --Capacit\u00e9 en nombre de palette\n    F0006.FD as EFFECTIVE_FROM, -- Date effective  \n    '2023-05-12 09:34:26'::DATETIME as LDTS, -- Date de chargement\n    'JDE' as RSCR -- Donnees JDE\n  from F0006\n\n  inner join SITE_TYPE on TRIM(SITE_TYPE.MCMCU) = TRIM(F0006.MCMCU)\n  LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM AD_P_PARAM ON TRIM(AD_P_PARAM.OBJ_CD) = TRIM(SITE_TYPE.SITE_TYPE_CD) AND PARAM_CLASS_CD = 'LSV_TYPE_SITE'\n\n  LEFT JOIN (select distinct ABMCU from F0101 where ABAT1 in ('ST','KT','D','AD')) F0101 ON TRIM(F0101.ABMCU)=TRIM(F0006.MCMCU)\n  LEFT JOIN F0101 F0101_TIER ON F0101_TIER.ABAN8 = TRIM(F0006.MCAN8)\n  LEFT JOIN F0005 F0005_SITE_GUARDSHIP_NAME ON TRIM(F0005_SITE_GUARDSHIP_NAME.DRKY) = F0006.MCRP05 AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRSY) = '00' AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRRT) = '05' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_PROPRE_NBR_PL ON TRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRKY) = F0006.MCRP02 AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRRT) = '02' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NEGOCE_NBR_PL ON TRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRKY) = F0006.MCRP03 AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRRT) = '03' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NBR_PL ON TRIM(F0005_CAPACITY_NBR_PL.DRKY) = F0006.MCRP04 AND RTRIM(F0005_CAPACITY_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NBR_PL.DRRT) = '04' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n)\nselect\nSITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG,COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL, EFFECTIVE_FROM, LDTS, RSCR,\nsha2_binary(to_variant(ARRAY_CONSTRUCT(SITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG, COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL)),512) as HASHDIFF\nfrom source_data\n),row_rank_1 AS (\n    SELECT rr.\"SITE_COMPANY_LINK_KEY\", rr.\"SITE_KEY\", rr.\"COMPANY_KEY\", rr.\"LDTS\", rr.\"RSCR\",\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.\"SITE_COMPANY_LINK_KEY\"\n               ORDER BY rr.\"LDTS\"\n           ) AS row_number\n    FROM __dbt__cte__dwh_site_tmp AS rr\n    WHERE rr.\"SITE_COMPANY_LINK_KEY\" IS NOT NULL\n    AND rr.\"SITE_KEY\" IS NOT NULL\n    AND rr.\"COMPANY_KEY\" IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.\"SITE_COMPANY_LINK_KEY\", a.\"SITE_KEY\", a.\"COMPANY_KEY\", a.\"LDTS\", a.\"RSCR\"\n    FROM row_rank_1 AS a\n    LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_SITE_SCH.dwh_site_company_link AS d\n    ON a.\"SITE_COMPANY_LINK_KEY\" = d.\"SITE_COMPANY_LINK_KEY\"\n    WHERE d.\"SITE_COMPANY_LINK_KEY\" IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_site_tmp", "sql": " __dbt__cte__dwh_site_tmp as (\nWITH\n    \nF0006 AS (\n  SELECT \n    F0006_HUB.\"ID\", \"MCMCU\",\n    F0006_S01.\"FD\", \"TD\", \"MCSTYL\", \"MCDC\", \"MCLDM\", \"MCCO\", \"MCAN8\", \"MCAN8O\", \"MCCNTY\", \"MCADDS\", \"MCFMOD\", \"MCDL01\", \"MCDL02\", \"MCDL03\", \"MCDL04\", \"MCRP01\", \"MCRP02\", \"MCRP03\", \"MCRP04\", \"MCRP05\", \"MCRP06\", \"MCRP07\", \"MCRP08\", \"MCRP09\", \"MCRP10\", \"MCRP11\", \"MCRP12\", \"MCRP13\", \"MCRP14\", \"MCRP15\", \"MCRP16\", \"MCRP17\", \"MCRP18\", \"MCRP19\", \"MCRP20\", \"MCRP21\", \"MCRP22\", \"MCRP23\", \"MCRP24\", \"MCRP25\", \"MCRP26\", \"MCRP27\", \"MCRP28\", \"MCRP29\", \"MCRP30\", \"MCTA\", \"MCTXJS\", \"MCTXA1\", \"MCEXR1\", \"MCTC01\", \"MCTC02\", \"MCTC03\", \"MCTC04\", \"MCTC05\", \"MCTC06\", \"MCTC07\", \"MCTC08\", \"MCTC09\", \"MCTC10\", \"MCND01\", \"MCND02\", \"MCND03\", \"MCND04\", \"MCND05\", \"MCND06\", \"MCND07\", \"MCND08\", \"MCND09\", \"MCND10\", \"MCCC01\", \"MCCC02\", \"MCCC03\", \"MCCC04\", \"MCCC05\", \"MCCC06\", \"MCCC07\", \"MCCC08\", \"MCCC09\", \"MCCC10\", \"MCPECC\", \"MCALS\", \"MCISS\", \"MCGLBA\", \"MCALCL\", \"MCLMTH\", \"MCLF\", \"MCOBJ1\", \"MCOBJ2\", \"MCOBJ3\", \"MCSUB1\", \"MCTOU\", \"MCSBLI\", \"MCANPA\", \"MCCT\", \"MCCERT\", \"MCMCUS\", \"MCBTYP\", \"MCPC\", \"MCPCA\", \"MCPCC\", \"MCINTA\", \"MCINTL\", \"MCD1J\", \"MCD2J\", \"MCD3J\", \"MCD4J\", \"MCD5J\", \"MCD6J\", \"MCFPDJ\", \"MCCAC\", \"MCPAC\", \"MCEEO\", \"MCERC\", \"MCUSER\", \"MCPID\", \"MCUPMJ\", \"MCJOBN\", \"MCUPMT\", \"MCBPTP\", \"MCAPSB\", \"MCTSBU\", \"MCRP31\", \"MCRP32\", \"MCRP33\", \"MCRP34\", \"MCRP35\", \"MCRP36\", \"MCRP37\", \"MCRP38\", \"MCRP39\", \"MCRP40\", \"MCRP41\", \"MCRP42\", \"MCRP43\", \"MCRP44\", \"MCRP45\", \"MCRP46\", \"MCRP47\", \"MCRP48\", \"MCRP49\", \"MCRP50\", \"MCAN8GCA1\", \"MCAN8GCA2\", \"MCAN8GCA3\", \"MCAN8GCA4\", \"MCAN8GCA5\", \"MCRMCU1\", \"MCDOCO\", \"MCPCTN\", \"MCCLNU\", \"MCBUCA\", \"MCADJENT\", \"MCUAFL\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_HUB F0006_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_S01 F0006_S01 ON F0006_HUB.ID = F0006_S01.ID\n    where F0006_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0006_S01.ID ORDER BY F0006_S01.FD DESC) = 1 \n),\n    \nF0005 AS (\n  SELECT \n    F0005_HUB.\"ID\", \"DRSY\", \"DRRT\", \"DRKY\",\n    F0005_S01.\"FD\", \"TD\", \"DRDL01\", \"DRDL02\", \"DRSPHD\", \"DRUDCO\", \"DRHRDC\", \"DRUSER\", \"DRPID\", \"DRUPMJ\", \"DRJOBN\", \"DRUPMT\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_HUB F0005_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_S01 F0005_S01 ON F0005_HUB.ID = F0005_S01.ID\n    where F0005_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0005_S01.ID ORDER BY F0005_S01.FD DESC) = 1 \n),\n    \nF0101 AS (\n  SELECT \n    F0101_HUB.\"ID\", \"ABAN8\",\n    F0101_S01.\"FD\", \"TD\", \"ABALKY\", \"ABTAX\", \"ABALPH\", \"ABDC\", \"ABMCU\", \"ABSIC\", \"ABLNGP\", \"ABAT1\", \"ABCM\", \"ABTAXC\", \"ABAT2\", \"ABAT3\", \"ABAT4\", \"ABAT5\", \"ABATP\", \"ABATR\", \"ABATPR\", \"ABAB3\", \"ABATE\", \"ABSBLI\", \"ABEFTB\", \"ABAN81\", \"ABAN82\", \"ABAN83\", \"ABAN84\", \"ABAN86\", \"ABAN85\", \"ABAC01\", \"ABAC02\", \"ABAC03\", \"ABAC04\", \"ABAC05\", \"ABAC06\", \"ABAC07\", \"ABAC08\", \"ABAC09\", \"ABAC10\", \"ABAC11\", \"ABAC12\", \"ABAC13\", \"ABAC14\", \"ABAC15\", \"ABAC16\", \"ABAC17\", \"ABAC18\", \"ABAC19\", \"ABAC20\", \"ABAC21\", \"ABAC22\", \"ABAC23\", \"ABAC24\", \"ABAC25\", \"ABAC26\", \"ABAC27\", \"ABAC28\", \"ABAC29\", \"ABAC30\", \"ABGLBA\", \"ABPTI\", \"ABPDI\", \"ABMSGA\", \"ABRMK\", \"ABTXCT\", \"ABTX2\", \"ABALP1\", \"ABURCD\", \"ABURDT\", \"ABURAT\", \"ABURAB\", \"ABURRF\", \"ABUSER\", \"ABPID\", \"ABUPMJ\", \"ABJOBN\", \"ABUPMT\", \"ABPRGF\", \"ABSCCLTP\", \"ABTICKER\", \"ABEXCHG\", \"ABDUNS\", \"ABCLASS01\", \"ABCLASS02\", \"ABCLASS03\", \"ABCLASS04\", \"ABCLASS05\", \"ABNOE\", \"ABGROWTHR\", \"ABYEARSTAR\", \"ABAEMPGP\", \"ABACTIN\", \"ABREVRNG\", \"ABSYNCS\", \"ABPERRS\", \"ABCAAD\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_HUB F0101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_S01 F0101_S01 ON F0101_HUB.ID = F0101_S01.ID\n    where F0101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0101_S01.ID ORDER BY F0101_S01.FD DESC) = 1 \n),\n\nsite_type as (\n    --select aban8, abat1,abalph,mcrp05,mcrp07,mcmcu from\n    select TRIM(F0006.MCMCU) as MCMCU,\n    CASE WHEN TRIM(F0006.MCMCU) = TRIM(F0006.MCRP05) THEN 'DER'\n         WHEN F0006.MCRP07 = 'SU' THEN 'SU'\n         WHEN F0006.MCRP07 = 'A' THEN 'ACH'\n         WHEN F0006.MCRP07 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'KT' THEN 'DISP'\n         WHEN F0101.ABAT1 = 'D' THEN 'DL'\n         WHEN F0101.ABAT1 = 'AD' THEN 'DF'\n    END as SITE_TYPE_CD --Code du type de site\n    from F0101\n    inner join F0006 on F0101.ABAN8 = F0006.MCAN8\n    where F0101.abat1 in ('D','AD','ST','KT')\n),\n\nsource_data as (\n  select\n    sha2_binary(to_variant(array_construct(TRIM(F0006.MCMCU))),512) as SITE_KEY, --cle technique\n    sha2_binary(to_variant(array_construct(F0006.MCCO)),512) as COMPANY_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(F0006.MCAN8)),512) AS CUSTOMER_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    sha2_binary(to_variant(array_construct(SITE_KEY,COMPANY_KEY)),512) as SITE_COMPANY_LINK_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(SITE_KEY,CUSTOMER_KEY)),512) AS SITE_CUSTOMER_LINK_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    TRIM(F0006.MCMCU)  as SITE_CD, --Magasin - Code\n    F0006.MCDL01 as SITE_NAME, --Libell\u00e9 du site\n    IFF(AD_P_PARAM.PARAM_CLASS_CD = 'LSV_TYPE_SITE', F0101_TIER.ABAT1 , NULL) as TYP_REF, --Typologie du Referentiel tracabilit\u00e9\n    site_type.SITE_TYPE_CD as SITE_TYPE_CD, --Code du type de site*/\n    AD_P_PARAM.OBJ_NAME as SITE_TYPE_NAME, --Libell\u00e9 du type de site\n    AD_P_PARAM.OBJ_CPLT_1 as SITE_PRF_CD,  --Code du site PRF\n    AD_P_PARAM.OBJ_CPLT_2 as SITE_PRF_NAME,  --Libell\u00e9 du site PRF\n    IFF(SITE_TYPE.SITE_TYPE_CD = 'DER', 1 , 0) as DER_FLG, --Flag indiquant que nous sommes sur une DER\n    F0006.MCCO as COMPANY_ID,\n    --company_hub.COMPANY_CD as COMPANY_ID, --Identifiant technique de la soci\u00e9t\u00e9\n    --case when TRIM(F0101_0.ABAT1) in ('D','AD') then F0006.MCAN8 else NULL end  as PARTY_ID, --Identifiant technique du tiers\n    F0006.MCRP05 as SITE_GUARDSHIP_CD, --Code du site de rattachement (DER)\n    F0005_SITE_GUARDSHIP_NAME.DRDL01 as SITE_GUARDSHIP_NAME, --Libell\u00e9 du site de rattachement (DER)\n    F0005_CAPACITY_PROPRE_NBR_PL.DRDL01 as CAPACITY_PROPRE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits propres\n    F0005_CAPACITY_NEGOCE_NBR_PL.DRDL01 as CAPACITY_NEGOCE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits de negoce\n    F0005_CAPACITY_NBR_PL.DRDL01 as CAPACITY_NBR_PL, --Capacit\u00e9 en nombre de palette\n    F0006.FD as EFFECTIVE_FROM, -- Date effective  \n    '2023-05-12 09:34:26'::DATETIME as LDTS, -- Date de chargement\n    'JDE' as RSCR -- Donnees JDE\n  from F0006\n\n  inner join SITE_TYPE on TRIM(SITE_TYPE.MCMCU) = TRIM(F0006.MCMCU)\n  LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM AD_P_PARAM ON TRIM(AD_P_PARAM.OBJ_CD) = TRIM(SITE_TYPE.SITE_TYPE_CD) AND PARAM_CLASS_CD = 'LSV_TYPE_SITE'\n\n  LEFT JOIN (select distinct ABMCU from F0101 where ABAT1 in ('ST','KT','D','AD')) F0101 ON TRIM(F0101.ABMCU)=TRIM(F0006.MCMCU)\n  LEFT JOIN F0101 F0101_TIER ON F0101_TIER.ABAN8 = TRIM(F0006.MCAN8)\n  LEFT JOIN F0005 F0005_SITE_GUARDSHIP_NAME ON TRIM(F0005_SITE_GUARDSHIP_NAME.DRKY) = F0006.MCRP05 AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRSY) = '00' AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRRT) = '05' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_PROPRE_NBR_PL ON TRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRKY) = F0006.MCRP02 AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRRT) = '02' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NEGOCE_NBR_PL ON TRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRKY) = F0006.MCRP03 AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRRT) = '03' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NBR_PL ON TRIM(F0005_CAPACITY_NBR_PL.DRKY) = F0006.MCRP04 AND RTRIM(F0005_CAPACITY_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NBR_PL.DRRT) = '04' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n)\nselect\nSITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG,COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL, EFFECTIVE_FROM, LDTS, RSCR,\nsha2_binary(to_variant(ARRAY_CONSTRUCT(SITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG, COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL)),512) as HASHDIFF\nfrom source_data\n)"}]}, "model.dbt_grizzly.dwh_site_customer_link": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_SITE_SCH", "name": "dwh_site_customer_link", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\site_sch\\01_business_vault\\dwh_site_customer_link.sql", "original_file_path": "models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_customer_link.sql", "unique_id": "model.dbt_grizzly.dwh_site_customer_link", "fqn": ["dbt_grizzly", "20_silver_db", "site_sch", "01_business_vault", "dwh_site_customer_link"], "alias": "dwh_site_customer_link", "checksum": {"name": "sha256", "checksum": "4ecf2ffbdf78b293d42576b8796bfacb1e3c8048e81c8f1fbcd9f2fbfdd01d6d"}, "config": {"enabled": true, "alias": null, "schema": "DWH_SITE_SCH", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.Site", "business_vault"], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.Site", "business_vault"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["business_vault"], "schema": "DWH_SITE_SCH", "materialized": "incremental"}, "created_at": 1683884072.3808465, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_SITE_SCH.dwh_site_customer_link", "raw_code": "{%- set source_model = \"dwh_site_tmp\" -%}\r\n{%- set src_pk = \"SITE_CUSTOMER_LINK_KEY\" -%}\r\n{%- set src_fk = [\"SITE_KEY\",\"CUSTOMER_KEY\"] -%}\r\n{%- set src_ldts = \"LDTS\" -%}\r\n{%- set src_source = \"RSCR\" -%}\r\n\r\n{{ dbtvault.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\r\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["dwh_site_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.link"], "nodes": ["model.dbt_grizzly.dwh_site_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_customer_link.sql", "compiled": true, "compiled_code": "\n\n    -- Generated by dbtvault.\n\n    \n\nWITH  __dbt__cte__dwh_site_tmp as (\nWITH\n    \nF0006 AS (\n  SELECT \n    F0006_HUB.\"ID\", \"MCMCU\",\n    F0006_S01.\"FD\", \"TD\", \"MCSTYL\", \"MCDC\", \"MCLDM\", \"MCCO\", \"MCAN8\", \"MCAN8O\", \"MCCNTY\", \"MCADDS\", \"MCFMOD\", \"MCDL01\", \"MCDL02\", \"MCDL03\", \"MCDL04\", \"MCRP01\", \"MCRP02\", \"MCRP03\", \"MCRP04\", \"MCRP05\", \"MCRP06\", \"MCRP07\", \"MCRP08\", \"MCRP09\", \"MCRP10\", \"MCRP11\", \"MCRP12\", \"MCRP13\", \"MCRP14\", \"MCRP15\", \"MCRP16\", \"MCRP17\", \"MCRP18\", \"MCRP19\", \"MCRP20\", \"MCRP21\", \"MCRP22\", \"MCRP23\", \"MCRP24\", \"MCRP25\", \"MCRP26\", \"MCRP27\", \"MCRP28\", \"MCRP29\", \"MCRP30\", \"MCTA\", \"MCTXJS\", \"MCTXA1\", \"MCEXR1\", \"MCTC01\", \"MCTC02\", \"MCTC03\", \"MCTC04\", \"MCTC05\", \"MCTC06\", \"MCTC07\", \"MCTC08\", \"MCTC09\", \"MCTC10\", \"MCND01\", \"MCND02\", \"MCND03\", \"MCND04\", \"MCND05\", \"MCND06\", \"MCND07\", \"MCND08\", \"MCND09\", \"MCND10\", \"MCCC01\", \"MCCC02\", \"MCCC03\", \"MCCC04\", \"MCCC05\", \"MCCC06\", \"MCCC07\", \"MCCC08\", \"MCCC09\", \"MCCC10\", \"MCPECC\", \"MCALS\", \"MCISS\", \"MCGLBA\", \"MCALCL\", \"MCLMTH\", \"MCLF\", \"MCOBJ1\", \"MCOBJ2\", \"MCOBJ3\", \"MCSUB1\", \"MCTOU\", \"MCSBLI\", \"MCANPA\", \"MCCT\", \"MCCERT\", \"MCMCUS\", \"MCBTYP\", \"MCPC\", \"MCPCA\", \"MCPCC\", \"MCINTA\", \"MCINTL\", \"MCD1J\", \"MCD2J\", \"MCD3J\", \"MCD4J\", \"MCD5J\", \"MCD6J\", \"MCFPDJ\", \"MCCAC\", \"MCPAC\", \"MCEEO\", \"MCERC\", \"MCUSER\", \"MCPID\", \"MCUPMJ\", \"MCJOBN\", \"MCUPMT\", \"MCBPTP\", \"MCAPSB\", \"MCTSBU\", \"MCRP31\", \"MCRP32\", \"MCRP33\", \"MCRP34\", \"MCRP35\", \"MCRP36\", \"MCRP37\", \"MCRP38\", \"MCRP39\", \"MCRP40\", \"MCRP41\", \"MCRP42\", \"MCRP43\", \"MCRP44\", \"MCRP45\", \"MCRP46\", \"MCRP47\", \"MCRP48\", \"MCRP49\", \"MCRP50\", \"MCAN8GCA1\", \"MCAN8GCA2\", \"MCAN8GCA3\", \"MCAN8GCA4\", \"MCAN8GCA5\", \"MCRMCU1\", \"MCDOCO\", \"MCPCTN\", \"MCCLNU\", \"MCBUCA\", \"MCADJENT\", \"MCUAFL\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_HUB F0006_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_S01 F0006_S01 ON F0006_HUB.ID = F0006_S01.ID\n    where F0006_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0006_S01.ID ORDER BY F0006_S01.FD DESC) = 1 \n),\n    \nF0005 AS (\n  SELECT \n    F0005_HUB.\"ID\", \"DRSY\", \"DRRT\", \"DRKY\",\n    F0005_S01.\"FD\", \"TD\", \"DRDL01\", \"DRDL02\", \"DRSPHD\", \"DRUDCO\", \"DRHRDC\", \"DRUSER\", \"DRPID\", \"DRUPMJ\", \"DRJOBN\", \"DRUPMT\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_HUB F0005_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_S01 F0005_S01 ON F0005_HUB.ID = F0005_S01.ID\n    where F0005_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0005_S01.ID ORDER BY F0005_S01.FD DESC) = 1 \n),\n    \nF0101 AS (\n  SELECT \n    F0101_HUB.\"ID\", \"ABAN8\",\n    F0101_S01.\"FD\", \"TD\", \"ABALKY\", \"ABTAX\", \"ABALPH\", \"ABDC\", \"ABMCU\", \"ABSIC\", \"ABLNGP\", \"ABAT1\", \"ABCM\", \"ABTAXC\", \"ABAT2\", \"ABAT3\", \"ABAT4\", \"ABAT5\", \"ABATP\", \"ABATR\", \"ABATPR\", \"ABAB3\", \"ABATE\", \"ABSBLI\", \"ABEFTB\", \"ABAN81\", \"ABAN82\", \"ABAN83\", \"ABAN84\", \"ABAN86\", \"ABAN85\", \"ABAC01\", \"ABAC02\", \"ABAC03\", \"ABAC04\", \"ABAC05\", \"ABAC06\", \"ABAC07\", \"ABAC08\", \"ABAC09\", \"ABAC10\", \"ABAC11\", \"ABAC12\", \"ABAC13\", \"ABAC14\", \"ABAC15\", \"ABAC16\", \"ABAC17\", \"ABAC18\", \"ABAC19\", \"ABAC20\", \"ABAC21\", \"ABAC22\", \"ABAC23\", \"ABAC24\", \"ABAC25\", \"ABAC26\", \"ABAC27\", \"ABAC28\", \"ABAC29\", \"ABAC30\", \"ABGLBA\", \"ABPTI\", \"ABPDI\", \"ABMSGA\", \"ABRMK\", \"ABTXCT\", \"ABTX2\", \"ABALP1\", \"ABURCD\", \"ABURDT\", \"ABURAT\", \"ABURAB\", \"ABURRF\", \"ABUSER\", \"ABPID\", \"ABUPMJ\", \"ABJOBN\", \"ABUPMT\", \"ABPRGF\", \"ABSCCLTP\", \"ABTICKER\", \"ABEXCHG\", \"ABDUNS\", \"ABCLASS01\", \"ABCLASS02\", \"ABCLASS03\", \"ABCLASS04\", \"ABCLASS05\", \"ABNOE\", \"ABGROWTHR\", \"ABYEARSTAR\", \"ABAEMPGP\", \"ABACTIN\", \"ABREVRNG\", \"ABSYNCS\", \"ABPERRS\", \"ABCAAD\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_HUB F0101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_S01 F0101_S01 ON F0101_HUB.ID = F0101_S01.ID\n    where F0101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0101_S01.ID ORDER BY F0101_S01.FD DESC) = 1 \n),\n\nsite_type as (\n    --select aban8, abat1,abalph,mcrp05,mcrp07,mcmcu from\n    select TRIM(F0006.MCMCU) as MCMCU,\n    CASE WHEN TRIM(F0006.MCMCU) = TRIM(F0006.MCRP05) THEN 'DER'\n         WHEN F0006.MCRP07 = 'SU' THEN 'SU'\n         WHEN F0006.MCRP07 = 'A' THEN 'ACH'\n         WHEN F0006.MCRP07 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'KT' THEN 'DISP'\n         WHEN F0101.ABAT1 = 'D' THEN 'DL'\n         WHEN F0101.ABAT1 = 'AD' THEN 'DF'\n    END as SITE_TYPE_CD --Code du type de site\n    from F0101\n    inner join F0006 on F0101.ABAN8 = F0006.MCAN8\n    where F0101.abat1 in ('D','AD','ST','KT')\n),\n\nsource_data as (\n  select\n    sha2_binary(to_variant(array_construct(TRIM(F0006.MCMCU))),512) as SITE_KEY, --cle technique\n    sha2_binary(to_variant(array_construct(F0006.MCCO)),512) as COMPANY_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(F0006.MCAN8)),512) AS CUSTOMER_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    sha2_binary(to_variant(array_construct(SITE_KEY,COMPANY_KEY)),512) as SITE_COMPANY_LINK_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(SITE_KEY,CUSTOMER_KEY)),512) AS SITE_CUSTOMER_LINK_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    TRIM(F0006.MCMCU)  as SITE_CD, --Magasin - Code\n    F0006.MCDL01 as SITE_NAME, --Libell\u00e9 du site\n    IFF(AD_P_PARAM.PARAM_CLASS_CD = 'LSV_TYPE_SITE', F0101_TIER.ABAT1 , NULL) as TYP_REF, --Typologie du Referentiel tracabilit\u00e9\n    site_type.SITE_TYPE_CD as SITE_TYPE_CD, --Code du type de site*/\n    AD_P_PARAM.OBJ_NAME as SITE_TYPE_NAME, --Libell\u00e9 du type de site\n    AD_P_PARAM.OBJ_CPLT_1 as SITE_PRF_CD,  --Code du site PRF\n    AD_P_PARAM.OBJ_CPLT_2 as SITE_PRF_NAME,  --Libell\u00e9 du site PRF\n    IFF(SITE_TYPE.SITE_TYPE_CD = 'DER', 1 , 0) as DER_FLG, --Flag indiquant que nous sommes sur une DER\n    F0006.MCCO as COMPANY_ID,\n    --company_hub.COMPANY_CD as COMPANY_ID, --Identifiant technique de la soci\u00e9t\u00e9\n    --case when TRIM(F0101_0.ABAT1) in ('D','AD') then F0006.MCAN8 else NULL end  as PARTY_ID, --Identifiant technique du tiers\n    F0006.MCRP05 as SITE_GUARDSHIP_CD, --Code du site de rattachement (DER)\n    F0005_SITE_GUARDSHIP_NAME.DRDL01 as SITE_GUARDSHIP_NAME, --Libell\u00e9 du site de rattachement (DER)\n    F0005_CAPACITY_PROPRE_NBR_PL.DRDL01 as CAPACITY_PROPRE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits propres\n    F0005_CAPACITY_NEGOCE_NBR_PL.DRDL01 as CAPACITY_NEGOCE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits de negoce\n    F0005_CAPACITY_NBR_PL.DRDL01 as CAPACITY_NBR_PL, --Capacit\u00e9 en nombre de palette\n    F0006.FD as EFFECTIVE_FROM, -- Date effective  \n    '2023-05-12 09:34:26'::DATETIME as LDTS, -- Date de chargement\n    'JDE' as RSCR -- Donnees JDE\n  from F0006\n\n  inner join SITE_TYPE on TRIM(SITE_TYPE.MCMCU) = TRIM(F0006.MCMCU)\n  LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM AD_P_PARAM ON TRIM(AD_P_PARAM.OBJ_CD) = TRIM(SITE_TYPE.SITE_TYPE_CD) AND PARAM_CLASS_CD = 'LSV_TYPE_SITE'\n\n  LEFT JOIN (select distinct ABMCU from F0101 where ABAT1 in ('ST','KT','D','AD')) F0101 ON TRIM(F0101.ABMCU)=TRIM(F0006.MCMCU)\n  LEFT JOIN F0101 F0101_TIER ON F0101_TIER.ABAN8 = TRIM(F0006.MCAN8)\n  LEFT JOIN F0005 F0005_SITE_GUARDSHIP_NAME ON TRIM(F0005_SITE_GUARDSHIP_NAME.DRKY) = F0006.MCRP05 AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRSY) = '00' AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRRT) = '05' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_PROPRE_NBR_PL ON TRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRKY) = F0006.MCRP02 AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRRT) = '02' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NEGOCE_NBR_PL ON TRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRKY) = F0006.MCRP03 AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRRT) = '03' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NBR_PL ON TRIM(F0005_CAPACITY_NBR_PL.DRKY) = F0006.MCRP04 AND RTRIM(F0005_CAPACITY_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NBR_PL.DRRT) = '04' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n)\nselect\nSITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG,COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL, EFFECTIVE_FROM, LDTS, RSCR,\nsha2_binary(to_variant(ARRAY_CONSTRUCT(SITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG, COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL)),512) as HASHDIFF\nfrom source_data\n),row_rank_1 AS (\n    SELECT rr.\"SITE_CUSTOMER_LINK_KEY\", rr.\"SITE_KEY\", rr.\"CUSTOMER_KEY\", rr.\"LDTS\", rr.\"RSCR\",\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.\"SITE_CUSTOMER_LINK_KEY\"\n               ORDER BY rr.\"LDTS\"\n           ) AS row_number\n    FROM __dbt__cte__dwh_site_tmp AS rr\n    WHERE rr.\"SITE_CUSTOMER_LINK_KEY\" IS NOT NULL\n    AND rr.\"SITE_KEY\" IS NOT NULL\n    AND rr.\"CUSTOMER_KEY\" IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.\"SITE_CUSTOMER_LINK_KEY\", a.\"SITE_KEY\", a.\"CUSTOMER_KEY\", a.\"LDTS\", a.\"RSCR\"\n    FROM row_rank_1 AS a\n    LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_SITE_SCH.dwh_site_customer_link AS d\n    ON a.\"SITE_CUSTOMER_LINK_KEY\" = d.\"SITE_CUSTOMER_LINK_KEY\"\n    WHERE d.\"SITE_CUSTOMER_LINK_KEY\" IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_site_tmp", "sql": " __dbt__cte__dwh_site_tmp as (\nWITH\n    \nF0006 AS (\n  SELECT \n    F0006_HUB.\"ID\", \"MCMCU\",\n    F0006_S01.\"FD\", \"TD\", \"MCSTYL\", \"MCDC\", \"MCLDM\", \"MCCO\", \"MCAN8\", \"MCAN8O\", \"MCCNTY\", \"MCADDS\", \"MCFMOD\", \"MCDL01\", \"MCDL02\", \"MCDL03\", \"MCDL04\", \"MCRP01\", \"MCRP02\", \"MCRP03\", \"MCRP04\", \"MCRP05\", \"MCRP06\", \"MCRP07\", \"MCRP08\", \"MCRP09\", \"MCRP10\", \"MCRP11\", \"MCRP12\", \"MCRP13\", \"MCRP14\", \"MCRP15\", \"MCRP16\", \"MCRP17\", \"MCRP18\", \"MCRP19\", \"MCRP20\", \"MCRP21\", \"MCRP22\", \"MCRP23\", \"MCRP24\", \"MCRP25\", \"MCRP26\", \"MCRP27\", \"MCRP28\", \"MCRP29\", \"MCRP30\", \"MCTA\", \"MCTXJS\", \"MCTXA1\", \"MCEXR1\", \"MCTC01\", \"MCTC02\", \"MCTC03\", \"MCTC04\", \"MCTC05\", \"MCTC06\", \"MCTC07\", \"MCTC08\", \"MCTC09\", \"MCTC10\", \"MCND01\", \"MCND02\", \"MCND03\", \"MCND04\", \"MCND05\", \"MCND06\", \"MCND07\", \"MCND08\", \"MCND09\", \"MCND10\", \"MCCC01\", \"MCCC02\", \"MCCC03\", \"MCCC04\", \"MCCC05\", \"MCCC06\", \"MCCC07\", \"MCCC08\", \"MCCC09\", \"MCCC10\", \"MCPECC\", \"MCALS\", \"MCISS\", \"MCGLBA\", \"MCALCL\", \"MCLMTH\", \"MCLF\", \"MCOBJ1\", \"MCOBJ2\", \"MCOBJ3\", \"MCSUB1\", \"MCTOU\", \"MCSBLI\", \"MCANPA\", \"MCCT\", \"MCCERT\", \"MCMCUS\", \"MCBTYP\", \"MCPC\", \"MCPCA\", \"MCPCC\", \"MCINTA\", \"MCINTL\", \"MCD1J\", \"MCD2J\", \"MCD3J\", \"MCD4J\", \"MCD5J\", \"MCD6J\", \"MCFPDJ\", \"MCCAC\", \"MCPAC\", \"MCEEO\", \"MCERC\", \"MCUSER\", \"MCPID\", \"MCUPMJ\", \"MCJOBN\", \"MCUPMT\", \"MCBPTP\", \"MCAPSB\", \"MCTSBU\", \"MCRP31\", \"MCRP32\", \"MCRP33\", \"MCRP34\", \"MCRP35\", \"MCRP36\", \"MCRP37\", \"MCRP38\", \"MCRP39\", \"MCRP40\", \"MCRP41\", \"MCRP42\", \"MCRP43\", \"MCRP44\", \"MCRP45\", \"MCRP46\", \"MCRP47\", \"MCRP48\", \"MCRP49\", \"MCRP50\", \"MCAN8GCA1\", \"MCAN8GCA2\", \"MCAN8GCA3\", \"MCAN8GCA4\", \"MCAN8GCA5\", \"MCRMCU1\", \"MCDOCO\", \"MCPCTN\", \"MCCLNU\", \"MCBUCA\", \"MCADJENT\", \"MCUAFL\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_HUB F0006_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_S01 F0006_S01 ON F0006_HUB.ID = F0006_S01.ID\n    where F0006_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0006_S01.ID ORDER BY F0006_S01.FD DESC) = 1 \n),\n    \nF0005 AS (\n  SELECT \n    F0005_HUB.\"ID\", \"DRSY\", \"DRRT\", \"DRKY\",\n    F0005_S01.\"FD\", \"TD\", \"DRDL01\", \"DRDL02\", \"DRSPHD\", \"DRUDCO\", \"DRHRDC\", \"DRUSER\", \"DRPID\", \"DRUPMJ\", \"DRJOBN\", \"DRUPMT\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_HUB F0005_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_S01 F0005_S01 ON F0005_HUB.ID = F0005_S01.ID\n    where F0005_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0005_S01.ID ORDER BY F0005_S01.FD DESC) = 1 \n),\n    \nF0101 AS (\n  SELECT \n    F0101_HUB.\"ID\", \"ABAN8\",\n    F0101_S01.\"FD\", \"TD\", \"ABALKY\", \"ABTAX\", \"ABALPH\", \"ABDC\", \"ABMCU\", \"ABSIC\", \"ABLNGP\", \"ABAT1\", \"ABCM\", \"ABTAXC\", \"ABAT2\", \"ABAT3\", \"ABAT4\", \"ABAT5\", \"ABATP\", \"ABATR\", \"ABATPR\", \"ABAB3\", \"ABATE\", \"ABSBLI\", \"ABEFTB\", \"ABAN81\", \"ABAN82\", \"ABAN83\", \"ABAN84\", \"ABAN86\", \"ABAN85\", \"ABAC01\", \"ABAC02\", \"ABAC03\", \"ABAC04\", \"ABAC05\", \"ABAC06\", \"ABAC07\", \"ABAC08\", \"ABAC09\", \"ABAC10\", \"ABAC11\", \"ABAC12\", \"ABAC13\", \"ABAC14\", \"ABAC15\", \"ABAC16\", \"ABAC17\", \"ABAC18\", \"ABAC19\", \"ABAC20\", \"ABAC21\", \"ABAC22\", \"ABAC23\", \"ABAC24\", \"ABAC25\", \"ABAC26\", \"ABAC27\", \"ABAC28\", \"ABAC29\", \"ABAC30\", \"ABGLBA\", \"ABPTI\", \"ABPDI\", \"ABMSGA\", \"ABRMK\", \"ABTXCT\", \"ABTX2\", \"ABALP1\", \"ABURCD\", \"ABURDT\", \"ABURAT\", \"ABURAB\", \"ABURRF\", \"ABUSER\", \"ABPID\", \"ABUPMJ\", \"ABJOBN\", \"ABUPMT\", \"ABPRGF\", \"ABSCCLTP\", \"ABTICKER\", \"ABEXCHG\", \"ABDUNS\", \"ABCLASS01\", \"ABCLASS02\", \"ABCLASS03\", \"ABCLASS04\", \"ABCLASS05\", \"ABNOE\", \"ABGROWTHR\", \"ABYEARSTAR\", \"ABAEMPGP\", \"ABACTIN\", \"ABREVRNG\", \"ABSYNCS\", \"ABPERRS\", \"ABCAAD\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_HUB F0101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_S01 F0101_S01 ON F0101_HUB.ID = F0101_S01.ID\n    where F0101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0101_S01.ID ORDER BY F0101_S01.FD DESC) = 1 \n),\n\nsite_type as (\n    --select aban8, abat1,abalph,mcrp05,mcrp07,mcmcu from\n    select TRIM(F0006.MCMCU) as MCMCU,\n    CASE WHEN TRIM(F0006.MCMCU) = TRIM(F0006.MCRP05) THEN 'DER'\n         WHEN F0006.MCRP07 = 'SU' THEN 'SU'\n         WHEN F0006.MCRP07 = 'A' THEN 'ACH'\n         WHEN F0006.MCRP07 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'KT' THEN 'DISP'\n         WHEN F0101.ABAT1 = 'D' THEN 'DL'\n         WHEN F0101.ABAT1 = 'AD' THEN 'DF'\n    END as SITE_TYPE_CD --Code du type de site\n    from F0101\n    inner join F0006 on F0101.ABAN8 = F0006.MCAN8\n    where F0101.abat1 in ('D','AD','ST','KT')\n),\n\nsource_data as (\n  select\n    sha2_binary(to_variant(array_construct(TRIM(F0006.MCMCU))),512) as SITE_KEY, --cle technique\n    sha2_binary(to_variant(array_construct(F0006.MCCO)),512) as COMPANY_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(F0006.MCAN8)),512) AS CUSTOMER_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    sha2_binary(to_variant(array_construct(SITE_KEY,COMPANY_KEY)),512) as SITE_COMPANY_LINK_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(SITE_KEY,CUSTOMER_KEY)),512) AS SITE_CUSTOMER_LINK_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    TRIM(F0006.MCMCU)  as SITE_CD, --Magasin - Code\n    F0006.MCDL01 as SITE_NAME, --Libell\u00e9 du site\n    IFF(AD_P_PARAM.PARAM_CLASS_CD = 'LSV_TYPE_SITE', F0101_TIER.ABAT1 , NULL) as TYP_REF, --Typologie du Referentiel tracabilit\u00e9\n    site_type.SITE_TYPE_CD as SITE_TYPE_CD, --Code du type de site*/\n    AD_P_PARAM.OBJ_NAME as SITE_TYPE_NAME, --Libell\u00e9 du type de site\n    AD_P_PARAM.OBJ_CPLT_1 as SITE_PRF_CD,  --Code du site PRF\n    AD_P_PARAM.OBJ_CPLT_2 as SITE_PRF_NAME,  --Libell\u00e9 du site PRF\n    IFF(SITE_TYPE.SITE_TYPE_CD = 'DER', 1 , 0) as DER_FLG, --Flag indiquant que nous sommes sur une DER\n    F0006.MCCO as COMPANY_ID,\n    --company_hub.COMPANY_CD as COMPANY_ID, --Identifiant technique de la soci\u00e9t\u00e9\n    --case when TRIM(F0101_0.ABAT1) in ('D','AD') then F0006.MCAN8 else NULL end  as PARTY_ID, --Identifiant technique du tiers\n    F0006.MCRP05 as SITE_GUARDSHIP_CD, --Code du site de rattachement (DER)\n    F0005_SITE_GUARDSHIP_NAME.DRDL01 as SITE_GUARDSHIP_NAME, --Libell\u00e9 du site de rattachement (DER)\n    F0005_CAPACITY_PROPRE_NBR_PL.DRDL01 as CAPACITY_PROPRE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits propres\n    F0005_CAPACITY_NEGOCE_NBR_PL.DRDL01 as CAPACITY_NEGOCE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits de negoce\n    F0005_CAPACITY_NBR_PL.DRDL01 as CAPACITY_NBR_PL, --Capacit\u00e9 en nombre de palette\n    F0006.FD as EFFECTIVE_FROM, -- Date effective  \n    '2023-05-12 09:34:26'::DATETIME as LDTS, -- Date de chargement\n    'JDE' as RSCR -- Donnees JDE\n  from F0006\n\n  inner join SITE_TYPE on TRIM(SITE_TYPE.MCMCU) = TRIM(F0006.MCMCU)\n  LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM AD_P_PARAM ON TRIM(AD_P_PARAM.OBJ_CD) = TRIM(SITE_TYPE.SITE_TYPE_CD) AND PARAM_CLASS_CD = 'LSV_TYPE_SITE'\n\n  LEFT JOIN (select distinct ABMCU from F0101 where ABAT1 in ('ST','KT','D','AD')) F0101 ON TRIM(F0101.ABMCU)=TRIM(F0006.MCMCU)\n  LEFT JOIN F0101 F0101_TIER ON F0101_TIER.ABAN8 = TRIM(F0006.MCAN8)\n  LEFT JOIN F0005 F0005_SITE_GUARDSHIP_NAME ON TRIM(F0005_SITE_GUARDSHIP_NAME.DRKY) = F0006.MCRP05 AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRSY) = '00' AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRRT) = '05' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_PROPRE_NBR_PL ON TRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRKY) = F0006.MCRP02 AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRRT) = '02' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NEGOCE_NBR_PL ON TRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRKY) = F0006.MCRP03 AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRRT) = '03' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NBR_PL ON TRIM(F0005_CAPACITY_NBR_PL.DRKY) = F0006.MCRP04 AND RTRIM(F0005_CAPACITY_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NBR_PL.DRRT) = '04' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n)\nselect\nSITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG,COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL, EFFECTIVE_FROM, LDTS, RSCR,\nsha2_binary(to_variant(ARRAY_CONSTRUCT(SITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG, COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL)),512) as HASHDIFF\nfrom source_data\n)"}]}, "model.dbt_grizzly.dwh_site_hub": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_SITE_SCH", "name": "dwh_site_hub", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\site_sch\\01_business_vault\\dwh_site_hub.sql", "original_file_path": "models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_hub.sql", "unique_id": "model.dbt_grizzly.dwh_site_hub", "fqn": ["dbt_grizzly", "20_silver_db", "site_sch", "01_business_vault", "dwh_site_hub"], "alias": "dwh_site_hub", "checksum": {"name": "sha256", "checksum": "db3dc23a2a41ea6e4f5222e76b3c16d7d2f567390d3341044289f5eb77b8f421"}, "config": {"enabled": true, "alias": null, "schema": "DWH_SITE_SCH", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.Site", "business_vault"], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.Site", "business_vault"], "description": "Hub table of Site entity", "columns": {"SITE_KEY": {"name": "SITE_KEY", "description": "Hash of the 2 natural keys", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_CD": {"name": "SITE_CD", "description": "Magasin - Code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LDTS": {"name": "LDTS", "description": "Date de chargement", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RSCR": {"name": "RSCR", "description": "Donnees JDE", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_hub.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["business_vault"], "schema": "DWH_SITE_SCH", "materialized": "incremental"}, "created_at": 1683884073.0474405, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_SITE_SCH.dwh_site_hub", "raw_code": "{%- set source_model = \"dwh_site_tmp\" -%}\r\n{%- set src_pk = \"SITE_KEY\" -%}\r\n{%- set src_nk = [\"SITE_CD\"] -%}\r\n{%- set src_ldts = \"LDTS\" -%}\r\n{%- set src_source = \"RSCR\" -%}\r\n\r\n{{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\r\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["dwh_site_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.hub"], "nodes": ["model.dbt_grizzly.dwh_site_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_hub.sql", "compiled": true, "compiled_code": "-- Generated by dbtvault.\n\nWITH  __dbt__cte__dwh_site_tmp as (\nWITH\n    \nF0006 AS (\n  SELECT \n    F0006_HUB.\"ID\", \"MCMCU\",\n    F0006_S01.\"FD\", \"TD\", \"MCSTYL\", \"MCDC\", \"MCLDM\", \"MCCO\", \"MCAN8\", \"MCAN8O\", \"MCCNTY\", \"MCADDS\", \"MCFMOD\", \"MCDL01\", \"MCDL02\", \"MCDL03\", \"MCDL04\", \"MCRP01\", \"MCRP02\", \"MCRP03\", \"MCRP04\", \"MCRP05\", \"MCRP06\", \"MCRP07\", \"MCRP08\", \"MCRP09\", \"MCRP10\", \"MCRP11\", \"MCRP12\", \"MCRP13\", \"MCRP14\", \"MCRP15\", \"MCRP16\", \"MCRP17\", \"MCRP18\", \"MCRP19\", \"MCRP20\", \"MCRP21\", \"MCRP22\", \"MCRP23\", \"MCRP24\", \"MCRP25\", \"MCRP26\", \"MCRP27\", \"MCRP28\", \"MCRP29\", \"MCRP30\", \"MCTA\", \"MCTXJS\", \"MCTXA1\", \"MCEXR1\", \"MCTC01\", \"MCTC02\", \"MCTC03\", \"MCTC04\", \"MCTC05\", \"MCTC06\", \"MCTC07\", \"MCTC08\", \"MCTC09\", \"MCTC10\", \"MCND01\", \"MCND02\", \"MCND03\", \"MCND04\", \"MCND05\", \"MCND06\", \"MCND07\", \"MCND08\", \"MCND09\", \"MCND10\", \"MCCC01\", \"MCCC02\", \"MCCC03\", \"MCCC04\", \"MCCC05\", \"MCCC06\", \"MCCC07\", \"MCCC08\", \"MCCC09\", \"MCCC10\", \"MCPECC\", \"MCALS\", \"MCISS\", \"MCGLBA\", \"MCALCL\", \"MCLMTH\", \"MCLF\", \"MCOBJ1\", \"MCOBJ2\", \"MCOBJ3\", \"MCSUB1\", \"MCTOU\", \"MCSBLI\", \"MCANPA\", \"MCCT\", \"MCCERT\", \"MCMCUS\", \"MCBTYP\", \"MCPC\", \"MCPCA\", \"MCPCC\", \"MCINTA\", \"MCINTL\", \"MCD1J\", \"MCD2J\", \"MCD3J\", \"MCD4J\", \"MCD5J\", \"MCD6J\", \"MCFPDJ\", \"MCCAC\", \"MCPAC\", \"MCEEO\", \"MCERC\", \"MCUSER\", \"MCPID\", \"MCUPMJ\", \"MCJOBN\", \"MCUPMT\", \"MCBPTP\", \"MCAPSB\", \"MCTSBU\", \"MCRP31\", \"MCRP32\", \"MCRP33\", \"MCRP34\", \"MCRP35\", \"MCRP36\", \"MCRP37\", \"MCRP38\", \"MCRP39\", \"MCRP40\", \"MCRP41\", \"MCRP42\", \"MCRP43\", \"MCRP44\", \"MCRP45\", \"MCRP46\", \"MCRP47\", \"MCRP48\", \"MCRP49\", \"MCRP50\", \"MCAN8GCA1\", \"MCAN8GCA2\", \"MCAN8GCA3\", \"MCAN8GCA4\", \"MCAN8GCA5\", \"MCRMCU1\", \"MCDOCO\", \"MCPCTN\", \"MCCLNU\", \"MCBUCA\", \"MCADJENT\", \"MCUAFL\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_HUB F0006_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_S01 F0006_S01 ON F0006_HUB.ID = F0006_S01.ID\n    where F0006_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0006_S01.ID ORDER BY F0006_S01.FD DESC) = 1 \n),\n    \nF0005 AS (\n  SELECT \n    F0005_HUB.\"ID\", \"DRSY\", \"DRRT\", \"DRKY\",\n    F0005_S01.\"FD\", \"TD\", \"DRDL01\", \"DRDL02\", \"DRSPHD\", \"DRUDCO\", \"DRHRDC\", \"DRUSER\", \"DRPID\", \"DRUPMJ\", \"DRJOBN\", \"DRUPMT\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_HUB F0005_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_S01 F0005_S01 ON F0005_HUB.ID = F0005_S01.ID\n    where F0005_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0005_S01.ID ORDER BY F0005_S01.FD DESC) = 1 \n),\n    \nF0101 AS (\n  SELECT \n    F0101_HUB.\"ID\", \"ABAN8\",\n    F0101_S01.\"FD\", \"TD\", \"ABALKY\", \"ABTAX\", \"ABALPH\", \"ABDC\", \"ABMCU\", \"ABSIC\", \"ABLNGP\", \"ABAT1\", \"ABCM\", \"ABTAXC\", \"ABAT2\", \"ABAT3\", \"ABAT4\", \"ABAT5\", \"ABATP\", \"ABATR\", \"ABATPR\", \"ABAB3\", \"ABATE\", \"ABSBLI\", \"ABEFTB\", \"ABAN81\", \"ABAN82\", \"ABAN83\", \"ABAN84\", \"ABAN86\", \"ABAN85\", \"ABAC01\", \"ABAC02\", \"ABAC03\", \"ABAC04\", \"ABAC05\", \"ABAC06\", \"ABAC07\", \"ABAC08\", \"ABAC09\", \"ABAC10\", \"ABAC11\", \"ABAC12\", \"ABAC13\", \"ABAC14\", \"ABAC15\", \"ABAC16\", \"ABAC17\", \"ABAC18\", \"ABAC19\", \"ABAC20\", \"ABAC21\", \"ABAC22\", \"ABAC23\", \"ABAC24\", \"ABAC25\", \"ABAC26\", \"ABAC27\", \"ABAC28\", \"ABAC29\", \"ABAC30\", \"ABGLBA\", \"ABPTI\", \"ABPDI\", \"ABMSGA\", \"ABRMK\", \"ABTXCT\", \"ABTX2\", \"ABALP1\", \"ABURCD\", \"ABURDT\", \"ABURAT\", \"ABURAB\", \"ABURRF\", \"ABUSER\", \"ABPID\", \"ABUPMJ\", \"ABJOBN\", \"ABUPMT\", \"ABPRGF\", \"ABSCCLTP\", \"ABTICKER\", \"ABEXCHG\", \"ABDUNS\", \"ABCLASS01\", \"ABCLASS02\", \"ABCLASS03\", \"ABCLASS04\", \"ABCLASS05\", \"ABNOE\", \"ABGROWTHR\", \"ABYEARSTAR\", \"ABAEMPGP\", \"ABACTIN\", \"ABREVRNG\", \"ABSYNCS\", \"ABPERRS\", \"ABCAAD\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_HUB F0101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_S01 F0101_S01 ON F0101_HUB.ID = F0101_S01.ID\n    where F0101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0101_S01.ID ORDER BY F0101_S01.FD DESC) = 1 \n),\n\nsite_type as (\n    --select aban8, abat1,abalph,mcrp05,mcrp07,mcmcu from\n    select TRIM(F0006.MCMCU) as MCMCU,\n    CASE WHEN TRIM(F0006.MCMCU) = TRIM(F0006.MCRP05) THEN 'DER'\n         WHEN F0006.MCRP07 = 'SU' THEN 'SU'\n         WHEN F0006.MCRP07 = 'A' THEN 'ACH'\n         WHEN F0006.MCRP07 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'KT' THEN 'DISP'\n         WHEN F0101.ABAT1 = 'D' THEN 'DL'\n         WHEN F0101.ABAT1 = 'AD' THEN 'DF'\n    END as SITE_TYPE_CD --Code du type de site\n    from F0101\n    inner join F0006 on F0101.ABAN8 = F0006.MCAN8\n    where F0101.abat1 in ('D','AD','ST','KT')\n),\n\nsource_data as (\n  select\n    sha2_binary(to_variant(array_construct(TRIM(F0006.MCMCU))),512) as SITE_KEY, --cle technique\n    sha2_binary(to_variant(array_construct(F0006.MCCO)),512) as COMPANY_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(F0006.MCAN8)),512) AS CUSTOMER_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    sha2_binary(to_variant(array_construct(SITE_KEY,COMPANY_KEY)),512) as SITE_COMPANY_LINK_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(SITE_KEY,CUSTOMER_KEY)),512) AS SITE_CUSTOMER_LINK_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    TRIM(F0006.MCMCU)  as SITE_CD, --Magasin - Code\n    F0006.MCDL01 as SITE_NAME, --Libell\u00e9 du site\n    IFF(AD_P_PARAM.PARAM_CLASS_CD = 'LSV_TYPE_SITE', F0101_TIER.ABAT1 , NULL) as TYP_REF, --Typologie du Referentiel tracabilit\u00e9\n    site_type.SITE_TYPE_CD as SITE_TYPE_CD, --Code du type de site*/\n    AD_P_PARAM.OBJ_NAME as SITE_TYPE_NAME, --Libell\u00e9 du type de site\n    AD_P_PARAM.OBJ_CPLT_1 as SITE_PRF_CD,  --Code du site PRF\n    AD_P_PARAM.OBJ_CPLT_2 as SITE_PRF_NAME,  --Libell\u00e9 du site PRF\n    IFF(SITE_TYPE.SITE_TYPE_CD = 'DER', 1 , 0) as DER_FLG, --Flag indiquant que nous sommes sur une DER\n    F0006.MCCO as COMPANY_ID,\n    --company_hub.COMPANY_CD as COMPANY_ID, --Identifiant technique de la soci\u00e9t\u00e9\n    --case when TRIM(F0101_0.ABAT1) in ('D','AD') then F0006.MCAN8 else NULL end  as PARTY_ID, --Identifiant technique du tiers\n    F0006.MCRP05 as SITE_GUARDSHIP_CD, --Code du site de rattachement (DER)\n    F0005_SITE_GUARDSHIP_NAME.DRDL01 as SITE_GUARDSHIP_NAME, --Libell\u00e9 du site de rattachement (DER)\n    F0005_CAPACITY_PROPRE_NBR_PL.DRDL01 as CAPACITY_PROPRE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits propres\n    F0005_CAPACITY_NEGOCE_NBR_PL.DRDL01 as CAPACITY_NEGOCE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits de negoce\n    F0005_CAPACITY_NBR_PL.DRDL01 as CAPACITY_NBR_PL, --Capacit\u00e9 en nombre de palette\n    F0006.FD as EFFECTIVE_FROM, -- Date effective  \n    '2023-05-12 09:34:26'::DATETIME as LDTS, -- Date de chargement\n    'JDE' as RSCR -- Donnees JDE\n  from F0006\n\n  inner join SITE_TYPE on TRIM(SITE_TYPE.MCMCU) = TRIM(F0006.MCMCU)\n  LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM AD_P_PARAM ON TRIM(AD_P_PARAM.OBJ_CD) = TRIM(SITE_TYPE.SITE_TYPE_CD) AND PARAM_CLASS_CD = 'LSV_TYPE_SITE'\n\n  LEFT JOIN (select distinct ABMCU from F0101 where ABAT1 in ('ST','KT','D','AD')) F0101 ON TRIM(F0101.ABMCU)=TRIM(F0006.MCMCU)\n  LEFT JOIN F0101 F0101_TIER ON F0101_TIER.ABAN8 = TRIM(F0006.MCAN8)\n  LEFT JOIN F0005 F0005_SITE_GUARDSHIP_NAME ON TRIM(F0005_SITE_GUARDSHIP_NAME.DRKY) = F0006.MCRP05 AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRSY) = '00' AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRRT) = '05' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_PROPRE_NBR_PL ON TRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRKY) = F0006.MCRP02 AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRRT) = '02' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NEGOCE_NBR_PL ON TRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRKY) = F0006.MCRP03 AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRRT) = '03' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NBR_PL ON TRIM(F0005_CAPACITY_NBR_PL.DRKY) = F0006.MCRP04 AND RTRIM(F0005_CAPACITY_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NBR_PL.DRRT) = '04' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n)\nselect\nSITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG,COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL, EFFECTIVE_FROM, LDTS, RSCR,\nsha2_binary(to_variant(ARRAY_CONSTRUCT(SITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG, COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL)),512) as HASHDIFF\nfrom source_data\n),row_rank_1 AS (\n    SELECT rr.\"SITE_KEY\", rr.\"SITE_CD\", rr.\"LDTS\", rr.\"RSCR\",\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.\"SITE_KEY\"\n               ORDER BY rr.\"LDTS\"\n           ) AS row_number\n    FROM __dbt__cte__dwh_site_tmp AS rr\n    WHERE rr.\"SITE_KEY\" IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.\"SITE_KEY\", a.\"SITE_CD\", a.\"LDTS\", a.\"RSCR\"\n    FROM row_rank_1 AS a\n    LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_SITE_SCH.dwh_site_hub AS d\n    ON a.\"SITE_KEY\" = d.\"SITE_KEY\"\n    WHERE d.\"SITE_KEY\" IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_site_tmp", "sql": " __dbt__cte__dwh_site_tmp as (\nWITH\n    \nF0006 AS (\n  SELECT \n    F0006_HUB.\"ID\", \"MCMCU\",\n    F0006_S01.\"FD\", \"TD\", \"MCSTYL\", \"MCDC\", \"MCLDM\", \"MCCO\", \"MCAN8\", \"MCAN8O\", \"MCCNTY\", \"MCADDS\", \"MCFMOD\", \"MCDL01\", \"MCDL02\", \"MCDL03\", \"MCDL04\", \"MCRP01\", \"MCRP02\", \"MCRP03\", \"MCRP04\", \"MCRP05\", \"MCRP06\", \"MCRP07\", \"MCRP08\", \"MCRP09\", \"MCRP10\", \"MCRP11\", \"MCRP12\", \"MCRP13\", \"MCRP14\", \"MCRP15\", \"MCRP16\", \"MCRP17\", \"MCRP18\", \"MCRP19\", \"MCRP20\", \"MCRP21\", \"MCRP22\", \"MCRP23\", \"MCRP24\", \"MCRP25\", \"MCRP26\", \"MCRP27\", \"MCRP28\", \"MCRP29\", \"MCRP30\", \"MCTA\", \"MCTXJS\", \"MCTXA1\", \"MCEXR1\", \"MCTC01\", \"MCTC02\", \"MCTC03\", \"MCTC04\", \"MCTC05\", \"MCTC06\", \"MCTC07\", \"MCTC08\", \"MCTC09\", \"MCTC10\", \"MCND01\", \"MCND02\", \"MCND03\", \"MCND04\", \"MCND05\", \"MCND06\", \"MCND07\", \"MCND08\", \"MCND09\", \"MCND10\", \"MCCC01\", \"MCCC02\", \"MCCC03\", \"MCCC04\", \"MCCC05\", \"MCCC06\", \"MCCC07\", \"MCCC08\", \"MCCC09\", \"MCCC10\", \"MCPECC\", \"MCALS\", \"MCISS\", \"MCGLBA\", \"MCALCL\", \"MCLMTH\", \"MCLF\", \"MCOBJ1\", \"MCOBJ2\", \"MCOBJ3\", \"MCSUB1\", \"MCTOU\", \"MCSBLI\", \"MCANPA\", \"MCCT\", \"MCCERT\", \"MCMCUS\", \"MCBTYP\", \"MCPC\", \"MCPCA\", \"MCPCC\", \"MCINTA\", \"MCINTL\", \"MCD1J\", \"MCD2J\", \"MCD3J\", \"MCD4J\", \"MCD5J\", \"MCD6J\", \"MCFPDJ\", \"MCCAC\", \"MCPAC\", \"MCEEO\", \"MCERC\", \"MCUSER\", \"MCPID\", \"MCUPMJ\", \"MCJOBN\", \"MCUPMT\", \"MCBPTP\", \"MCAPSB\", \"MCTSBU\", \"MCRP31\", \"MCRP32\", \"MCRP33\", \"MCRP34\", \"MCRP35\", \"MCRP36\", \"MCRP37\", \"MCRP38\", \"MCRP39\", \"MCRP40\", \"MCRP41\", \"MCRP42\", \"MCRP43\", \"MCRP44\", \"MCRP45\", \"MCRP46\", \"MCRP47\", \"MCRP48\", \"MCRP49\", \"MCRP50\", \"MCAN8GCA1\", \"MCAN8GCA2\", \"MCAN8GCA3\", \"MCAN8GCA4\", \"MCAN8GCA5\", \"MCRMCU1\", \"MCDOCO\", \"MCPCTN\", \"MCCLNU\", \"MCBUCA\", \"MCADJENT\", \"MCUAFL\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_HUB F0006_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_S01 F0006_S01 ON F0006_HUB.ID = F0006_S01.ID\n    where F0006_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0006_S01.ID ORDER BY F0006_S01.FD DESC) = 1 \n),\n    \nF0005 AS (\n  SELECT \n    F0005_HUB.\"ID\", \"DRSY\", \"DRRT\", \"DRKY\",\n    F0005_S01.\"FD\", \"TD\", \"DRDL01\", \"DRDL02\", \"DRSPHD\", \"DRUDCO\", \"DRHRDC\", \"DRUSER\", \"DRPID\", \"DRUPMJ\", \"DRJOBN\", \"DRUPMT\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_HUB F0005_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_S01 F0005_S01 ON F0005_HUB.ID = F0005_S01.ID\n    where F0005_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0005_S01.ID ORDER BY F0005_S01.FD DESC) = 1 \n),\n    \nF0101 AS (\n  SELECT \n    F0101_HUB.\"ID\", \"ABAN8\",\n    F0101_S01.\"FD\", \"TD\", \"ABALKY\", \"ABTAX\", \"ABALPH\", \"ABDC\", \"ABMCU\", \"ABSIC\", \"ABLNGP\", \"ABAT1\", \"ABCM\", \"ABTAXC\", \"ABAT2\", \"ABAT3\", \"ABAT4\", \"ABAT5\", \"ABATP\", \"ABATR\", \"ABATPR\", \"ABAB3\", \"ABATE\", \"ABSBLI\", \"ABEFTB\", \"ABAN81\", \"ABAN82\", \"ABAN83\", \"ABAN84\", \"ABAN86\", \"ABAN85\", \"ABAC01\", \"ABAC02\", \"ABAC03\", \"ABAC04\", \"ABAC05\", \"ABAC06\", \"ABAC07\", \"ABAC08\", \"ABAC09\", \"ABAC10\", \"ABAC11\", \"ABAC12\", \"ABAC13\", \"ABAC14\", \"ABAC15\", \"ABAC16\", \"ABAC17\", \"ABAC18\", \"ABAC19\", \"ABAC20\", \"ABAC21\", \"ABAC22\", \"ABAC23\", \"ABAC24\", \"ABAC25\", \"ABAC26\", \"ABAC27\", \"ABAC28\", \"ABAC29\", \"ABAC30\", \"ABGLBA\", \"ABPTI\", \"ABPDI\", \"ABMSGA\", \"ABRMK\", \"ABTXCT\", \"ABTX2\", \"ABALP1\", \"ABURCD\", \"ABURDT\", \"ABURAT\", \"ABURAB\", \"ABURRF\", \"ABUSER\", \"ABPID\", \"ABUPMJ\", \"ABJOBN\", \"ABUPMT\", \"ABPRGF\", \"ABSCCLTP\", \"ABTICKER\", \"ABEXCHG\", \"ABDUNS\", \"ABCLASS01\", \"ABCLASS02\", \"ABCLASS03\", \"ABCLASS04\", \"ABCLASS05\", \"ABNOE\", \"ABGROWTHR\", \"ABYEARSTAR\", \"ABAEMPGP\", \"ABACTIN\", \"ABREVRNG\", \"ABSYNCS\", \"ABPERRS\", \"ABCAAD\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_HUB F0101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_S01 F0101_S01 ON F0101_HUB.ID = F0101_S01.ID\n    where F0101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0101_S01.ID ORDER BY F0101_S01.FD DESC) = 1 \n),\n\nsite_type as (\n    --select aban8, abat1,abalph,mcrp05,mcrp07,mcmcu from\n    select TRIM(F0006.MCMCU) as MCMCU,\n    CASE WHEN TRIM(F0006.MCMCU) = TRIM(F0006.MCRP05) THEN 'DER'\n         WHEN F0006.MCRP07 = 'SU' THEN 'SU'\n         WHEN F0006.MCRP07 = 'A' THEN 'ACH'\n         WHEN F0006.MCRP07 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'KT' THEN 'DISP'\n         WHEN F0101.ABAT1 = 'D' THEN 'DL'\n         WHEN F0101.ABAT1 = 'AD' THEN 'DF'\n    END as SITE_TYPE_CD --Code du type de site\n    from F0101\n    inner join F0006 on F0101.ABAN8 = F0006.MCAN8\n    where F0101.abat1 in ('D','AD','ST','KT')\n),\n\nsource_data as (\n  select\n    sha2_binary(to_variant(array_construct(TRIM(F0006.MCMCU))),512) as SITE_KEY, --cle technique\n    sha2_binary(to_variant(array_construct(F0006.MCCO)),512) as COMPANY_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(F0006.MCAN8)),512) AS CUSTOMER_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    sha2_binary(to_variant(array_construct(SITE_KEY,COMPANY_KEY)),512) as SITE_COMPANY_LINK_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(SITE_KEY,CUSTOMER_KEY)),512) AS SITE_CUSTOMER_LINK_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    TRIM(F0006.MCMCU)  as SITE_CD, --Magasin - Code\n    F0006.MCDL01 as SITE_NAME, --Libell\u00e9 du site\n    IFF(AD_P_PARAM.PARAM_CLASS_CD = 'LSV_TYPE_SITE', F0101_TIER.ABAT1 , NULL) as TYP_REF, --Typologie du Referentiel tracabilit\u00e9\n    site_type.SITE_TYPE_CD as SITE_TYPE_CD, --Code du type de site*/\n    AD_P_PARAM.OBJ_NAME as SITE_TYPE_NAME, --Libell\u00e9 du type de site\n    AD_P_PARAM.OBJ_CPLT_1 as SITE_PRF_CD,  --Code du site PRF\n    AD_P_PARAM.OBJ_CPLT_2 as SITE_PRF_NAME,  --Libell\u00e9 du site PRF\n    IFF(SITE_TYPE.SITE_TYPE_CD = 'DER', 1 , 0) as DER_FLG, --Flag indiquant que nous sommes sur une DER\n    F0006.MCCO as COMPANY_ID,\n    --company_hub.COMPANY_CD as COMPANY_ID, --Identifiant technique de la soci\u00e9t\u00e9\n    --case when TRIM(F0101_0.ABAT1) in ('D','AD') then F0006.MCAN8 else NULL end  as PARTY_ID, --Identifiant technique du tiers\n    F0006.MCRP05 as SITE_GUARDSHIP_CD, --Code du site de rattachement (DER)\n    F0005_SITE_GUARDSHIP_NAME.DRDL01 as SITE_GUARDSHIP_NAME, --Libell\u00e9 du site de rattachement (DER)\n    F0005_CAPACITY_PROPRE_NBR_PL.DRDL01 as CAPACITY_PROPRE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits propres\n    F0005_CAPACITY_NEGOCE_NBR_PL.DRDL01 as CAPACITY_NEGOCE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits de negoce\n    F0005_CAPACITY_NBR_PL.DRDL01 as CAPACITY_NBR_PL, --Capacit\u00e9 en nombre de palette\n    F0006.FD as EFFECTIVE_FROM, -- Date effective  \n    '2023-05-12 09:34:26'::DATETIME as LDTS, -- Date de chargement\n    'JDE' as RSCR -- Donnees JDE\n  from F0006\n\n  inner join SITE_TYPE on TRIM(SITE_TYPE.MCMCU) = TRIM(F0006.MCMCU)\n  LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM AD_P_PARAM ON TRIM(AD_P_PARAM.OBJ_CD) = TRIM(SITE_TYPE.SITE_TYPE_CD) AND PARAM_CLASS_CD = 'LSV_TYPE_SITE'\n\n  LEFT JOIN (select distinct ABMCU from F0101 where ABAT1 in ('ST','KT','D','AD')) F0101 ON TRIM(F0101.ABMCU)=TRIM(F0006.MCMCU)\n  LEFT JOIN F0101 F0101_TIER ON F0101_TIER.ABAN8 = TRIM(F0006.MCAN8)\n  LEFT JOIN F0005 F0005_SITE_GUARDSHIP_NAME ON TRIM(F0005_SITE_GUARDSHIP_NAME.DRKY) = F0006.MCRP05 AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRSY) = '00' AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRRT) = '05' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_PROPRE_NBR_PL ON TRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRKY) = F0006.MCRP02 AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRRT) = '02' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NEGOCE_NBR_PL ON TRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRKY) = F0006.MCRP03 AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRRT) = '03' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NBR_PL ON TRIM(F0005_CAPACITY_NBR_PL.DRKY) = F0006.MCRP04 AND RTRIM(F0005_CAPACITY_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NBR_PL.DRRT) = '04' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n)\nselect\nSITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG,COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL, EFFECTIVE_FROM, LDTS, RSCR,\nsha2_binary(to_variant(ARRAY_CONSTRUCT(SITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG, COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL)),512) as HASHDIFF\nfrom source_data\n)"}]}, "model.dbt_grizzly.dwh_site_sat": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_SITE_SCH", "name": "dwh_site_sat", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\site_sch\\01_business_vault\\dwh_site_sat.sql", "original_file_path": "models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_sat.sql", "unique_id": "model.dbt_grizzly.dwh_site_sat", "fqn": ["dbt_grizzly", "20_silver_db", "site_sch", "01_business_vault", "dwh_site_sat"], "alias": "dwh_site_sat", "checksum": {"name": "sha256", "checksum": "5b456110b600f32906f7202da56334d1d92b5dedd06ad031612ee01044253110"}, "config": {"enabled": true, "alias": null, "schema": "DWH_SITE_SCH", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.Site", "business_vault"], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.Site", "business_vault"], "description": "Sat table of Site entity", "columns": {"SITE_KEY": {"name": "SITE_KEY", "description": "Primary key hashed from the SITE_CD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_CD": {"name": "SITE_CD", "description": "Magasin - Code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_NAME": {"name": "SITE_NAME", "description": "Libell\u00e9 du site", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYP_REF": {"name": "TYP_REF", "description": "Typologie du Referentiel tracabilit\u00e9", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_TYPE_CD": {"name": "SITE_TYPE_CD", "description": "Code du type de site", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_TYPE_NAME": {"name": "SITE_TYPE_NAME", "description": "Libell\u00e9 du type de site", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_PRF_CD": {"name": "SITE_PRF_CD", "description": "Code du site PRF", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_PRF_NAME": {"name": "SITE_PRF_NAME", "description": "Libell\u00e9 du site PRF", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DER_FLG": {"name": "DER_FLG", "description": "Flag indiquant que nous sommes sur une DER", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPANY_ID": {"name": "COMPANY_ID", "description": "Identifiant technique de la soci\u00e9t\u00e9", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_GUARDSHIP_CD": {"name": "SITE_GUARDSHIP_CD", "description": "Code du site de rattachement (DER)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_GUARDSHIP_NAME": {"name": "SITE_GUARDSHIP_NAME", "description": "Libell\u00e9 du site de rattachement (DER)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CAPACITY_PROPRE_NBR_PL": {"name": "CAPACITY_PROPRE_NBR_PL", "description": "Capacit\u00e9 en nombre de palette pour les produits propres", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CAPACITY_NEGOCE_NBR_PL": {"name": "CAPACITY_NEGOCE_NBR_PL", "description": "Capacit\u00e9 en nombre de palette pour les produits de negoce", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CAPACITY_NBR_PL": {"name": "CAPACITY_NBR_PL", "description": "Capacit\u00e9 en nombre de palette", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EFFECTIVE_FROM": {"name": "EFFECTIVE_FROM", "description": "Date effective", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LDTS": {"name": "LDTS", "description": "Date de chargement", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RSCR": {"name": "RSCR", "description": "Donnees JDE", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_sat.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["business_vault"], "schema": "DWH_SITE_SCH", "materialized": "incremental"}, "created_at": 1683884073.0882573, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_SITE_SCH.dwh_site_sat", "raw_code": "{%- set source_model = \"dwh_site_tmp\" -%}\r\n{%- set src_pk = \"SITE_KEY\" -%}\r\n{%- set src_hashdiff = \"HASHDIFF\" -%}\r\n{%- set src_payload = [\"SITE_CD\",\"SITE_NAME\",\"TYP_REF\",\"SITE_TYPE_CD\",\"SITE_TYPE_NAME\",\"SITE_PRF_CD\",\"SITE_PRF_NAME\",\"DER_FLG\",\"COMPANY_ID\",\"SITE_GUARDSHIP_CD\",\"SITE_GUARDSHIP_NAME\",\"CAPACITY_PROPRE_NBR_PL\",\"CAPACITY_NEGOCE_NBR_PL\",\"CAPACITY_NBR_PL\"] -%}\r\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\r\n{%- set src_ldts = \"LDTS\" -%}\r\n{%- set src_source = \"RSCR\" -%}\r\n\r\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                src_payload=src_payload, src_eff=src_eff,\r\n                src_ldts=src_ldts, src_source=src_source,\r\n                source_model=source_model) }}", "language": "sql", "refs": [["dwh_site_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.sat"], "nodes": ["model.dbt_grizzly.dwh_site_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_sat.sql", "compiled": true, "compiled_code": "-- Generated by dbtvault.\n\n    \n\nWITH  __dbt__cte__dwh_site_tmp as (\nWITH\n    \nF0006 AS (\n  SELECT \n    F0006_HUB.\"ID\", \"MCMCU\",\n    F0006_S01.\"FD\", \"TD\", \"MCSTYL\", \"MCDC\", \"MCLDM\", \"MCCO\", \"MCAN8\", \"MCAN8O\", \"MCCNTY\", \"MCADDS\", \"MCFMOD\", \"MCDL01\", \"MCDL02\", \"MCDL03\", \"MCDL04\", \"MCRP01\", \"MCRP02\", \"MCRP03\", \"MCRP04\", \"MCRP05\", \"MCRP06\", \"MCRP07\", \"MCRP08\", \"MCRP09\", \"MCRP10\", \"MCRP11\", \"MCRP12\", \"MCRP13\", \"MCRP14\", \"MCRP15\", \"MCRP16\", \"MCRP17\", \"MCRP18\", \"MCRP19\", \"MCRP20\", \"MCRP21\", \"MCRP22\", \"MCRP23\", \"MCRP24\", \"MCRP25\", \"MCRP26\", \"MCRP27\", \"MCRP28\", \"MCRP29\", \"MCRP30\", \"MCTA\", \"MCTXJS\", \"MCTXA1\", \"MCEXR1\", \"MCTC01\", \"MCTC02\", \"MCTC03\", \"MCTC04\", \"MCTC05\", \"MCTC06\", \"MCTC07\", \"MCTC08\", \"MCTC09\", \"MCTC10\", \"MCND01\", \"MCND02\", \"MCND03\", \"MCND04\", \"MCND05\", \"MCND06\", \"MCND07\", \"MCND08\", \"MCND09\", \"MCND10\", \"MCCC01\", \"MCCC02\", \"MCCC03\", \"MCCC04\", \"MCCC05\", \"MCCC06\", \"MCCC07\", \"MCCC08\", \"MCCC09\", \"MCCC10\", \"MCPECC\", \"MCALS\", \"MCISS\", \"MCGLBA\", \"MCALCL\", \"MCLMTH\", \"MCLF\", \"MCOBJ1\", \"MCOBJ2\", \"MCOBJ3\", \"MCSUB1\", \"MCTOU\", \"MCSBLI\", \"MCANPA\", \"MCCT\", \"MCCERT\", \"MCMCUS\", \"MCBTYP\", \"MCPC\", \"MCPCA\", \"MCPCC\", \"MCINTA\", \"MCINTL\", \"MCD1J\", \"MCD2J\", \"MCD3J\", \"MCD4J\", \"MCD5J\", \"MCD6J\", \"MCFPDJ\", \"MCCAC\", \"MCPAC\", \"MCEEO\", \"MCERC\", \"MCUSER\", \"MCPID\", \"MCUPMJ\", \"MCJOBN\", \"MCUPMT\", \"MCBPTP\", \"MCAPSB\", \"MCTSBU\", \"MCRP31\", \"MCRP32\", \"MCRP33\", \"MCRP34\", \"MCRP35\", \"MCRP36\", \"MCRP37\", \"MCRP38\", \"MCRP39\", \"MCRP40\", \"MCRP41\", \"MCRP42\", \"MCRP43\", \"MCRP44\", \"MCRP45\", \"MCRP46\", \"MCRP47\", \"MCRP48\", \"MCRP49\", \"MCRP50\", \"MCAN8GCA1\", \"MCAN8GCA2\", \"MCAN8GCA3\", \"MCAN8GCA4\", \"MCAN8GCA5\", \"MCRMCU1\", \"MCDOCO\", \"MCPCTN\", \"MCCLNU\", \"MCBUCA\", \"MCADJENT\", \"MCUAFL\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_HUB F0006_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_S01 F0006_S01 ON F0006_HUB.ID = F0006_S01.ID\n    where F0006_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0006_S01.ID ORDER BY F0006_S01.FD DESC) = 1 \n),\n    \nF0005 AS (\n  SELECT \n    F0005_HUB.\"ID\", \"DRSY\", \"DRRT\", \"DRKY\",\n    F0005_S01.\"FD\", \"TD\", \"DRDL01\", \"DRDL02\", \"DRSPHD\", \"DRUDCO\", \"DRHRDC\", \"DRUSER\", \"DRPID\", \"DRUPMJ\", \"DRJOBN\", \"DRUPMT\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_HUB F0005_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_S01 F0005_S01 ON F0005_HUB.ID = F0005_S01.ID\n    where F0005_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0005_S01.ID ORDER BY F0005_S01.FD DESC) = 1 \n),\n    \nF0101 AS (\n  SELECT \n    F0101_HUB.\"ID\", \"ABAN8\",\n    F0101_S01.\"FD\", \"TD\", \"ABALKY\", \"ABTAX\", \"ABALPH\", \"ABDC\", \"ABMCU\", \"ABSIC\", \"ABLNGP\", \"ABAT1\", \"ABCM\", \"ABTAXC\", \"ABAT2\", \"ABAT3\", \"ABAT4\", \"ABAT5\", \"ABATP\", \"ABATR\", \"ABATPR\", \"ABAB3\", \"ABATE\", \"ABSBLI\", \"ABEFTB\", \"ABAN81\", \"ABAN82\", \"ABAN83\", \"ABAN84\", \"ABAN86\", \"ABAN85\", \"ABAC01\", \"ABAC02\", \"ABAC03\", \"ABAC04\", \"ABAC05\", \"ABAC06\", \"ABAC07\", \"ABAC08\", \"ABAC09\", \"ABAC10\", \"ABAC11\", \"ABAC12\", \"ABAC13\", \"ABAC14\", \"ABAC15\", \"ABAC16\", \"ABAC17\", \"ABAC18\", \"ABAC19\", \"ABAC20\", \"ABAC21\", \"ABAC22\", \"ABAC23\", \"ABAC24\", \"ABAC25\", \"ABAC26\", \"ABAC27\", \"ABAC28\", \"ABAC29\", \"ABAC30\", \"ABGLBA\", \"ABPTI\", \"ABPDI\", \"ABMSGA\", \"ABRMK\", \"ABTXCT\", \"ABTX2\", \"ABALP1\", \"ABURCD\", \"ABURDT\", \"ABURAT\", \"ABURAB\", \"ABURRF\", \"ABUSER\", \"ABPID\", \"ABUPMJ\", \"ABJOBN\", \"ABUPMT\", \"ABPRGF\", \"ABSCCLTP\", \"ABTICKER\", \"ABEXCHG\", \"ABDUNS\", \"ABCLASS01\", \"ABCLASS02\", \"ABCLASS03\", \"ABCLASS04\", \"ABCLASS05\", \"ABNOE\", \"ABGROWTHR\", \"ABYEARSTAR\", \"ABAEMPGP\", \"ABACTIN\", \"ABREVRNG\", \"ABSYNCS\", \"ABPERRS\", \"ABCAAD\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_HUB F0101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_S01 F0101_S01 ON F0101_HUB.ID = F0101_S01.ID\n    where F0101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0101_S01.ID ORDER BY F0101_S01.FD DESC) = 1 \n),\n\nsite_type as (\n    --select aban8, abat1,abalph,mcrp05,mcrp07,mcmcu from\n    select TRIM(F0006.MCMCU) as MCMCU,\n    CASE WHEN TRIM(F0006.MCMCU) = TRIM(F0006.MCRP05) THEN 'DER'\n         WHEN F0006.MCRP07 = 'SU' THEN 'SU'\n         WHEN F0006.MCRP07 = 'A' THEN 'ACH'\n         WHEN F0006.MCRP07 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'KT' THEN 'DISP'\n         WHEN F0101.ABAT1 = 'D' THEN 'DL'\n         WHEN F0101.ABAT1 = 'AD' THEN 'DF'\n    END as SITE_TYPE_CD --Code du type de site\n    from F0101\n    inner join F0006 on F0101.ABAN8 = F0006.MCAN8\n    where F0101.abat1 in ('D','AD','ST','KT')\n),\n\nsource_data as (\n  select\n    sha2_binary(to_variant(array_construct(TRIM(F0006.MCMCU))),512) as SITE_KEY, --cle technique\n    sha2_binary(to_variant(array_construct(F0006.MCCO)),512) as COMPANY_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(F0006.MCAN8)),512) AS CUSTOMER_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    sha2_binary(to_variant(array_construct(SITE_KEY,COMPANY_KEY)),512) as SITE_COMPANY_LINK_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(SITE_KEY,CUSTOMER_KEY)),512) AS SITE_CUSTOMER_LINK_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    TRIM(F0006.MCMCU)  as SITE_CD, --Magasin - Code\n    F0006.MCDL01 as SITE_NAME, --Libell\u00e9 du site\n    IFF(AD_P_PARAM.PARAM_CLASS_CD = 'LSV_TYPE_SITE', F0101_TIER.ABAT1 , NULL) as TYP_REF, --Typologie du Referentiel tracabilit\u00e9\n    site_type.SITE_TYPE_CD as SITE_TYPE_CD, --Code du type de site*/\n    AD_P_PARAM.OBJ_NAME as SITE_TYPE_NAME, --Libell\u00e9 du type de site\n    AD_P_PARAM.OBJ_CPLT_1 as SITE_PRF_CD,  --Code du site PRF\n    AD_P_PARAM.OBJ_CPLT_2 as SITE_PRF_NAME,  --Libell\u00e9 du site PRF\n    IFF(SITE_TYPE.SITE_TYPE_CD = 'DER', 1 , 0) as DER_FLG, --Flag indiquant que nous sommes sur une DER\n    F0006.MCCO as COMPANY_ID,\n    --company_hub.COMPANY_CD as COMPANY_ID, --Identifiant technique de la soci\u00e9t\u00e9\n    --case when TRIM(F0101_0.ABAT1) in ('D','AD') then F0006.MCAN8 else NULL end  as PARTY_ID, --Identifiant technique du tiers\n    F0006.MCRP05 as SITE_GUARDSHIP_CD, --Code du site de rattachement (DER)\n    F0005_SITE_GUARDSHIP_NAME.DRDL01 as SITE_GUARDSHIP_NAME, --Libell\u00e9 du site de rattachement (DER)\n    F0005_CAPACITY_PROPRE_NBR_PL.DRDL01 as CAPACITY_PROPRE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits propres\n    F0005_CAPACITY_NEGOCE_NBR_PL.DRDL01 as CAPACITY_NEGOCE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits de negoce\n    F0005_CAPACITY_NBR_PL.DRDL01 as CAPACITY_NBR_PL, --Capacit\u00e9 en nombre de palette\n    F0006.FD as EFFECTIVE_FROM, -- Date effective  \n    '2023-05-12 09:34:26'::DATETIME as LDTS, -- Date de chargement\n    'JDE' as RSCR -- Donnees JDE\n  from F0006\n\n  inner join SITE_TYPE on TRIM(SITE_TYPE.MCMCU) = TRIM(F0006.MCMCU)\n  LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM AD_P_PARAM ON TRIM(AD_P_PARAM.OBJ_CD) = TRIM(SITE_TYPE.SITE_TYPE_CD) AND PARAM_CLASS_CD = 'LSV_TYPE_SITE'\n\n  LEFT JOIN (select distinct ABMCU from F0101 where ABAT1 in ('ST','KT','D','AD')) F0101 ON TRIM(F0101.ABMCU)=TRIM(F0006.MCMCU)\n  LEFT JOIN F0101 F0101_TIER ON F0101_TIER.ABAN8 = TRIM(F0006.MCAN8)\n  LEFT JOIN F0005 F0005_SITE_GUARDSHIP_NAME ON TRIM(F0005_SITE_GUARDSHIP_NAME.DRKY) = F0006.MCRP05 AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRSY) = '00' AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRRT) = '05' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_PROPRE_NBR_PL ON TRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRKY) = F0006.MCRP02 AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRRT) = '02' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NEGOCE_NBR_PL ON TRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRKY) = F0006.MCRP03 AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRRT) = '03' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NBR_PL ON TRIM(F0005_CAPACITY_NBR_PL.DRKY) = F0006.MCRP04 AND RTRIM(F0005_CAPACITY_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NBR_PL.DRRT) = '04' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n)\nselect\nSITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG,COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL, EFFECTIVE_FROM, LDTS, RSCR,\nsha2_binary(to_variant(ARRAY_CONSTRUCT(SITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG, COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL)),512) as HASHDIFF\nfrom source_data\n),source_data AS (\n    SELECT a.\"SITE_KEY\", a.\"HASHDIFF\", a.\"SITE_CD\", a.\"SITE_NAME\", a.\"TYP_REF\", a.\"SITE_TYPE_CD\", a.\"SITE_TYPE_NAME\", a.\"SITE_PRF_CD\", a.\"SITE_PRF_NAME\", a.\"DER_FLG\", a.\"COMPANY_ID\", a.\"SITE_GUARDSHIP_CD\", a.\"SITE_GUARDSHIP_NAME\", a.\"CAPACITY_PROPRE_NBR_PL\", a.\"CAPACITY_NEGOCE_NBR_PL\", a.\"CAPACITY_NBR_PL\", a.\"EFFECTIVE_FROM\", a.\"LDTS\", a.\"RSCR\"\n    FROM __dbt__cte__dwh_site_tmp AS a\n    WHERE a.\"SITE_KEY\" IS NOT NULL\n),\n\n\n\nlatest_records AS (\n    SELECT a.\"SITE_KEY\", a.\"HASHDIFF\", a.\"LDTS\"\n    FROM (\n        SELECT current_records.\"SITE_KEY\", current_records.\"HASHDIFF\", current_records.\"LDTS\",\n            RANK() OVER (\n               PARTITION BY current_records.\"SITE_KEY\"\n               ORDER BY current_records.\"LDTS\" DESC\n            ) AS rank\n        FROM PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_SITE_SCH.dwh_site_sat AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.\"SITE_KEY\"\n                FROM source_data\n            ) AS source_records\n                ON current_records.\"SITE_KEY\" = source_records.\"SITE_KEY\"\n    ) AS a\n    WHERE a.rank = 1\n),records_to_insert AS (\n    SELECT DISTINCT stage.\"SITE_KEY\", stage.\"HASHDIFF\", stage.\"SITE_CD\", stage.\"SITE_NAME\", stage.\"TYP_REF\", stage.\"SITE_TYPE_CD\", stage.\"SITE_TYPE_NAME\", stage.\"SITE_PRF_CD\", stage.\"SITE_PRF_NAME\", stage.\"DER_FLG\", stage.\"COMPANY_ID\", stage.\"SITE_GUARDSHIP_CD\", stage.\"SITE_GUARDSHIP_NAME\", stage.\"CAPACITY_PROPRE_NBR_PL\", stage.\"CAPACITY_NEGOCE_NBR_PL\", stage.\"CAPACITY_NBR_PL\", stage.\"EFFECTIVE_FROM\", stage.\"LDTS\", stage.\"RSCR\"\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.\"SITE_KEY\" = stage.\"SITE_KEY\"\n        AND latest_records.\"HASHDIFF\" = stage.\"HASHDIFF\"\n    WHERE latest_records.\"HASHDIFF\" IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_site_tmp", "sql": " __dbt__cte__dwh_site_tmp as (\nWITH\n    \nF0006 AS (\n  SELECT \n    F0006_HUB.\"ID\", \"MCMCU\",\n    F0006_S01.\"FD\", \"TD\", \"MCSTYL\", \"MCDC\", \"MCLDM\", \"MCCO\", \"MCAN8\", \"MCAN8O\", \"MCCNTY\", \"MCADDS\", \"MCFMOD\", \"MCDL01\", \"MCDL02\", \"MCDL03\", \"MCDL04\", \"MCRP01\", \"MCRP02\", \"MCRP03\", \"MCRP04\", \"MCRP05\", \"MCRP06\", \"MCRP07\", \"MCRP08\", \"MCRP09\", \"MCRP10\", \"MCRP11\", \"MCRP12\", \"MCRP13\", \"MCRP14\", \"MCRP15\", \"MCRP16\", \"MCRP17\", \"MCRP18\", \"MCRP19\", \"MCRP20\", \"MCRP21\", \"MCRP22\", \"MCRP23\", \"MCRP24\", \"MCRP25\", \"MCRP26\", \"MCRP27\", \"MCRP28\", \"MCRP29\", \"MCRP30\", \"MCTA\", \"MCTXJS\", \"MCTXA1\", \"MCEXR1\", \"MCTC01\", \"MCTC02\", \"MCTC03\", \"MCTC04\", \"MCTC05\", \"MCTC06\", \"MCTC07\", \"MCTC08\", \"MCTC09\", \"MCTC10\", \"MCND01\", \"MCND02\", \"MCND03\", \"MCND04\", \"MCND05\", \"MCND06\", \"MCND07\", \"MCND08\", \"MCND09\", \"MCND10\", \"MCCC01\", \"MCCC02\", \"MCCC03\", \"MCCC04\", \"MCCC05\", \"MCCC06\", \"MCCC07\", \"MCCC08\", \"MCCC09\", \"MCCC10\", \"MCPECC\", \"MCALS\", \"MCISS\", \"MCGLBA\", \"MCALCL\", \"MCLMTH\", \"MCLF\", \"MCOBJ1\", \"MCOBJ2\", \"MCOBJ3\", \"MCSUB1\", \"MCTOU\", \"MCSBLI\", \"MCANPA\", \"MCCT\", \"MCCERT\", \"MCMCUS\", \"MCBTYP\", \"MCPC\", \"MCPCA\", \"MCPCC\", \"MCINTA\", \"MCINTL\", \"MCD1J\", \"MCD2J\", \"MCD3J\", \"MCD4J\", \"MCD5J\", \"MCD6J\", \"MCFPDJ\", \"MCCAC\", \"MCPAC\", \"MCEEO\", \"MCERC\", \"MCUSER\", \"MCPID\", \"MCUPMJ\", \"MCJOBN\", \"MCUPMT\", \"MCBPTP\", \"MCAPSB\", \"MCTSBU\", \"MCRP31\", \"MCRP32\", \"MCRP33\", \"MCRP34\", \"MCRP35\", \"MCRP36\", \"MCRP37\", \"MCRP38\", \"MCRP39\", \"MCRP40\", \"MCRP41\", \"MCRP42\", \"MCRP43\", \"MCRP44\", \"MCRP45\", \"MCRP46\", \"MCRP47\", \"MCRP48\", \"MCRP49\", \"MCRP50\", \"MCAN8GCA1\", \"MCAN8GCA2\", \"MCAN8GCA3\", \"MCAN8GCA4\", \"MCAN8GCA5\", \"MCRMCU1\", \"MCDOCO\", \"MCPCTN\", \"MCCLNU\", \"MCBUCA\", \"MCADJENT\", \"MCUAFL\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_HUB F0006_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_S01 F0006_S01 ON F0006_HUB.ID = F0006_S01.ID\n    where F0006_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0006_S01.ID ORDER BY F0006_S01.FD DESC) = 1 \n),\n    \nF0005 AS (\n  SELECT \n    F0005_HUB.\"ID\", \"DRSY\", \"DRRT\", \"DRKY\",\n    F0005_S01.\"FD\", \"TD\", \"DRDL01\", \"DRDL02\", \"DRSPHD\", \"DRUDCO\", \"DRHRDC\", \"DRUSER\", \"DRPID\", \"DRUPMJ\", \"DRJOBN\", \"DRUPMT\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_HUB F0005_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_S01 F0005_S01 ON F0005_HUB.ID = F0005_S01.ID\n    where F0005_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0005_S01.ID ORDER BY F0005_S01.FD DESC) = 1 \n),\n    \nF0101 AS (\n  SELECT \n    F0101_HUB.\"ID\", \"ABAN8\",\n    F0101_S01.\"FD\", \"TD\", \"ABALKY\", \"ABTAX\", \"ABALPH\", \"ABDC\", \"ABMCU\", \"ABSIC\", \"ABLNGP\", \"ABAT1\", \"ABCM\", \"ABTAXC\", \"ABAT2\", \"ABAT3\", \"ABAT4\", \"ABAT5\", \"ABATP\", \"ABATR\", \"ABATPR\", \"ABAB3\", \"ABATE\", \"ABSBLI\", \"ABEFTB\", \"ABAN81\", \"ABAN82\", \"ABAN83\", \"ABAN84\", \"ABAN86\", \"ABAN85\", \"ABAC01\", \"ABAC02\", \"ABAC03\", \"ABAC04\", \"ABAC05\", \"ABAC06\", \"ABAC07\", \"ABAC08\", \"ABAC09\", \"ABAC10\", \"ABAC11\", \"ABAC12\", \"ABAC13\", \"ABAC14\", \"ABAC15\", \"ABAC16\", \"ABAC17\", \"ABAC18\", \"ABAC19\", \"ABAC20\", \"ABAC21\", \"ABAC22\", \"ABAC23\", \"ABAC24\", \"ABAC25\", \"ABAC26\", \"ABAC27\", \"ABAC28\", \"ABAC29\", \"ABAC30\", \"ABGLBA\", \"ABPTI\", \"ABPDI\", \"ABMSGA\", \"ABRMK\", \"ABTXCT\", \"ABTX2\", \"ABALP1\", \"ABURCD\", \"ABURDT\", \"ABURAT\", \"ABURAB\", \"ABURRF\", \"ABUSER\", \"ABPID\", \"ABUPMJ\", \"ABJOBN\", \"ABUPMT\", \"ABPRGF\", \"ABSCCLTP\", \"ABTICKER\", \"ABEXCHG\", \"ABDUNS\", \"ABCLASS01\", \"ABCLASS02\", \"ABCLASS03\", \"ABCLASS04\", \"ABCLASS05\", \"ABNOE\", \"ABGROWTHR\", \"ABYEARSTAR\", \"ABAEMPGP\", \"ABACTIN\", \"ABREVRNG\", \"ABSYNCS\", \"ABPERRS\", \"ABCAAD\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_HUB F0101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_S01 F0101_S01 ON F0101_HUB.ID = F0101_S01.ID\n    where F0101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0101_S01.ID ORDER BY F0101_S01.FD DESC) = 1 \n),\n\nsite_type as (\n    --select aban8, abat1,abalph,mcrp05,mcrp07,mcmcu from\n    select TRIM(F0006.MCMCU) as MCMCU,\n    CASE WHEN TRIM(F0006.MCMCU) = TRIM(F0006.MCRP05) THEN 'DER'\n         WHEN F0006.MCRP07 = 'SU' THEN 'SU'\n         WHEN F0006.MCRP07 = 'A' THEN 'ACH'\n         WHEN F0006.MCRP07 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'KT' THEN 'DISP'\n         WHEN F0101.ABAT1 = 'D' THEN 'DL'\n         WHEN F0101.ABAT1 = 'AD' THEN 'DF'\n    END as SITE_TYPE_CD --Code du type de site\n    from F0101\n    inner join F0006 on F0101.ABAN8 = F0006.MCAN8\n    where F0101.abat1 in ('D','AD','ST','KT')\n),\n\nsource_data as (\n  select\n    sha2_binary(to_variant(array_construct(TRIM(F0006.MCMCU))),512) as SITE_KEY, --cle technique\n    sha2_binary(to_variant(array_construct(F0006.MCCO)),512) as COMPANY_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(F0006.MCAN8)),512) AS CUSTOMER_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    sha2_binary(to_variant(array_construct(SITE_KEY,COMPANY_KEY)),512) as SITE_COMPANY_LINK_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(SITE_KEY,CUSTOMER_KEY)),512) AS SITE_CUSTOMER_LINK_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    TRIM(F0006.MCMCU)  as SITE_CD, --Magasin - Code\n    F0006.MCDL01 as SITE_NAME, --Libell\u00e9 du site\n    IFF(AD_P_PARAM.PARAM_CLASS_CD = 'LSV_TYPE_SITE', F0101_TIER.ABAT1 , NULL) as TYP_REF, --Typologie du Referentiel tracabilit\u00e9\n    site_type.SITE_TYPE_CD as SITE_TYPE_CD, --Code du type de site*/\n    AD_P_PARAM.OBJ_NAME as SITE_TYPE_NAME, --Libell\u00e9 du type de site\n    AD_P_PARAM.OBJ_CPLT_1 as SITE_PRF_CD,  --Code du site PRF\n    AD_P_PARAM.OBJ_CPLT_2 as SITE_PRF_NAME,  --Libell\u00e9 du site PRF\n    IFF(SITE_TYPE.SITE_TYPE_CD = 'DER', 1 , 0) as DER_FLG, --Flag indiquant que nous sommes sur une DER\n    F0006.MCCO as COMPANY_ID,\n    --company_hub.COMPANY_CD as COMPANY_ID, --Identifiant technique de la soci\u00e9t\u00e9\n    --case when TRIM(F0101_0.ABAT1) in ('D','AD') then F0006.MCAN8 else NULL end  as PARTY_ID, --Identifiant technique du tiers\n    F0006.MCRP05 as SITE_GUARDSHIP_CD, --Code du site de rattachement (DER)\n    F0005_SITE_GUARDSHIP_NAME.DRDL01 as SITE_GUARDSHIP_NAME, --Libell\u00e9 du site de rattachement (DER)\n    F0005_CAPACITY_PROPRE_NBR_PL.DRDL01 as CAPACITY_PROPRE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits propres\n    F0005_CAPACITY_NEGOCE_NBR_PL.DRDL01 as CAPACITY_NEGOCE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits de negoce\n    F0005_CAPACITY_NBR_PL.DRDL01 as CAPACITY_NBR_PL, --Capacit\u00e9 en nombre de palette\n    F0006.FD as EFFECTIVE_FROM, -- Date effective  \n    '2023-05-12 09:34:26'::DATETIME as LDTS, -- Date de chargement\n    'JDE' as RSCR -- Donnees JDE\n  from F0006\n\n  inner join SITE_TYPE on TRIM(SITE_TYPE.MCMCU) = TRIM(F0006.MCMCU)\n  LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM AD_P_PARAM ON TRIM(AD_P_PARAM.OBJ_CD) = TRIM(SITE_TYPE.SITE_TYPE_CD) AND PARAM_CLASS_CD = 'LSV_TYPE_SITE'\n\n  LEFT JOIN (select distinct ABMCU from F0101 where ABAT1 in ('ST','KT','D','AD')) F0101 ON TRIM(F0101.ABMCU)=TRIM(F0006.MCMCU)\n  LEFT JOIN F0101 F0101_TIER ON F0101_TIER.ABAN8 = TRIM(F0006.MCAN8)\n  LEFT JOIN F0005 F0005_SITE_GUARDSHIP_NAME ON TRIM(F0005_SITE_GUARDSHIP_NAME.DRKY) = F0006.MCRP05 AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRSY) = '00' AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRRT) = '05' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_PROPRE_NBR_PL ON TRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRKY) = F0006.MCRP02 AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRRT) = '02' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NEGOCE_NBR_PL ON TRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRKY) = F0006.MCRP03 AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRRT) = '03' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NBR_PL ON TRIM(F0005_CAPACITY_NBR_PL.DRKY) = F0006.MCRP04 AND RTRIM(F0005_CAPACITY_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NBR_PL.DRRT) = '04' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n)\nselect\nSITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG,COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL, EFFECTIVE_FROM, LDTS, RSCR,\nsha2_binary(to_variant(ARRAY_CONSTRUCT(SITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG, COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL)),512) as HASHDIFF\nfrom source_data\n)"}]}, "model.dbt_grizzly.site": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_SITE_SCH", "name": "site", "resource_type": "model", "package_name": "dbt_grizzly", "path": "20_silver_db\\site_sch\\02_3NF\\site.sql", "original_file_path": "models\\20_silver_db\\site_sch\\02_3NF\\site.sql", "unique_id": "model.dbt_grizzly.site", "fqn": ["dbt_grizzly", "20_silver_db", "site_sch", "02_3NF", "site"], "alias": "site", "checksum": {"name": "sha256", "checksum": "57c8eafc0e11acea174ab5acc831758691c8d90d1732fbbdda0f27ead74d95f6"}, "config": {"enabled": true, "alias": null, "schema": "DWH_SITE_SCH", "database": "PRFR_00_DEV_20_SILVER_DB", "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.Site", "3NF"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.aggregated", "Domain.Name.DDO", "silver", "dscp", "DataProduct.Name.Site", "3NF"], "description": "3NF view of Site entity", "columns": {"SITE_KEY": {"name": "SITE_KEY", "description": "Primary key hashed from the SITE_CD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_CD": {"name": "SITE_CD", "description": "Magasin - Code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_NAME": {"name": "SITE_NAME", "description": "Libell\u00e9 du site", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYP_REF": {"name": "TYP_REF", "description": "Typologie du Referentiel tracabilit\u00e9", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_TYPE_CD": {"name": "SITE_TYPE_CD", "description": "Code du type de site", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_TYPE_NAME": {"name": "SITE_TYPE_NAME", "description": "Libell\u00e9 du type de site", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_PRF_CD": {"name": "SITE_PRF_CD", "description": "Code du site PRF", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_PRF_NAME": {"name": "SITE_PRF_NAME", "description": "Libell\u00e9 du site PRF", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DER_FLG": {"name": "DER_FLG", "description": "Flag indiquant que nous sommes sur une DER", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPANY_ID": {"name": "COMPANY_ID", "description": "Identifiant technique de la soci\u00e9t\u00e9", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_GUARDSHIP_CD": {"name": "SITE_GUARDSHIP_CD", "description": "Code du site de rattachement (DER)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_GUARDSHIP_NAME": {"name": "SITE_GUARDSHIP_NAME", "description": "Libell\u00e9 du site de rattachement (DER)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CAPACITY_PROPRE_NBR_PL": {"name": "CAPACITY_PROPRE_NBR_PL", "description": "Capacit\u00e9 en nombre de palette pour les produits propres", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CAPACITY_NEGOCE_NBR_PL": {"name": "CAPACITY_NEGOCE_NBR_PL", "description": "Capacit\u00e9 en nombre de palette pour les produits de negoce", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CAPACITY_NBR_PL": {"name": "CAPACITY_NBR_PL", "description": "Capacit\u00e9 en nombre de palette", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\20_silver_db\\site_sch\\02_3NF\\site.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_20_SILVER_DB", "tags": ["3NF"], "schema": "DWH_SITE_SCH", "materialized": "view"}, "created_at": 1683884073.1044343, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_SITE_SCH.site", "raw_code": "{%- set src_hub = \"dwh_site_hub\" -%}\r\n{%- set src_sat = \"dwh_site_sat\" -%}\r\n{%- set src_pk = \"SITE_KEY\" -%}\r\n{%- set src_ldts = \"LDTS\" -%}\r\n{%- set src_payload = [\"SITE_CD\",\"SITE_NAME\",\"TYP_REF\",\"SITE_TYPE_CD\",\"SITE_TYPE_NAME\",\"SITE_PRF_CD\",\"SITE_PRF_NAME\",\"DER_FLG\",\"COMPANY_ID\",\"SITE_GUARDSHIP_CD\",\"SITE_GUARDSHIP_NAME\",\"CAPACITY_PROPRE_NBR_PL\",\"CAPACITY_NEGOCE_NBR_PL\",\"CAPACITY_NBR_PL\"] -%}\r\n\r\n{{ create_3NF(src_hub=ref(src_hub),\r\n              src_sat=ref(src_sat),\r\n              src_pk=src_pk,\r\n              src_ldts=src_ldts,\r\n              src_payload=src_payload) }}", "language": "sql", "refs": [["dwh_site_hub"], ["dwh_site_sat"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_grizzly.create_3NF"], "nodes": ["model.dbt_grizzly.dwh_site_hub", "model.dbt_grizzly.dwh_site_sat"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\site_sch\\02_3NF\\site.sql", "compiled": true, "compiled_code": "with source_data_init as (\n    select distinct sat.\"SITE_CD\", sat.\"SITE_NAME\", sat.\"TYP_REF\", sat.\"SITE_TYPE_CD\", sat.\"SITE_TYPE_NAME\", sat.\"SITE_PRF_CD\", sat.\"SITE_PRF_NAME\", sat.\"DER_FLG\", sat.\"COMPANY_ID\", sat.\"SITE_GUARDSHIP_CD\", sat.\"SITE_GUARDSHIP_NAME\", sat.\"CAPACITY_PROPRE_NBR_PL\", sat.\"CAPACITY_NEGOCE_NBR_PL\", sat.\"CAPACITY_NBR_PL\"\n    from PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_SITE_SCH.dwh_site_hub hub\n    inner join PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_SITE_SCH.dwh_site_sat sat on hub.SITE_KEY = sat.SITE_KEY\n    qualify row_number() over (partition by sat.SITE_KEY order by sat.LDTS desc) = 1\n)\nselect \"SITE_CD\", \"SITE_NAME\", \"TYP_REF\", \"SITE_TYPE_CD\", \"SITE_TYPE_NAME\", \"SITE_PRF_CD\", \"SITE_PRF_NAME\", \"DER_FLG\", \"COMPANY_ID\", \"SITE_GUARDSHIP_CD\", \"SITE_GUARDSHIP_NAME\", \"CAPACITY_PROPRE_NBR_PL\", \"CAPACITY_NEGOCE_NBR_PL\", \"CAPACITY_NBR_PL\"\nfrom source_data_init\n\n\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbt_grizzly.work_order": {"database": "PRFR_00_DEV_30_GOLD_DB", "schema": "PRFR_DWH_3NF_PRODUCTION_SCH", "name": "work_order", "resource_type": "model", "package_name": "dbt_grizzly", "path": "30_gold_db\\production_sch\\00_3NF\\work_order.sql", "original_file_path": "models\\30_gold_db\\production_sch\\00_3NF\\work_order.sql", "unique_id": "model.dbt_grizzly.work_order", "fqn": ["dbt_grizzly", "30_gold_db", "production_sch", "00_3NF", "work_order"], "alias": "work_order", "checksum": {"name": "sha256", "checksum": "72b3b5550a2dbd428d2a54b34837be12c19a5a648309aeb4d48b8cedefc5449b"}, "config": {"enabled": true, "alias": null, "schema": "DWH_3NF_PRODUCTION_SCH", "database": "PRFR_00_DEV_30_GOLD_DB", "tags": ["DataProduct.Type.consumer-aligned", "Domain.Name.DDO", "gold", "gold", "production", "DataProduct.Name.Production", "3NF"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.consumer-aligned", "Domain.Name.DDO", "gold", "production", "DataProduct.Name.Production", "3NF"], "description": "3NF View of WORK ORDER Table", "columns": {"DOCUMENT_NUM": {"name": "DOCUMENT_NUM", "description": "Document (Order No Invoice etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPANY_CD": {"name": "COMPANY_CD", "description": "Company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEM_ID": {"name": "ITEM_ID", "description": "Item Number - Short", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_CD": {"name": "SITE_CD", "description": "Branch", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRODUCTION_DT": {"name": "PRODUCTION_DT", "description": "Date - Completion (Julian)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPPED_QTY": {"name": "SHIPPED_QTY", "description": "Quantity Shipped", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ROUTING_TYPE": {"name": "ROUTING_TYPE", "description": "Routing Type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CODE_TYPE_OF": {"name": "CODE_TYPE_OF", "description": "OF Type - Code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CODE_ARTICLE": {"name": "CODE_ARTICLE", "description": "Code Article", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASKED_DTOF": {"name": "ASKED_DTOF", "description": "ASKED_DT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDER_ST_CD": {"name": "ORDER_ST_CD", "description": "ORDER_ST_CD", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\30_gold_db\\production_sch\\00_3NF\\work_order.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_30_GOLD_DB", "tags": ["3NF"], "schema": "DWH_3NF_PRODUCTION_SCH", "materialized": "view"}, "created_at": 1683884073.112448, "relation_name": "PRFR_00_DEV_30_GOLD_DB.PRFR_DWH_3NF_PRODUCTION_SCH.work_order", "raw_code": "{%- set src_hub = \"dwh_work_order_hub\" -%}\r\n{%- set src_sat = \"dwh_work_order_sat\" -%}\r\n{%- set src_pk = \"WORK_ORDER_KEY\" -%}\r\n{%- set src_ldts = \"LDTS\" -%}\r\n{%- set src_payload = [\"DOCUMENT_NUM\",\"COMPANY_CD\",\"ITEM_ID\",\"SITE_CD\",\"PRODUCTION_DT\",\"SHIPPED_QTY\",\"ROUTING_TYPE\",\"CODE_TYPE_OF\",\"CODE_ARTICLE\",\"ASKED_DT\",\"ORDER_ST_CD\"] -%}\r\n{{ create_3NF(src_hub=ref(src_hub),\r\n              src_sat=ref(src_sat),\r\n              src_pk=src_pk,\r\n              src_ldts=src_ldts,\r\n              src_payload=src_payload) }}", "language": "sql", "refs": [["dwh_work_order_hub"], ["dwh_work_order_sat"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_grizzly.create_3NF"], "nodes": ["model.dbt_grizzly.dwh_work_order_hub", "model.dbt_grizzly.dwh_work_order_sat"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\30_gold_db\\production_sch\\00_3NF\\work_order.sql", "compiled": true, "compiled_code": "with source_data_init as (\n    select distinct sat.\"DOCUMENT_NUM\", sat.\"COMPANY_CD\", sat.\"ITEM_ID\", sat.\"SITE_CD\", sat.\"PRODUCTION_DT\", sat.\"SHIPPED_QTY\", sat.\"ROUTING_TYPE\", sat.\"CODE_TYPE_OF\", sat.\"CODE_ARTICLE\", sat.\"ASKED_DT\", sat.\"ORDER_ST_CD\"\n    from PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PRODUCTION_SCH.dwh_work_order_hub hub\n    inner join PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PRODUCTION_SCH.dwh_work_order_sat sat on hub.WORK_ORDER_KEY = sat.WORK_ORDER_KEY\n    qualify row_number() over (partition by sat.WORK_ORDER_KEY order by sat.LDTS desc) = 1\n)\nselect \"DOCUMENT_NUM\", \"COMPANY_CD\", \"ITEM_ID\", \"SITE_CD\", \"PRODUCTION_DT\", \"SHIPPED_QTY\", \"ROUTING_TYPE\", \"CODE_TYPE_OF\", \"CODE_ARTICLE\", \"ASKED_DT\", \"ORDER_ST_CD\"\nfrom source_data_init\n\n\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbt_grizzly.work_order_parts_list": {"database": "PRFR_00_DEV_30_GOLD_DB", "schema": "PRFR_DWH_3NF_PRODUCTION_SCH", "name": "work_order_parts_list", "resource_type": "model", "package_name": "dbt_grizzly", "path": "30_gold_db\\production_sch\\00_3NF\\work_order_parts_list.sql", "original_file_path": "models\\30_gold_db\\production_sch\\00_3NF\\work_order_parts_list.sql", "unique_id": "model.dbt_grizzly.work_order_parts_list", "fqn": ["dbt_grizzly", "30_gold_db", "production_sch", "00_3NF", "work_order_parts_list"], "alias": "work_order_parts_list", "checksum": {"name": "sha256", "checksum": "d837392301f63d6b972269aaa3d082054e86c363bf3fb84fbcec81dab74c6e8c"}, "config": {"enabled": true, "alias": null, "schema": "DWH_3NF_PRODUCTION_SCH", "database": "PRFR_00_DEV_30_GOLD_DB", "tags": ["DataProduct.Type.consumer-aligned", "Domain.Name.DDO", "gold", "gold", "production", "DataProduct.Name.Production", "3NF"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "fail", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["DataProduct.Type.consumer-aligned", "Domain.Name.DDO", "gold", "production", "DataProduct.Name.Production", "3NF"], "description": "3NF View of WORK ORDER PARTS LIST Table", "columns": {"OF_ID": {"name": "OF_ID", "description": "N\u00b0 OF", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE_OF_CD": {"name": "TYPE_OF_CD", "description": "OF Type - Code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SITE_CD": {"name": "SITE_CD", "description": "Code Site", "meta": {}, "data_type": null, "quote": null, "tags": []}, "KIT_ID": {"name": "KIT_ID", "description": "Code Interne Composant", "meta": {}, "data_type": null, "quote": null, "tags": []}, "KIT_CD": {"name": "KIT_CD", "description": "Code article composant", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEM_ID": {"name": "ITEM_ID", "description": "Identifiant Article", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEM_CD": {"name": "ITEM_CD", "description": "Code article", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UOM_CD": {"name": "UOM_CD", "description": "Unit\u00e9 de Mesure - Code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOCATION": {"name": "LOCATION", "description": "Emplacement", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOT_NUM": {"name": "LOT_NUM", "description": "Composant - N\u00b0 Lot", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QTY_AVAILABLE": {"name": "QTY_AVAILABLE", "description": "Quantit\u00e9 Consomm\u00e9e", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QTY_ORDER": {"name": "QTY_ORDER", "description": "Quantit\u00e9 Pr\u00e9vue", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QTY_CANCELED": {"name": "QTY_CANCELED", "description": "Quantit\u00e9 Annul\u00e9e", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QTY_HELD": {"name": "QTY_HELD", "description": "Quantit\u00e9 Bloqu\u00e9e", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QTY_COMMITED": {"name": "QTY_COMMITED", "description": "Quantit\u00e9 R\u00e9serv\u00e9e", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_grizzly://models\\30_gold_db\\production_sch\\00_3NF\\work_order_parts_list.schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "fail", "persist_docs": {"relation": true, "columns": true}, "database": "PRFR_{{ env_var('DBT_SF_ENV') }}_30_GOLD_DB", "tags": ["3NF"], "schema": "DWH_3NF_PRODUCTION_SCH", "materialized": "view"}, "created_at": 1683884073.1309412, "relation_name": "PRFR_00_DEV_30_GOLD_DB.PRFR_DWH_3NF_PRODUCTION_SCH.work_order_parts_list", "raw_code": "WITH PARTS_LIST AS \r\n(\r\nSELECT \r\n        OF_ID,\r\n        TYPE_OF_CD ,/*OF Type - Code */\r\n        ITEM_ID, /*Code Interne Composant*/\r\n        ITEM_CD, /*Code article composant*/\r\n        UOM_CD, /*Unit\u00e9 de Mesure - Code*/\r\n        LOCATION, /*Emplacement*/\r\n        LOT_NUM, /*Composant - N\u00b0 Lot*/\r\n        QTY_AVAILABLE, /*Quantit\u00e9 Consomm\u00e9e*/\r\n        QTY_ORDER, /*Quantit\u00e9 Pr\u00e9vue*/\r\n        QTY_CANCELED, /*Quantit\u00e9 Annul\u00e9e*/\r\n        QTY_HELD, /*Quantit\u00e9 Bloqu\u00e9e*/\r\n        QTY_COMMITED /*Quantit\u00e9 R\u00e9serv\u00e9e*/\r\nFROM \r\n  {{ ref(\"dwh_work_order_parts_list_sat\") }} PARTS_LIST \r\n  QUALIFY ROW_NUMBER() OVER (PARTITION BY PARTS_LIST.OF_ID ORDER BY PARTS_LIST.LDTS desc) = 1 \r\n),\r\n\r\n\r\nWORK_ORDER AS \r\n(\r\nSELECT \r\n            HUB.document_num,  /* Document (Order No Invoice etc.)*/\r\n            item_id as kit_id,  /* Item Number - Short*/\r\n            site_cd,  /* Branch*/\r\n            HUB.CODE_TYPE_OF, /*OF Type - Code*/\r\n            CODE_ARTICLE as kit_cd /*Code Article*/\r\n\r\nFROM \r\n  {{ ref(\"dwh_work_order_hub\") }} HUB \r\n  INNER JOIN {{ ref(\"dwh_work_order_sat\") }} WORK_ORDER on WORK_ORDER.WORK_ORDER_KEY = HUB.WORK_ORDER_KEY /*Jointure avec la table des tailles et poids sat pour remonter les informations n\u00e9cessaires*/\r\n  QUALIFY ROW_NUMBER() OVER (PARTITION BY WORK_ORDER.WORK_ORDER_KEY ORDER BY WORK_ORDER.LDTS desc) = 1 \r\n),\r\n\r\nSOURCE_DATA AS (\r\nSELECT  \r\n        OF_ID,\r\n        TYPE_OF_CD ,/*OF Type - Code */\r\n        ITEM_ID, /*Code Interne Composant*/\r\n        ITEM_CD, /*Code article composant*/\r\n        UOM_CD, /*Unit\u00e9 de Mesure - Code*/\r\n        LOCATION, /*Emplacement*/\r\n        LOT_NUM, /*Composant - N\u00b0 Lot*/\r\n        QTY_AVAILABLE, /*Quantit\u00e9 Consomm\u00e9e*/\r\n        QTY_ORDER, /*Quantit\u00e9 Pr\u00e9vue*/\r\n        QTY_CANCELED, /*Quantit\u00e9 Annul\u00e9e*/\r\n        QTY_HELD, /*Quantit\u00e9 Bloqu\u00e9e*/\r\n        QTY_COMMITED, /*Quantit\u00e9 R\u00e9serv\u00e9e*/\r\n        document_num,  /* Document (Order No Invoice etc.)*/\r\n        kit_id,  /* Item Number - Short*/\r\n        site_cd,  /* Branch*/\r\n        CODE_TYPE_OF, /*OF Type - Code*/\r\n        kit_cd /*Code Article*/\r\nFROM\r\n     {{ ref(\"dwh_work_order_parts_list_sat\") }} SAT\r\n     INNER JOIN WORK_ORDER WO ON WO.document_num = SAT.OF_ID AND WO.CODE_TYPE_OF = SAT.TYPE_OF_CD\r\n)\r\nSELECT \r\nOF_ID,\r\nTYPE_OF_CD ,/*OF Type - Code */\r\nsite_cd,  /* Branch*/\r\nkit_id,  /* Item Number - Short*/\r\nkit_cd, /*Code Article*/\r\nITEM_ID, /*Code Interne Composant*/\r\nITEM_CD, /*Code article composant*/\r\nUOM_CD, /*Unit\u00e9 de Mesure - Code*/\r\nLOCATION, /*Emplacement*/\r\nLOT_NUM, /*Composant - N\u00b0 Lot*/\r\nQTY_AVAILABLE, /*Quantit\u00e9 Consomm\u00e9e*/\r\nQTY_ORDER, /*Quantit\u00e9 Pr\u00e9vue*/\r\nQTY_CANCELED, /*Quantit\u00e9 Annul\u00e9e*/\r\nQTY_HELD, /*Quantit\u00e9 Bloqu\u00e9e*/\r\nQTY_COMMITED /*Quantit\u00e9 R\u00e9serv\u00e9e*/\r\nFROM \r\n    SOURCE_DATA", "language": "sql", "refs": [["dwh_work_order_parts_list_sat"], ["dwh_work_order_hub"], ["dwh_work_order_sat"], ["dwh_work_order_parts_list_sat"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_grizzly.dwh_work_order_parts_list_sat", "model.dbt_grizzly.dwh_work_order_hub", "model.dbt_grizzly.dwh_work_order_sat", "model.dbt_grizzly.dwh_work_order_parts_list_sat"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\30_gold_db\\production_sch\\00_3NF\\work_order_parts_list.sql", "compiled": true, "compiled_code": "WITH PARTS_LIST AS \n(\nSELECT \n        OF_ID,\n        TYPE_OF_CD ,/*OF Type - Code */\n        ITEM_ID, /*Code Interne Composant*/\n        ITEM_CD, /*Code article composant*/\n        UOM_CD, /*Unit\u00e9 de Mesure - Code*/\n        LOCATION, /*Emplacement*/\n        LOT_NUM, /*Composant - N\u00b0 Lot*/\n        QTY_AVAILABLE, /*Quantit\u00e9 Consomm\u00e9e*/\n        QTY_ORDER, /*Quantit\u00e9 Pr\u00e9vue*/\n        QTY_CANCELED, /*Quantit\u00e9 Annul\u00e9e*/\n        QTY_HELD, /*Quantit\u00e9 Bloqu\u00e9e*/\n        QTY_COMMITED /*Quantit\u00e9 R\u00e9serv\u00e9e*/\nFROM \n  PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PRODUCTION_SCH.dwh_work_order_parts_list_sat PARTS_LIST \n  QUALIFY ROW_NUMBER() OVER (PARTITION BY PARTS_LIST.OF_ID ORDER BY PARTS_LIST.LDTS desc) = 1 \n),\n\n\nWORK_ORDER AS \n(\nSELECT \n            HUB.document_num,  /* Document (Order No Invoice etc.)*/\n            item_id as kit_id,  /* Item Number - Short*/\n            site_cd,  /* Branch*/\n            HUB.CODE_TYPE_OF, /*OF Type - Code*/\n            CODE_ARTICLE as kit_cd /*Code Article*/\n\nFROM \n  PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PRODUCTION_SCH.dwh_work_order_hub HUB \n  INNER JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PRODUCTION_SCH.dwh_work_order_sat WORK_ORDER on WORK_ORDER.WORK_ORDER_KEY = HUB.WORK_ORDER_KEY /*Jointure avec la table des tailles et poids sat pour remonter les informations n\u00e9cessaires*/\n  QUALIFY ROW_NUMBER() OVER (PARTITION BY WORK_ORDER.WORK_ORDER_KEY ORDER BY WORK_ORDER.LDTS desc) = 1 \n),\n\nSOURCE_DATA AS (\nSELECT  \n        OF_ID,\n        TYPE_OF_CD ,/*OF Type - Code */\n        ITEM_ID, /*Code Interne Composant*/\n        ITEM_CD, /*Code article composant*/\n        UOM_CD, /*Unit\u00e9 de Mesure - Code*/\n        LOCATION, /*Emplacement*/\n        LOT_NUM, /*Composant - N\u00b0 Lot*/\n        QTY_AVAILABLE, /*Quantit\u00e9 Consomm\u00e9e*/\n        QTY_ORDER, /*Quantit\u00e9 Pr\u00e9vue*/\n        QTY_CANCELED, /*Quantit\u00e9 Annul\u00e9e*/\n        QTY_HELD, /*Quantit\u00e9 Bloqu\u00e9e*/\n        QTY_COMMITED, /*Quantit\u00e9 R\u00e9serv\u00e9e*/\n        document_num,  /* Document (Order No Invoice etc.)*/\n        kit_id,  /* Item Number - Short*/\n        site_cd,  /* Branch*/\n        CODE_TYPE_OF, /*OF Type - Code*/\n        kit_cd /*Code Article*/\nFROM\n     PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PRODUCTION_SCH.dwh_work_order_parts_list_sat SAT\n     INNER JOIN WORK_ORDER WO ON WO.document_num = SAT.OF_ID AND WO.CODE_TYPE_OF = SAT.TYPE_OF_CD\n)\nSELECT \nOF_ID,\nTYPE_OF_CD ,/*OF Type - Code */\nsite_cd,  /* Branch*/\nkit_id,  /* Item Number - Short*/\nkit_cd, /*Code Article*/\nITEM_ID, /*Code Interne Composant*/\nITEM_CD, /*Code article composant*/\nUOM_CD, /*Unit\u00e9 de Mesure - Code*/\nLOCATION, /*Emplacement*/\nLOT_NUM, /*Composant - N\u00b0 Lot*/\nQTY_AVAILABLE, /*Quantit\u00e9 Consomm\u00e9e*/\nQTY_ORDER, /*Quantit\u00e9 Pr\u00e9vue*/\nQTY_CANCELED, /*Quantit\u00e9 Annul\u00e9e*/\nQTY_HELD, /*Quantit\u00e9 Bloqu\u00e9e*/\nQTY_COMMITED /*Quantit\u00e9 R\u00e9serv\u00e9e*/\nFROM \n    SOURCE_DATA", "extra_ctes_injected": true, "extra_ctes": []}, "test.dbt_grizzly.unique_dwh_dscp_period_inventory_tmp_PERIOD_INVENTORY_KEY.207bedbe01": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "PERIOD_INVENTORY_KEY", "model": "{{ get_where_subquery(ref('dwh_dscp_period_inventory_tmp')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "unique_dwh_dscp_period_inventory_tmp_PERIOD_INVENTORY_KEY", "resource_type": "test", "package_name": "dbt_grizzly", "path": "unique_dwh_dscp_period_inventory_tmp_PERIOD_INVENTORY_KEY.sql", "original_file_path": "models\\20_silver_db\\dscp_sch\\00_stage\\dwh_dscp_period_inventory_tmp.schema.yml", "unique_id": "test.dbt_grizzly.unique_dwh_dscp_period_inventory_tmp_PERIOD_INVENTORY_KEY.207bedbe01", "fqn": ["dbt_grizzly", "20_silver_db", "dscp_sch", "00_stage", "unique_dwh_dscp_period_inventory_tmp_PERIOD_INVENTORY_KEY"], "alias": "unique_dwh_dscp_period_inventory_tmp_PERIOD_INVENTORY_KEY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884072.833031, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_dscp_period_inventory_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\dscp_sch\\00_stage\\dwh_dscp_period_inventory_tmp.schema.yml\\unique_dwh_dscp_period_inventory_tmp_PERIOD_INVENTORY_KEY.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__dwh_dscp_period_inventory_tmp as (\nWITH \n\nE_DD_STOCK_DEB_PERIODE AS (\n  SELECT \n    E_DD_STOCK_DEB_PERIODE_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DEB_PERIODE_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_HUB E_DD_STOCK_DEB_PERIODE_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_S01 E_DD_STOCK_DEB_PERIODE_S01 ON E_DD_STOCK_DEB_PERIODE_HUB.ID = E_DD_STOCK_DEB_PERIODE_S01.ID\n    where E_DD_STOCK_DEB_PERIODE_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DEB_PERIODE_S01.ID ORDER BY E_DD_STOCK_DEB_PERIODE_S01.FD DESC) = 1 \n),\n\nE_DD_STOCK_DISPO AS (\n  SELECT \n    E_DD_STOCK_DISPO_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DISPO_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_HUB E_DD_STOCK_DISPO_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_S01 E_DD_STOCK_DISPO_S01 ON E_DD_STOCK_DISPO_HUB.ID = E_DD_STOCK_DISPO_S01.ID\n    where E_DD_STOCK_DISPO_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DISPO_S01.ID ORDER BY E_DD_STOCK_DISPO_S01.FD DESC) = 1 \n),\n/*\nF4101 AS (\n  SELECT \n    F4101_HUB.\"ID\", \"IMITM\",\n    F4101_S01.\"FD\", \"TD\", \"IMLITM\", \"IMAITM\", \"IMDSC1\", \"IMDSC2\", \"IMSRTX\", \"IMALN\", \"IMSRP1\", \"IMSRP2\", \"IMSRP3\", \"IMSRP4\", \"IMSRP5\", \"IMSRP6\", \"IMSRP7\", \"IMSRP8\", \"IMSRP9\", \"IMSRP0\", \"IMPRP1\", \"IMPRP2\", \"IMPRP3\", \"IMPRP4\", \"IMPRP5\", \"IMPRP6\", \"IMPRP7\", \"IMPRP8\", \"IMPRP9\", \"IMPRP0\", \"IMCDCD\", \"IMPDGR\", \"IMDSGP\", \"IMPRGR\", \"IMRPRC\", \"IMORPR\", \"IMBUYR\", \"IMDRAW\", \"IMRVNO\", \"IMDSZE\", \"IMVCUD\", \"IMCARS\", \"IMCARP\", \"IMSHCN\", \"IMSHCM\", \"IMUOM1\", \"IMUOM2\", \"IMUOM3\", \"IMUOM4\", \"IMUOM6\", \"IMUOM8\", \"IMUOM9\", \"IMUWUM\", \"IMUVM1\", \"IMSUTM\", \"IMUMVW\", \"IMCYCL\", \"IMGLPT\", \"IMPLEV\", \"IMPPLV\", \"IMCLEV\", \"IMPRPO\", \"IMCKAV\", \"IMBPFG\", \"IMSRCE\", \"IMOT1Y\", \"IMOT2Y\", \"IMSTDP\", \"IMFRMP\", \"IMTHRP\", \"IMSTDG\", \"IMFRGD\", \"IMTHGD\", \"IMCOTY\", \"IMSTKT\", \"IMLNTY\", \"IMCONT\", \"IMBACK\", \"IMIFLA\", \"IMTFLA\", \"IMINMG\", \"IMABCS\", \"IMABCM\", \"IMABCI\", \"IMOVR\", \"IMWARR\", \"IMCMCG\", \"IMSRNR\", \"IMPMTH\", \"IMFIFO\", \"IMLOTS\", \"IMSLD\", \"IMANPL\", \"IMMPST\", \"IMPCTM\", \"IMMMPC\", \"IMPTSC\", \"IMSNS\", \"IMLTLV\", \"IMLTMF\", \"IMLTCM\", \"IMOPC\", \"IMOPV\", \"IMACQ\", \"IMMLQ\", \"IMLTPU\", \"IMMPSP\", \"IMMRPP\", \"IMITC\", \"IMORDW\", \"IMMTF1\", \"IMMTF2\", \"IMMTF3\", \"IMMTF4\", \"IMMTF5\", \"IMEXPD\", \"IMDEFD\", \"IMSFLT\", \"IMMAKE\", \"IMCOBY\", \"IMLLX\", \"IMCMGL\", \"IMCOMH\", \"IMURCD\", \"IMURDT\", \"IMURAT\", \"IMURAB\", \"IMURRF\", \"IMUSER\", \"IMPID\", \"IMJOBN\", \"IMUPMJ\", \"IMTDAY\", \"IMUPCN\", \"IMSCC0\", \"IMUMUP\", \"IMUMDF\", \"IMUMS0\", \"IMUMS1\", \"IMUMS2\", \"IMUMS3\", \"IMUMS4\", \"IMUMS5\", \"IMUMS6\", \"IMUMS7\", \"IMUMS8\", \"IMPOC\", \"IMAVRT\", \"IMEQTY\", \"IMWTRQ\", \"IMTMPL\", \"IMSEG1\", \"IMSEG2\", \"IMSEG3\", \"IMSEG4\", \"IMSEG5\", \"IMSEG6\", \"IMSEG7\", \"IMSEG8\", \"IMSEG9\", \"IMSEG0\", \"IMMIC\", \"IMAING\", \"IMBBDD\", \"IMCMDM\", \"IMLECM\", \"IMLEDD\", \"IMPEFD\", \"IMSBDD\", \"IMU1DD\", \"IMU2DD\", \"IMU3DD\", \"IMU4DD\", \"IMU5DD\", \"IMDLTL\", \"IMDPPO\", \"IMDUAL\", \"IMXDCK\", \"IMLAF\", \"IMLTFM\", \"IMRWLA\", \"IMLNPA\", \"IMLOTC\", \"IMAPSC\", \"IMAUOM\", \"IMCONB\", \"IMGCMP\", \"IMPRI1\", \"IMPRI2\", \"IMASHL\", \"IMVMINV\", \"IMCMETH\", \"IMEXPI\", \"IMOPTH\", \"IMCUTH\", \"IMUMTH\", \"IMLMFG\", \"IMLINE\", \"IMDFTPCT\", \"IMKBIT\", \"IMDFENDITM\", \"IMKANEXLL\", \"IMSCPSELL\", \"IMMOPTH\", \"IMMCUTH\", \"IMCUMTH\", \"IMATPRN\", \"IMATPCA\", \"IMATPAC\", \"IMCOORE\", \"IMVCPFC\", \"IMPNYN\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_HUB F4101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_S01 F4101_S01 ON F4101_HUB.ID = F4101_S01.ID\n    where F4101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4101_S01.ID ORDER BY F4101_S01.FD DESC) = 1 \n),*/\n\nmerge_key as\n(\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DEB_PERIODE\n    UNION\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DISPO\n),\n\nsource_data as \n(    \n    select\n    mk.ARTICLE_CODE as ITEM_CD,\n    mk.SITE_CODE as SITE_CD,\n    NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE) as TIME_ID,\n    mk.PHOTO_DATE as PHOTO_DT,\n    sha2_binary(to_variant(array_construct(ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT)),512) as PERIOD_INVENTORY_KEY,\n    NVL(sdp.CREATION_DATE,sd.CREATION_DATE) as CREATION_DT,\n    NVL(sdp.QUANTITE_VAL,0) as QTY_START_PERIOD_UOM,\n    NVL(sd.QUANTITE_VAL,0) as QTY_AVAILABLE_UOM,\n    NVL(sdp.FD,sd.FD) as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'NSKEP' as RSCR\n    --Perte de cl\u00e9 via item\n    --sha2_binary(to_variant(array_construct(mk.SITE_CODE)),512) as SITE_KEY,\n    --sha2_binary(to_variant(array_construct(F4101.IMITM, F4101.IMLITM)),512) as ITEM_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_period_date.CALENDAR_KEY)),512) as TIME_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_photo_date.CALENDAR_KEY)),512) as PHOTO_KEY,\n    --sha2_binary(to_variant(array_construct(SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY)),512) as T_LINK_PERIOD_INVENTORY_KEY\n    from merge_key mk\n    left outer join E_DD_STOCK_DEB_PERIODE sdp\n        on sdp.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sdp.SITE_CODE = mk.SITE_CODE\n        and sdp.PERIODE_CODE = mk.PERIODE_CODE\n        and sdp.PHOTO_DATE = mk.PHOTO_DATE\n    left outer join E_DD_STOCK_DISPO sd\n        on sd.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sd.SITE_CODE = mk.SITE_CODE\n        and sd.PERIODE_CODE = mk.PERIODE_CODE\n        and sd.PHOTO_DATE = mk.PHOTO_DATE\n    --left outer join F4101 on F4101.IMLITM = mk.ARTICLE_CODE\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_period_date on calendar_period_date.DT_DDMMYYYY = NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE)\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_photo_date on calendar_photo_date.DT_DDMMYYYY = mk.PHOTO_DATE\n)\n\nselect \n    PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM, EFFECTIVE_FROM, LDTS, RSCR, --SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY, T_LINK_PERIOD_INVENTORY_KEY,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM)),512) as HASHDIFF\nfrom source_data\n)select\n    PERIOD_INVENTORY_KEY as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__dwh_dscp_period_inventory_tmp\nwhere PERIOD_INVENTORY_KEY is not null\ngroup by PERIOD_INVENTORY_KEY\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_dscp_period_inventory_tmp", "sql": " __dbt__cte__dwh_dscp_period_inventory_tmp as (\nWITH \n\nE_DD_STOCK_DEB_PERIODE AS (\n  SELECT \n    E_DD_STOCK_DEB_PERIODE_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DEB_PERIODE_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_HUB E_DD_STOCK_DEB_PERIODE_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_S01 E_DD_STOCK_DEB_PERIODE_S01 ON E_DD_STOCK_DEB_PERIODE_HUB.ID = E_DD_STOCK_DEB_PERIODE_S01.ID\n    where E_DD_STOCK_DEB_PERIODE_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DEB_PERIODE_S01.ID ORDER BY E_DD_STOCK_DEB_PERIODE_S01.FD DESC) = 1 \n),\n\nE_DD_STOCK_DISPO AS (\n  SELECT \n    E_DD_STOCK_DISPO_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DISPO_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_HUB E_DD_STOCK_DISPO_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_S01 E_DD_STOCK_DISPO_S01 ON E_DD_STOCK_DISPO_HUB.ID = E_DD_STOCK_DISPO_S01.ID\n    where E_DD_STOCK_DISPO_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DISPO_S01.ID ORDER BY E_DD_STOCK_DISPO_S01.FD DESC) = 1 \n),\n/*\nF4101 AS (\n  SELECT \n    F4101_HUB.\"ID\", \"IMITM\",\n    F4101_S01.\"FD\", \"TD\", \"IMLITM\", \"IMAITM\", \"IMDSC1\", \"IMDSC2\", \"IMSRTX\", \"IMALN\", \"IMSRP1\", \"IMSRP2\", \"IMSRP3\", \"IMSRP4\", \"IMSRP5\", \"IMSRP6\", \"IMSRP7\", \"IMSRP8\", \"IMSRP9\", \"IMSRP0\", \"IMPRP1\", \"IMPRP2\", \"IMPRP3\", \"IMPRP4\", \"IMPRP5\", \"IMPRP6\", \"IMPRP7\", \"IMPRP8\", \"IMPRP9\", \"IMPRP0\", \"IMCDCD\", \"IMPDGR\", \"IMDSGP\", \"IMPRGR\", \"IMRPRC\", \"IMORPR\", \"IMBUYR\", \"IMDRAW\", \"IMRVNO\", \"IMDSZE\", \"IMVCUD\", \"IMCARS\", \"IMCARP\", \"IMSHCN\", \"IMSHCM\", \"IMUOM1\", \"IMUOM2\", \"IMUOM3\", \"IMUOM4\", \"IMUOM6\", \"IMUOM8\", \"IMUOM9\", \"IMUWUM\", \"IMUVM1\", \"IMSUTM\", \"IMUMVW\", \"IMCYCL\", \"IMGLPT\", \"IMPLEV\", \"IMPPLV\", \"IMCLEV\", \"IMPRPO\", \"IMCKAV\", \"IMBPFG\", \"IMSRCE\", \"IMOT1Y\", \"IMOT2Y\", \"IMSTDP\", \"IMFRMP\", \"IMTHRP\", \"IMSTDG\", \"IMFRGD\", \"IMTHGD\", \"IMCOTY\", \"IMSTKT\", \"IMLNTY\", \"IMCONT\", \"IMBACK\", \"IMIFLA\", \"IMTFLA\", \"IMINMG\", \"IMABCS\", \"IMABCM\", \"IMABCI\", \"IMOVR\", \"IMWARR\", \"IMCMCG\", \"IMSRNR\", \"IMPMTH\", \"IMFIFO\", \"IMLOTS\", \"IMSLD\", \"IMANPL\", \"IMMPST\", \"IMPCTM\", \"IMMMPC\", \"IMPTSC\", \"IMSNS\", \"IMLTLV\", \"IMLTMF\", \"IMLTCM\", \"IMOPC\", \"IMOPV\", \"IMACQ\", \"IMMLQ\", \"IMLTPU\", \"IMMPSP\", \"IMMRPP\", \"IMITC\", \"IMORDW\", \"IMMTF1\", \"IMMTF2\", \"IMMTF3\", \"IMMTF4\", \"IMMTF5\", \"IMEXPD\", \"IMDEFD\", \"IMSFLT\", \"IMMAKE\", \"IMCOBY\", \"IMLLX\", \"IMCMGL\", \"IMCOMH\", \"IMURCD\", \"IMURDT\", \"IMURAT\", \"IMURAB\", \"IMURRF\", \"IMUSER\", \"IMPID\", \"IMJOBN\", \"IMUPMJ\", \"IMTDAY\", \"IMUPCN\", \"IMSCC0\", \"IMUMUP\", \"IMUMDF\", \"IMUMS0\", \"IMUMS1\", \"IMUMS2\", \"IMUMS3\", \"IMUMS4\", \"IMUMS5\", \"IMUMS6\", \"IMUMS7\", \"IMUMS8\", \"IMPOC\", \"IMAVRT\", \"IMEQTY\", \"IMWTRQ\", \"IMTMPL\", \"IMSEG1\", \"IMSEG2\", \"IMSEG3\", \"IMSEG4\", \"IMSEG5\", \"IMSEG6\", \"IMSEG7\", \"IMSEG8\", \"IMSEG9\", \"IMSEG0\", \"IMMIC\", \"IMAING\", \"IMBBDD\", \"IMCMDM\", \"IMLECM\", \"IMLEDD\", \"IMPEFD\", \"IMSBDD\", \"IMU1DD\", \"IMU2DD\", \"IMU3DD\", \"IMU4DD\", \"IMU5DD\", \"IMDLTL\", \"IMDPPO\", \"IMDUAL\", \"IMXDCK\", \"IMLAF\", \"IMLTFM\", \"IMRWLA\", \"IMLNPA\", \"IMLOTC\", \"IMAPSC\", \"IMAUOM\", \"IMCONB\", \"IMGCMP\", \"IMPRI1\", \"IMPRI2\", \"IMASHL\", \"IMVMINV\", \"IMCMETH\", \"IMEXPI\", \"IMOPTH\", \"IMCUTH\", \"IMUMTH\", \"IMLMFG\", \"IMLINE\", \"IMDFTPCT\", \"IMKBIT\", \"IMDFENDITM\", \"IMKANEXLL\", \"IMSCPSELL\", \"IMMOPTH\", \"IMMCUTH\", \"IMCUMTH\", \"IMATPRN\", \"IMATPCA\", \"IMATPAC\", \"IMCOORE\", \"IMVCPFC\", \"IMPNYN\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_HUB F4101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_S01 F4101_S01 ON F4101_HUB.ID = F4101_S01.ID\n    where F4101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4101_S01.ID ORDER BY F4101_S01.FD DESC) = 1 \n),*/\n\nmerge_key as\n(\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DEB_PERIODE\n    UNION\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DISPO\n),\n\nsource_data as \n(    \n    select\n    mk.ARTICLE_CODE as ITEM_CD,\n    mk.SITE_CODE as SITE_CD,\n    NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE) as TIME_ID,\n    mk.PHOTO_DATE as PHOTO_DT,\n    sha2_binary(to_variant(array_construct(ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT)),512) as PERIOD_INVENTORY_KEY,\n    NVL(sdp.CREATION_DATE,sd.CREATION_DATE) as CREATION_DT,\n    NVL(sdp.QUANTITE_VAL,0) as QTY_START_PERIOD_UOM,\n    NVL(sd.QUANTITE_VAL,0) as QTY_AVAILABLE_UOM,\n    NVL(sdp.FD,sd.FD) as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'NSKEP' as RSCR\n    --Perte de cl\u00e9 via item\n    --sha2_binary(to_variant(array_construct(mk.SITE_CODE)),512) as SITE_KEY,\n    --sha2_binary(to_variant(array_construct(F4101.IMITM, F4101.IMLITM)),512) as ITEM_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_period_date.CALENDAR_KEY)),512) as TIME_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_photo_date.CALENDAR_KEY)),512) as PHOTO_KEY,\n    --sha2_binary(to_variant(array_construct(SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY)),512) as T_LINK_PERIOD_INVENTORY_KEY\n    from merge_key mk\n    left outer join E_DD_STOCK_DEB_PERIODE sdp\n        on sdp.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sdp.SITE_CODE = mk.SITE_CODE\n        and sdp.PERIODE_CODE = mk.PERIODE_CODE\n        and sdp.PHOTO_DATE = mk.PHOTO_DATE\n    left outer join E_DD_STOCK_DISPO sd\n        on sd.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sd.SITE_CODE = mk.SITE_CODE\n        and sd.PERIODE_CODE = mk.PERIODE_CODE\n        and sd.PHOTO_DATE = mk.PHOTO_DATE\n    --left outer join F4101 on F4101.IMLITM = mk.ARTICLE_CODE\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_period_date on calendar_period_date.DT_DDMMYYYY = NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE)\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_photo_date on calendar_photo_date.DT_DDMMYYYY = mk.PHOTO_DATE\n)\n\nselect \n    PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM, EFFECTIVE_FROM, LDTS, RSCR, --SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY, T_LINK_PERIOD_INVENTORY_KEY,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM)),512) as HASHDIFF\nfrom source_data\n)"}], "column_name": "PERIOD_INVENTORY_KEY", "file_key_name": "models.dwh_dscp_period_inventory_tmp"}, "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_ITEM_CD.9ee4c4da52": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ITEM_CD", "model": "{{ get_where_subquery(ref('dwh_dscp_period_inventory_tmp')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "not_null_dwh_dscp_period_inventory_tmp_ITEM_CD", "resource_type": "test", "package_name": "dbt_grizzly", "path": "not_null_dwh_dscp_period_inventory_tmp_ITEM_CD.sql", "original_file_path": "models\\20_silver_db\\dscp_sch\\00_stage\\dwh_dscp_period_inventory_tmp.schema.yml", "unique_id": "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_ITEM_CD.9ee4c4da52", "fqn": ["dbt_grizzly", "20_silver_db", "dscp_sch", "00_stage", "not_null_dwh_dscp_period_inventory_tmp_ITEM_CD"], "alias": "not_null_dwh_dscp_period_inventory_tmp_ITEM_CD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884072.841611, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_dscp_period_inventory_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\dscp_sch\\00_stage\\dwh_dscp_period_inventory_tmp.schema.yml\\not_null_dwh_dscp_period_inventory_tmp_ITEM_CD.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__dwh_dscp_period_inventory_tmp as (\nWITH \n\nE_DD_STOCK_DEB_PERIODE AS (\n  SELECT \n    E_DD_STOCK_DEB_PERIODE_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DEB_PERIODE_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_HUB E_DD_STOCK_DEB_PERIODE_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_S01 E_DD_STOCK_DEB_PERIODE_S01 ON E_DD_STOCK_DEB_PERIODE_HUB.ID = E_DD_STOCK_DEB_PERIODE_S01.ID\n    where E_DD_STOCK_DEB_PERIODE_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DEB_PERIODE_S01.ID ORDER BY E_DD_STOCK_DEB_PERIODE_S01.FD DESC) = 1 \n),\n\nE_DD_STOCK_DISPO AS (\n  SELECT \n    E_DD_STOCK_DISPO_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DISPO_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_HUB E_DD_STOCK_DISPO_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_S01 E_DD_STOCK_DISPO_S01 ON E_DD_STOCK_DISPO_HUB.ID = E_DD_STOCK_DISPO_S01.ID\n    where E_DD_STOCK_DISPO_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DISPO_S01.ID ORDER BY E_DD_STOCK_DISPO_S01.FD DESC) = 1 \n),\n/*\nF4101 AS (\n  SELECT \n    F4101_HUB.\"ID\", \"IMITM\",\n    F4101_S01.\"FD\", \"TD\", \"IMLITM\", \"IMAITM\", \"IMDSC1\", \"IMDSC2\", \"IMSRTX\", \"IMALN\", \"IMSRP1\", \"IMSRP2\", \"IMSRP3\", \"IMSRP4\", \"IMSRP5\", \"IMSRP6\", \"IMSRP7\", \"IMSRP8\", \"IMSRP9\", \"IMSRP0\", \"IMPRP1\", \"IMPRP2\", \"IMPRP3\", \"IMPRP4\", \"IMPRP5\", \"IMPRP6\", \"IMPRP7\", \"IMPRP8\", \"IMPRP9\", \"IMPRP0\", \"IMCDCD\", \"IMPDGR\", \"IMDSGP\", \"IMPRGR\", \"IMRPRC\", \"IMORPR\", \"IMBUYR\", \"IMDRAW\", \"IMRVNO\", \"IMDSZE\", \"IMVCUD\", \"IMCARS\", \"IMCARP\", \"IMSHCN\", \"IMSHCM\", \"IMUOM1\", \"IMUOM2\", \"IMUOM3\", \"IMUOM4\", \"IMUOM6\", \"IMUOM8\", \"IMUOM9\", \"IMUWUM\", \"IMUVM1\", \"IMSUTM\", \"IMUMVW\", \"IMCYCL\", \"IMGLPT\", \"IMPLEV\", \"IMPPLV\", \"IMCLEV\", \"IMPRPO\", \"IMCKAV\", \"IMBPFG\", \"IMSRCE\", \"IMOT1Y\", \"IMOT2Y\", \"IMSTDP\", \"IMFRMP\", \"IMTHRP\", \"IMSTDG\", \"IMFRGD\", \"IMTHGD\", \"IMCOTY\", \"IMSTKT\", \"IMLNTY\", \"IMCONT\", \"IMBACK\", \"IMIFLA\", \"IMTFLA\", \"IMINMG\", \"IMABCS\", \"IMABCM\", \"IMABCI\", \"IMOVR\", \"IMWARR\", \"IMCMCG\", \"IMSRNR\", \"IMPMTH\", \"IMFIFO\", \"IMLOTS\", \"IMSLD\", \"IMANPL\", \"IMMPST\", \"IMPCTM\", \"IMMMPC\", \"IMPTSC\", \"IMSNS\", \"IMLTLV\", \"IMLTMF\", \"IMLTCM\", \"IMOPC\", \"IMOPV\", \"IMACQ\", \"IMMLQ\", \"IMLTPU\", \"IMMPSP\", \"IMMRPP\", \"IMITC\", \"IMORDW\", \"IMMTF1\", \"IMMTF2\", \"IMMTF3\", \"IMMTF4\", \"IMMTF5\", \"IMEXPD\", \"IMDEFD\", \"IMSFLT\", \"IMMAKE\", \"IMCOBY\", \"IMLLX\", \"IMCMGL\", \"IMCOMH\", \"IMURCD\", \"IMURDT\", \"IMURAT\", \"IMURAB\", \"IMURRF\", \"IMUSER\", \"IMPID\", \"IMJOBN\", \"IMUPMJ\", \"IMTDAY\", \"IMUPCN\", \"IMSCC0\", \"IMUMUP\", \"IMUMDF\", \"IMUMS0\", \"IMUMS1\", \"IMUMS2\", \"IMUMS3\", \"IMUMS4\", \"IMUMS5\", \"IMUMS6\", \"IMUMS7\", \"IMUMS8\", \"IMPOC\", \"IMAVRT\", \"IMEQTY\", \"IMWTRQ\", \"IMTMPL\", \"IMSEG1\", \"IMSEG2\", \"IMSEG3\", \"IMSEG4\", \"IMSEG5\", \"IMSEG6\", \"IMSEG7\", \"IMSEG8\", \"IMSEG9\", \"IMSEG0\", \"IMMIC\", \"IMAING\", \"IMBBDD\", \"IMCMDM\", \"IMLECM\", \"IMLEDD\", \"IMPEFD\", \"IMSBDD\", \"IMU1DD\", \"IMU2DD\", \"IMU3DD\", \"IMU4DD\", \"IMU5DD\", \"IMDLTL\", \"IMDPPO\", \"IMDUAL\", \"IMXDCK\", \"IMLAF\", \"IMLTFM\", \"IMRWLA\", \"IMLNPA\", \"IMLOTC\", \"IMAPSC\", \"IMAUOM\", \"IMCONB\", \"IMGCMP\", \"IMPRI1\", \"IMPRI2\", \"IMASHL\", \"IMVMINV\", \"IMCMETH\", \"IMEXPI\", \"IMOPTH\", \"IMCUTH\", \"IMUMTH\", \"IMLMFG\", \"IMLINE\", \"IMDFTPCT\", \"IMKBIT\", \"IMDFENDITM\", \"IMKANEXLL\", \"IMSCPSELL\", \"IMMOPTH\", \"IMMCUTH\", \"IMCUMTH\", \"IMATPRN\", \"IMATPCA\", \"IMATPAC\", \"IMCOORE\", \"IMVCPFC\", \"IMPNYN\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_HUB F4101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_S01 F4101_S01 ON F4101_HUB.ID = F4101_S01.ID\n    where F4101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4101_S01.ID ORDER BY F4101_S01.FD DESC) = 1 \n),*/\n\nmerge_key as\n(\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DEB_PERIODE\n    UNION\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DISPO\n),\n\nsource_data as \n(    \n    select\n    mk.ARTICLE_CODE as ITEM_CD,\n    mk.SITE_CODE as SITE_CD,\n    NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE) as TIME_ID,\n    mk.PHOTO_DATE as PHOTO_DT,\n    sha2_binary(to_variant(array_construct(ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT)),512) as PERIOD_INVENTORY_KEY,\n    NVL(sdp.CREATION_DATE,sd.CREATION_DATE) as CREATION_DT,\n    NVL(sdp.QUANTITE_VAL,0) as QTY_START_PERIOD_UOM,\n    NVL(sd.QUANTITE_VAL,0) as QTY_AVAILABLE_UOM,\n    NVL(sdp.FD,sd.FD) as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'NSKEP' as RSCR\n    --Perte de cl\u00e9 via item\n    --sha2_binary(to_variant(array_construct(mk.SITE_CODE)),512) as SITE_KEY,\n    --sha2_binary(to_variant(array_construct(F4101.IMITM, F4101.IMLITM)),512) as ITEM_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_period_date.CALENDAR_KEY)),512) as TIME_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_photo_date.CALENDAR_KEY)),512) as PHOTO_KEY,\n    --sha2_binary(to_variant(array_construct(SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY)),512) as T_LINK_PERIOD_INVENTORY_KEY\n    from merge_key mk\n    left outer join E_DD_STOCK_DEB_PERIODE sdp\n        on sdp.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sdp.SITE_CODE = mk.SITE_CODE\n        and sdp.PERIODE_CODE = mk.PERIODE_CODE\n        and sdp.PHOTO_DATE = mk.PHOTO_DATE\n    left outer join E_DD_STOCK_DISPO sd\n        on sd.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sd.SITE_CODE = mk.SITE_CODE\n        and sd.PERIODE_CODE = mk.PERIODE_CODE\n        and sd.PHOTO_DATE = mk.PHOTO_DATE\n    --left outer join F4101 on F4101.IMLITM = mk.ARTICLE_CODE\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_period_date on calendar_period_date.DT_DDMMYYYY = NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE)\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_photo_date on calendar_photo_date.DT_DDMMYYYY = mk.PHOTO_DATE\n)\n\nselect \n    PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM, EFFECTIVE_FROM, LDTS, RSCR, --SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY, T_LINK_PERIOD_INVENTORY_KEY,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM)),512) as HASHDIFF\nfrom source_data\n)select ITEM_CD\nfrom __dbt__cte__dwh_dscp_period_inventory_tmp\nwhere ITEM_CD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_dscp_period_inventory_tmp", "sql": " __dbt__cte__dwh_dscp_period_inventory_tmp as (\nWITH \n\nE_DD_STOCK_DEB_PERIODE AS (\n  SELECT \n    E_DD_STOCK_DEB_PERIODE_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DEB_PERIODE_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_HUB E_DD_STOCK_DEB_PERIODE_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_S01 E_DD_STOCK_DEB_PERIODE_S01 ON E_DD_STOCK_DEB_PERIODE_HUB.ID = E_DD_STOCK_DEB_PERIODE_S01.ID\n    where E_DD_STOCK_DEB_PERIODE_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DEB_PERIODE_S01.ID ORDER BY E_DD_STOCK_DEB_PERIODE_S01.FD DESC) = 1 \n),\n\nE_DD_STOCK_DISPO AS (\n  SELECT \n    E_DD_STOCK_DISPO_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DISPO_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_HUB E_DD_STOCK_DISPO_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_S01 E_DD_STOCK_DISPO_S01 ON E_DD_STOCK_DISPO_HUB.ID = E_DD_STOCK_DISPO_S01.ID\n    where E_DD_STOCK_DISPO_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DISPO_S01.ID ORDER BY E_DD_STOCK_DISPO_S01.FD DESC) = 1 \n),\n/*\nF4101 AS (\n  SELECT \n    F4101_HUB.\"ID\", \"IMITM\",\n    F4101_S01.\"FD\", \"TD\", \"IMLITM\", \"IMAITM\", \"IMDSC1\", \"IMDSC2\", \"IMSRTX\", \"IMALN\", \"IMSRP1\", \"IMSRP2\", \"IMSRP3\", \"IMSRP4\", \"IMSRP5\", \"IMSRP6\", \"IMSRP7\", \"IMSRP8\", \"IMSRP9\", \"IMSRP0\", \"IMPRP1\", \"IMPRP2\", \"IMPRP3\", \"IMPRP4\", \"IMPRP5\", \"IMPRP6\", \"IMPRP7\", \"IMPRP8\", \"IMPRP9\", \"IMPRP0\", \"IMCDCD\", \"IMPDGR\", \"IMDSGP\", \"IMPRGR\", \"IMRPRC\", \"IMORPR\", \"IMBUYR\", \"IMDRAW\", \"IMRVNO\", \"IMDSZE\", \"IMVCUD\", \"IMCARS\", \"IMCARP\", \"IMSHCN\", \"IMSHCM\", \"IMUOM1\", \"IMUOM2\", \"IMUOM3\", \"IMUOM4\", \"IMUOM6\", \"IMUOM8\", \"IMUOM9\", \"IMUWUM\", \"IMUVM1\", \"IMSUTM\", \"IMUMVW\", \"IMCYCL\", \"IMGLPT\", \"IMPLEV\", \"IMPPLV\", \"IMCLEV\", \"IMPRPO\", \"IMCKAV\", \"IMBPFG\", \"IMSRCE\", \"IMOT1Y\", \"IMOT2Y\", \"IMSTDP\", \"IMFRMP\", \"IMTHRP\", \"IMSTDG\", \"IMFRGD\", \"IMTHGD\", \"IMCOTY\", \"IMSTKT\", \"IMLNTY\", \"IMCONT\", \"IMBACK\", \"IMIFLA\", \"IMTFLA\", \"IMINMG\", \"IMABCS\", \"IMABCM\", \"IMABCI\", \"IMOVR\", \"IMWARR\", \"IMCMCG\", \"IMSRNR\", \"IMPMTH\", \"IMFIFO\", \"IMLOTS\", \"IMSLD\", \"IMANPL\", \"IMMPST\", \"IMPCTM\", \"IMMMPC\", \"IMPTSC\", \"IMSNS\", \"IMLTLV\", \"IMLTMF\", \"IMLTCM\", \"IMOPC\", \"IMOPV\", \"IMACQ\", \"IMMLQ\", \"IMLTPU\", \"IMMPSP\", \"IMMRPP\", \"IMITC\", \"IMORDW\", \"IMMTF1\", \"IMMTF2\", \"IMMTF3\", \"IMMTF4\", \"IMMTF5\", \"IMEXPD\", \"IMDEFD\", \"IMSFLT\", \"IMMAKE\", \"IMCOBY\", \"IMLLX\", \"IMCMGL\", \"IMCOMH\", \"IMURCD\", \"IMURDT\", \"IMURAT\", \"IMURAB\", \"IMURRF\", \"IMUSER\", \"IMPID\", \"IMJOBN\", \"IMUPMJ\", \"IMTDAY\", \"IMUPCN\", \"IMSCC0\", \"IMUMUP\", \"IMUMDF\", \"IMUMS0\", \"IMUMS1\", \"IMUMS2\", \"IMUMS3\", \"IMUMS4\", \"IMUMS5\", \"IMUMS6\", \"IMUMS7\", \"IMUMS8\", \"IMPOC\", \"IMAVRT\", \"IMEQTY\", \"IMWTRQ\", \"IMTMPL\", \"IMSEG1\", \"IMSEG2\", \"IMSEG3\", \"IMSEG4\", \"IMSEG5\", \"IMSEG6\", \"IMSEG7\", \"IMSEG8\", \"IMSEG9\", \"IMSEG0\", \"IMMIC\", \"IMAING\", \"IMBBDD\", \"IMCMDM\", \"IMLECM\", \"IMLEDD\", \"IMPEFD\", \"IMSBDD\", \"IMU1DD\", \"IMU2DD\", \"IMU3DD\", \"IMU4DD\", \"IMU5DD\", \"IMDLTL\", \"IMDPPO\", \"IMDUAL\", \"IMXDCK\", \"IMLAF\", \"IMLTFM\", \"IMRWLA\", \"IMLNPA\", \"IMLOTC\", \"IMAPSC\", \"IMAUOM\", \"IMCONB\", \"IMGCMP\", \"IMPRI1\", \"IMPRI2\", \"IMASHL\", \"IMVMINV\", \"IMCMETH\", \"IMEXPI\", \"IMOPTH\", \"IMCUTH\", \"IMUMTH\", \"IMLMFG\", \"IMLINE\", \"IMDFTPCT\", \"IMKBIT\", \"IMDFENDITM\", \"IMKANEXLL\", \"IMSCPSELL\", \"IMMOPTH\", \"IMMCUTH\", \"IMCUMTH\", \"IMATPRN\", \"IMATPCA\", \"IMATPAC\", \"IMCOORE\", \"IMVCPFC\", \"IMPNYN\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_HUB F4101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_S01 F4101_S01 ON F4101_HUB.ID = F4101_S01.ID\n    where F4101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4101_S01.ID ORDER BY F4101_S01.FD DESC) = 1 \n),*/\n\nmerge_key as\n(\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DEB_PERIODE\n    UNION\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DISPO\n),\n\nsource_data as \n(    \n    select\n    mk.ARTICLE_CODE as ITEM_CD,\n    mk.SITE_CODE as SITE_CD,\n    NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE) as TIME_ID,\n    mk.PHOTO_DATE as PHOTO_DT,\n    sha2_binary(to_variant(array_construct(ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT)),512) as PERIOD_INVENTORY_KEY,\n    NVL(sdp.CREATION_DATE,sd.CREATION_DATE) as CREATION_DT,\n    NVL(sdp.QUANTITE_VAL,0) as QTY_START_PERIOD_UOM,\n    NVL(sd.QUANTITE_VAL,0) as QTY_AVAILABLE_UOM,\n    NVL(sdp.FD,sd.FD) as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'NSKEP' as RSCR\n    --Perte de cl\u00e9 via item\n    --sha2_binary(to_variant(array_construct(mk.SITE_CODE)),512) as SITE_KEY,\n    --sha2_binary(to_variant(array_construct(F4101.IMITM, F4101.IMLITM)),512) as ITEM_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_period_date.CALENDAR_KEY)),512) as TIME_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_photo_date.CALENDAR_KEY)),512) as PHOTO_KEY,\n    --sha2_binary(to_variant(array_construct(SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY)),512) as T_LINK_PERIOD_INVENTORY_KEY\n    from merge_key mk\n    left outer join E_DD_STOCK_DEB_PERIODE sdp\n        on sdp.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sdp.SITE_CODE = mk.SITE_CODE\n        and sdp.PERIODE_CODE = mk.PERIODE_CODE\n        and sdp.PHOTO_DATE = mk.PHOTO_DATE\n    left outer join E_DD_STOCK_DISPO sd\n        on sd.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sd.SITE_CODE = mk.SITE_CODE\n        and sd.PERIODE_CODE = mk.PERIODE_CODE\n        and sd.PHOTO_DATE = mk.PHOTO_DATE\n    --left outer join F4101 on F4101.IMLITM = mk.ARTICLE_CODE\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_period_date on calendar_period_date.DT_DDMMYYYY = NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE)\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_photo_date on calendar_photo_date.DT_DDMMYYYY = mk.PHOTO_DATE\n)\n\nselect \n    PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM, EFFECTIVE_FROM, LDTS, RSCR, --SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY, T_LINK_PERIOD_INVENTORY_KEY,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM)),512) as HASHDIFF\nfrom source_data\n)"}], "column_name": "ITEM_CD", "file_key_name": "models.dwh_dscp_period_inventory_tmp"}, "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_SITE_CD.ca3aeedafb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SITE_CD", "model": "{{ get_where_subquery(ref('dwh_dscp_period_inventory_tmp')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "not_null_dwh_dscp_period_inventory_tmp_SITE_CD", "resource_type": "test", "package_name": "dbt_grizzly", "path": "not_null_dwh_dscp_period_inventory_tmp_SITE_CD.sql", "original_file_path": "models\\20_silver_db\\dscp_sch\\00_stage\\dwh_dscp_period_inventory_tmp.schema.yml", "unique_id": "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_SITE_CD.ca3aeedafb", "fqn": ["dbt_grizzly", "20_silver_db", "dscp_sch", "00_stage", "not_null_dwh_dscp_period_inventory_tmp_SITE_CD"], "alias": "not_null_dwh_dscp_period_inventory_tmp_SITE_CD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884072.8434706, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_dscp_period_inventory_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\dscp_sch\\00_stage\\dwh_dscp_period_inventory_tmp.schema.yml\\not_null_dwh_dscp_period_inventory_tmp_SITE_CD.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__dwh_dscp_period_inventory_tmp as (\nWITH \n\nE_DD_STOCK_DEB_PERIODE AS (\n  SELECT \n    E_DD_STOCK_DEB_PERIODE_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DEB_PERIODE_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_HUB E_DD_STOCK_DEB_PERIODE_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_S01 E_DD_STOCK_DEB_PERIODE_S01 ON E_DD_STOCK_DEB_PERIODE_HUB.ID = E_DD_STOCK_DEB_PERIODE_S01.ID\n    where E_DD_STOCK_DEB_PERIODE_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DEB_PERIODE_S01.ID ORDER BY E_DD_STOCK_DEB_PERIODE_S01.FD DESC) = 1 \n),\n\nE_DD_STOCK_DISPO AS (\n  SELECT \n    E_DD_STOCK_DISPO_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DISPO_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_HUB E_DD_STOCK_DISPO_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_S01 E_DD_STOCK_DISPO_S01 ON E_DD_STOCK_DISPO_HUB.ID = E_DD_STOCK_DISPO_S01.ID\n    where E_DD_STOCK_DISPO_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DISPO_S01.ID ORDER BY E_DD_STOCK_DISPO_S01.FD DESC) = 1 \n),\n/*\nF4101 AS (\n  SELECT \n    F4101_HUB.\"ID\", \"IMITM\",\n    F4101_S01.\"FD\", \"TD\", \"IMLITM\", \"IMAITM\", \"IMDSC1\", \"IMDSC2\", \"IMSRTX\", \"IMALN\", \"IMSRP1\", \"IMSRP2\", \"IMSRP3\", \"IMSRP4\", \"IMSRP5\", \"IMSRP6\", \"IMSRP7\", \"IMSRP8\", \"IMSRP9\", \"IMSRP0\", \"IMPRP1\", \"IMPRP2\", \"IMPRP3\", \"IMPRP4\", \"IMPRP5\", \"IMPRP6\", \"IMPRP7\", \"IMPRP8\", \"IMPRP9\", \"IMPRP0\", \"IMCDCD\", \"IMPDGR\", \"IMDSGP\", \"IMPRGR\", \"IMRPRC\", \"IMORPR\", \"IMBUYR\", \"IMDRAW\", \"IMRVNO\", \"IMDSZE\", \"IMVCUD\", \"IMCARS\", \"IMCARP\", \"IMSHCN\", \"IMSHCM\", \"IMUOM1\", \"IMUOM2\", \"IMUOM3\", \"IMUOM4\", \"IMUOM6\", \"IMUOM8\", \"IMUOM9\", \"IMUWUM\", \"IMUVM1\", \"IMSUTM\", \"IMUMVW\", \"IMCYCL\", \"IMGLPT\", \"IMPLEV\", \"IMPPLV\", \"IMCLEV\", \"IMPRPO\", \"IMCKAV\", \"IMBPFG\", \"IMSRCE\", \"IMOT1Y\", \"IMOT2Y\", \"IMSTDP\", \"IMFRMP\", \"IMTHRP\", \"IMSTDG\", \"IMFRGD\", \"IMTHGD\", \"IMCOTY\", \"IMSTKT\", \"IMLNTY\", \"IMCONT\", \"IMBACK\", \"IMIFLA\", \"IMTFLA\", \"IMINMG\", \"IMABCS\", \"IMABCM\", \"IMABCI\", \"IMOVR\", \"IMWARR\", \"IMCMCG\", \"IMSRNR\", \"IMPMTH\", \"IMFIFO\", \"IMLOTS\", \"IMSLD\", \"IMANPL\", \"IMMPST\", \"IMPCTM\", \"IMMMPC\", \"IMPTSC\", \"IMSNS\", \"IMLTLV\", \"IMLTMF\", \"IMLTCM\", \"IMOPC\", \"IMOPV\", \"IMACQ\", \"IMMLQ\", \"IMLTPU\", \"IMMPSP\", \"IMMRPP\", \"IMITC\", \"IMORDW\", \"IMMTF1\", \"IMMTF2\", \"IMMTF3\", \"IMMTF4\", \"IMMTF5\", \"IMEXPD\", \"IMDEFD\", \"IMSFLT\", \"IMMAKE\", \"IMCOBY\", \"IMLLX\", \"IMCMGL\", \"IMCOMH\", \"IMURCD\", \"IMURDT\", \"IMURAT\", \"IMURAB\", \"IMURRF\", \"IMUSER\", \"IMPID\", \"IMJOBN\", \"IMUPMJ\", \"IMTDAY\", \"IMUPCN\", \"IMSCC0\", \"IMUMUP\", \"IMUMDF\", \"IMUMS0\", \"IMUMS1\", \"IMUMS2\", \"IMUMS3\", \"IMUMS4\", \"IMUMS5\", \"IMUMS6\", \"IMUMS7\", \"IMUMS8\", \"IMPOC\", \"IMAVRT\", \"IMEQTY\", \"IMWTRQ\", \"IMTMPL\", \"IMSEG1\", \"IMSEG2\", \"IMSEG3\", \"IMSEG4\", \"IMSEG5\", \"IMSEG6\", \"IMSEG7\", \"IMSEG8\", \"IMSEG9\", \"IMSEG0\", \"IMMIC\", \"IMAING\", \"IMBBDD\", \"IMCMDM\", \"IMLECM\", \"IMLEDD\", \"IMPEFD\", \"IMSBDD\", \"IMU1DD\", \"IMU2DD\", \"IMU3DD\", \"IMU4DD\", \"IMU5DD\", \"IMDLTL\", \"IMDPPO\", \"IMDUAL\", \"IMXDCK\", \"IMLAF\", \"IMLTFM\", \"IMRWLA\", \"IMLNPA\", \"IMLOTC\", \"IMAPSC\", \"IMAUOM\", \"IMCONB\", \"IMGCMP\", \"IMPRI1\", \"IMPRI2\", \"IMASHL\", \"IMVMINV\", \"IMCMETH\", \"IMEXPI\", \"IMOPTH\", \"IMCUTH\", \"IMUMTH\", \"IMLMFG\", \"IMLINE\", \"IMDFTPCT\", \"IMKBIT\", \"IMDFENDITM\", \"IMKANEXLL\", \"IMSCPSELL\", \"IMMOPTH\", \"IMMCUTH\", \"IMCUMTH\", \"IMATPRN\", \"IMATPCA\", \"IMATPAC\", \"IMCOORE\", \"IMVCPFC\", \"IMPNYN\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_HUB F4101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_S01 F4101_S01 ON F4101_HUB.ID = F4101_S01.ID\n    where F4101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4101_S01.ID ORDER BY F4101_S01.FD DESC) = 1 \n),*/\n\nmerge_key as\n(\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DEB_PERIODE\n    UNION\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DISPO\n),\n\nsource_data as \n(    \n    select\n    mk.ARTICLE_CODE as ITEM_CD,\n    mk.SITE_CODE as SITE_CD,\n    NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE) as TIME_ID,\n    mk.PHOTO_DATE as PHOTO_DT,\n    sha2_binary(to_variant(array_construct(ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT)),512) as PERIOD_INVENTORY_KEY,\n    NVL(sdp.CREATION_DATE,sd.CREATION_DATE) as CREATION_DT,\n    NVL(sdp.QUANTITE_VAL,0) as QTY_START_PERIOD_UOM,\n    NVL(sd.QUANTITE_VAL,0) as QTY_AVAILABLE_UOM,\n    NVL(sdp.FD,sd.FD) as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'NSKEP' as RSCR\n    --Perte de cl\u00e9 via item\n    --sha2_binary(to_variant(array_construct(mk.SITE_CODE)),512) as SITE_KEY,\n    --sha2_binary(to_variant(array_construct(F4101.IMITM, F4101.IMLITM)),512) as ITEM_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_period_date.CALENDAR_KEY)),512) as TIME_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_photo_date.CALENDAR_KEY)),512) as PHOTO_KEY,\n    --sha2_binary(to_variant(array_construct(SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY)),512) as T_LINK_PERIOD_INVENTORY_KEY\n    from merge_key mk\n    left outer join E_DD_STOCK_DEB_PERIODE sdp\n        on sdp.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sdp.SITE_CODE = mk.SITE_CODE\n        and sdp.PERIODE_CODE = mk.PERIODE_CODE\n        and sdp.PHOTO_DATE = mk.PHOTO_DATE\n    left outer join E_DD_STOCK_DISPO sd\n        on sd.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sd.SITE_CODE = mk.SITE_CODE\n        and sd.PERIODE_CODE = mk.PERIODE_CODE\n        and sd.PHOTO_DATE = mk.PHOTO_DATE\n    --left outer join F4101 on F4101.IMLITM = mk.ARTICLE_CODE\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_period_date on calendar_period_date.DT_DDMMYYYY = NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE)\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_photo_date on calendar_photo_date.DT_DDMMYYYY = mk.PHOTO_DATE\n)\n\nselect \n    PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM, EFFECTIVE_FROM, LDTS, RSCR, --SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY, T_LINK_PERIOD_INVENTORY_KEY,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM)),512) as HASHDIFF\nfrom source_data\n)select SITE_CD\nfrom __dbt__cte__dwh_dscp_period_inventory_tmp\nwhere SITE_CD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_dscp_period_inventory_tmp", "sql": " __dbt__cte__dwh_dscp_period_inventory_tmp as (\nWITH \n\nE_DD_STOCK_DEB_PERIODE AS (\n  SELECT \n    E_DD_STOCK_DEB_PERIODE_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DEB_PERIODE_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_HUB E_DD_STOCK_DEB_PERIODE_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_S01 E_DD_STOCK_DEB_PERIODE_S01 ON E_DD_STOCK_DEB_PERIODE_HUB.ID = E_DD_STOCK_DEB_PERIODE_S01.ID\n    where E_DD_STOCK_DEB_PERIODE_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DEB_PERIODE_S01.ID ORDER BY E_DD_STOCK_DEB_PERIODE_S01.FD DESC) = 1 \n),\n\nE_DD_STOCK_DISPO AS (\n  SELECT \n    E_DD_STOCK_DISPO_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DISPO_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_HUB E_DD_STOCK_DISPO_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_S01 E_DD_STOCK_DISPO_S01 ON E_DD_STOCK_DISPO_HUB.ID = E_DD_STOCK_DISPO_S01.ID\n    where E_DD_STOCK_DISPO_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DISPO_S01.ID ORDER BY E_DD_STOCK_DISPO_S01.FD DESC) = 1 \n),\n/*\nF4101 AS (\n  SELECT \n    F4101_HUB.\"ID\", \"IMITM\",\n    F4101_S01.\"FD\", \"TD\", \"IMLITM\", \"IMAITM\", \"IMDSC1\", \"IMDSC2\", \"IMSRTX\", \"IMALN\", \"IMSRP1\", \"IMSRP2\", \"IMSRP3\", \"IMSRP4\", \"IMSRP5\", \"IMSRP6\", \"IMSRP7\", \"IMSRP8\", \"IMSRP9\", \"IMSRP0\", \"IMPRP1\", \"IMPRP2\", \"IMPRP3\", \"IMPRP4\", \"IMPRP5\", \"IMPRP6\", \"IMPRP7\", \"IMPRP8\", \"IMPRP9\", \"IMPRP0\", \"IMCDCD\", \"IMPDGR\", \"IMDSGP\", \"IMPRGR\", \"IMRPRC\", \"IMORPR\", \"IMBUYR\", \"IMDRAW\", \"IMRVNO\", \"IMDSZE\", \"IMVCUD\", \"IMCARS\", \"IMCARP\", \"IMSHCN\", \"IMSHCM\", \"IMUOM1\", \"IMUOM2\", \"IMUOM3\", \"IMUOM4\", \"IMUOM6\", \"IMUOM8\", \"IMUOM9\", \"IMUWUM\", \"IMUVM1\", \"IMSUTM\", \"IMUMVW\", \"IMCYCL\", \"IMGLPT\", \"IMPLEV\", \"IMPPLV\", \"IMCLEV\", \"IMPRPO\", \"IMCKAV\", \"IMBPFG\", \"IMSRCE\", \"IMOT1Y\", \"IMOT2Y\", \"IMSTDP\", \"IMFRMP\", \"IMTHRP\", \"IMSTDG\", \"IMFRGD\", \"IMTHGD\", \"IMCOTY\", \"IMSTKT\", \"IMLNTY\", \"IMCONT\", \"IMBACK\", \"IMIFLA\", \"IMTFLA\", \"IMINMG\", \"IMABCS\", \"IMABCM\", \"IMABCI\", \"IMOVR\", \"IMWARR\", \"IMCMCG\", \"IMSRNR\", \"IMPMTH\", \"IMFIFO\", \"IMLOTS\", \"IMSLD\", \"IMANPL\", \"IMMPST\", \"IMPCTM\", \"IMMMPC\", \"IMPTSC\", \"IMSNS\", \"IMLTLV\", \"IMLTMF\", \"IMLTCM\", \"IMOPC\", \"IMOPV\", \"IMACQ\", \"IMMLQ\", \"IMLTPU\", \"IMMPSP\", \"IMMRPP\", \"IMITC\", \"IMORDW\", \"IMMTF1\", \"IMMTF2\", \"IMMTF3\", \"IMMTF4\", \"IMMTF5\", \"IMEXPD\", \"IMDEFD\", \"IMSFLT\", \"IMMAKE\", \"IMCOBY\", \"IMLLX\", \"IMCMGL\", \"IMCOMH\", \"IMURCD\", \"IMURDT\", \"IMURAT\", \"IMURAB\", \"IMURRF\", \"IMUSER\", \"IMPID\", \"IMJOBN\", \"IMUPMJ\", \"IMTDAY\", \"IMUPCN\", \"IMSCC0\", \"IMUMUP\", \"IMUMDF\", \"IMUMS0\", \"IMUMS1\", \"IMUMS2\", \"IMUMS3\", \"IMUMS4\", \"IMUMS5\", \"IMUMS6\", \"IMUMS7\", \"IMUMS8\", \"IMPOC\", \"IMAVRT\", \"IMEQTY\", \"IMWTRQ\", \"IMTMPL\", \"IMSEG1\", \"IMSEG2\", \"IMSEG3\", \"IMSEG4\", \"IMSEG5\", \"IMSEG6\", \"IMSEG7\", \"IMSEG8\", \"IMSEG9\", \"IMSEG0\", \"IMMIC\", \"IMAING\", \"IMBBDD\", \"IMCMDM\", \"IMLECM\", \"IMLEDD\", \"IMPEFD\", \"IMSBDD\", \"IMU1DD\", \"IMU2DD\", \"IMU3DD\", \"IMU4DD\", \"IMU5DD\", \"IMDLTL\", \"IMDPPO\", \"IMDUAL\", \"IMXDCK\", \"IMLAF\", \"IMLTFM\", \"IMRWLA\", \"IMLNPA\", \"IMLOTC\", \"IMAPSC\", \"IMAUOM\", \"IMCONB\", \"IMGCMP\", \"IMPRI1\", \"IMPRI2\", \"IMASHL\", \"IMVMINV\", \"IMCMETH\", \"IMEXPI\", \"IMOPTH\", \"IMCUTH\", \"IMUMTH\", \"IMLMFG\", \"IMLINE\", \"IMDFTPCT\", \"IMKBIT\", \"IMDFENDITM\", \"IMKANEXLL\", \"IMSCPSELL\", \"IMMOPTH\", \"IMMCUTH\", \"IMCUMTH\", \"IMATPRN\", \"IMATPCA\", \"IMATPAC\", \"IMCOORE\", \"IMVCPFC\", \"IMPNYN\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_HUB F4101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_S01 F4101_S01 ON F4101_HUB.ID = F4101_S01.ID\n    where F4101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4101_S01.ID ORDER BY F4101_S01.FD DESC) = 1 \n),*/\n\nmerge_key as\n(\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DEB_PERIODE\n    UNION\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DISPO\n),\n\nsource_data as \n(    \n    select\n    mk.ARTICLE_CODE as ITEM_CD,\n    mk.SITE_CODE as SITE_CD,\n    NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE) as TIME_ID,\n    mk.PHOTO_DATE as PHOTO_DT,\n    sha2_binary(to_variant(array_construct(ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT)),512) as PERIOD_INVENTORY_KEY,\n    NVL(sdp.CREATION_DATE,sd.CREATION_DATE) as CREATION_DT,\n    NVL(sdp.QUANTITE_VAL,0) as QTY_START_PERIOD_UOM,\n    NVL(sd.QUANTITE_VAL,0) as QTY_AVAILABLE_UOM,\n    NVL(sdp.FD,sd.FD) as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'NSKEP' as RSCR\n    --Perte de cl\u00e9 via item\n    --sha2_binary(to_variant(array_construct(mk.SITE_CODE)),512) as SITE_KEY,\n    --sha2_binary(to_variant(array_construct(F4101.IMITM, F4101.IMLITM)),512) as ITEM_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_period_date.CALENDAR_KEY)),512) as TIME_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_photo_date.CALENDAR_KEY)),512) as PHOTO_KEY,\n    --sha2_binary(to_variant(array_construct(SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY)),512) as T_LINK_PERIOD_INVENTORY_KEY\n    from merge_key mk\n    left outer join E_DD_STOCK_DEB_PERIODE sdp\n        on sdp.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sdp.SITE_CODE = mk.SITE_CODE\n        and sdp.PERIODE_CODE = mk.PERIODE_CODE\n        and sdp.PHOTO_DATE = mk.PHOTO_DATE\n    left outer join E_DD_STOCK_DISPO sd\n        on sd.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sd.SITE_CODE = mk.SITE_CODE\n        and sd.PERIODE_CODE = mk.PERIODE_CODE\n        and sd.PHOTO_DATE = mk.PHOTO_DATE\n    --left outer join F4101 on F4101.IMLITM = mk.ARTICLE_CODE\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_period_date on calendar_period_date.DT_DDMMYYYY = NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE)\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_photo_date on calendar_photo_date.DT_DDMMYYYY = mk.PHOTO_DATE\n)\n\nselect \n    PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM, EFFECTIVE_FROM, LDTS, RSCR, --SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY, T_LINK_PERIOD_INVENTORY_KEY,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM)),512) as HASHDIFF\nfrom source_data\n)"}], "column_name": "SITE_CD", "file_key_name": "models.dwh_dscp_period_inventory_tmp"}, "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_TIME_ID.77124ab5e6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TIME_ID", "model": "{{ get_where_subquery(ref('dwh_dscp_period_inventory_tmp')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "not_null_dwh_dscp_period_inventory_tmp_TIME_ID", "resource_type": "test", "package_name": "dbt_grizzly", "path": "not_null_dwh_dscp_period_inventory_tmp_TIME_ID.sql", "original_file_path": "models\\20_silver_db\\dscp_sch\\00_stage\\dwh_dscp_period_inventory_tmp.schema.yml", "unique_id": "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_TIME_ID.77124ab5e6", "fqn": ["dbt_grizzly", "20_silver_db", "dscp_sch", "00_stage", "not_null_dwh_dscp_period_inventory_tmp_TIME_ID"], "alias": "not_null_dwh_dscp_period_inventory_tmp_TIME_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884072.8434706, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_dscp_period_inventory_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\dscp_sch\\00_stage\\dwh_dscp_period_inventory_tmp.schema.yml\\not_null_dwh_dscp_period_inventory_tmp_TIME_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__dwh_dscp_period_inventory_tmp as (\nWITH \n\nE_DD_STOCK_DEB_PERIODE AS (\n  SELECT \n    E_DD_STOCK_DEB_PERIODE_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DEB_PERIODE_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_HUB E_DD_STOCK_DEB_PERIODE_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_S01 E_DD_STOCK_DEB_PERIODE_S01 ON E_DD_STOCK_DEB_PERIODE_HUB.ID = E_DD_STOCK_DEB_PERIODE_S01.ID\n    where E_DD_STOCK_DEB_PERIODE_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DEB_PERIODE_S01.ID ORDER BY E_DD_STOCK_DEB_PERIODE_S01.FD DESC) = 1 \n),\n\nE_DD_STOCK_DISPO AS (\n  SELECT \n    E_DD_STOCK_DISPO_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DISPO_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_HUB E_DD_STOCK_DISPO_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_S01 E_DD_STOCK_DISPO_S01 ON E_DD_STOCK_DISPO_HUB.ID = E_DD_STOCK_DISPO_S01.ID\n    where E_DD_STOCK_DISPO_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DISPO_S01.ID ORDER BY E_DD_STOCK_DISPO_S01.FD DESC) = 1 \n),\n/*\nF4101 AS (\n  SELECT \n    F4101_HUB.\"ID\", \"IMITM\",\n    F4101_S01.\"FD\", \"TD\", \"IMLITM\", \"IMAITM\", \"IMDSC1\", \"IMDSC2\", \"IMSRTX\", \"IMALN\", \"IMSRP1\", \"IMSRP2\", \"IMSRP3\", \"IMSRP4\", \"IMSRP5\", \"IMSRP6\", \"IMSRP7\", \"IMSRP8\", \"IMSRP9\", \"IMSRP0\", \"IMPRP1\", \"IMPRP2\", \"IMPRP3\", \"IMPRP4\", \"IMPRP5\", \"IMPRP6\", \"IMPRP7\", \"IMPRP8\", \"IMPRP9\", \"IMPRP0\", \"IMCDCD\", \"IMPDGR\", \"IMDSGP\", \"IMPRGR\", \"IMRPRC\", \"IMORPR\", \"IMBUYR\", \"IMDRAW\", \"IMRVNO\", \"IMDSZE\", \"IMVCUD\", \"IMCARS\", \"IMCARP\", \"IMSHCN\", \"IMSHCM\", \"IMUOM1\", \"IMUOM2\", \"IMUOM3\", \"IMUOM4\", \"IMUOM6\", \"IMUOM8\", \"IMUOM9\", \"IMUWUM\", \"IMUVM1\", \"IMSUTM\", \"IMUMVW\", \"IMCYCL\", \"IMGLPT\", \"IMPLEV\", \"IMPPLV\", \"IMCLEV\", \"IMPRPO\", \"IMCKAV\", \"IMBPFG\", \"IMSRCE\", \"IMOT1Y\", \"IMOT2Y\", \"IMSTDP\", \"IMFRMP\", \"IMTHRP\", \"IMSTDG\", \"IMFRGD\", \"IMTHGD\", \"IMCOTY\", \"IMSTKT\", \"IMLNTY\", \"IMCONT\", \"IMBACK\", \"IMIFLA\", \"IMTFLA\", \"IMINMG\", \"IMABCS\", \"IMABCM\", \"IMABCI\", \"IMOVR\", \"IMWARR\", \"IMCMCG\", \"IMSRNR\", \"IMPMTH\", \"IMFIFO\", \"IMLOTS\", \"IMSLD\", \"IMANPL\", \"IMMPST\", \"IMPCTM\", \"IMMMPC\", \"IMPTSC\", \"IMSNS\", \"IMLTLV\", \"IMLTMF\", \"IMLTCM\", \"IMOPC\", \"IMOPV\", \"IMACQ\", \"IMMLQ\", \"IMLTPU\", \"IMMPSP\", \"IMMRPP\", \"IMITC\", \"IMORDW\", \"IMMTF1\", \"IMMTF2\", \"IMMTF3\", \"IMMTF4\", \"IMMTF5\", \"IMEXPD\", \"IMDEFD\", \"IMSFLT\", \"IMMAKE\", \"IMCOBY\", \"IMLLX\", \"IMCMGL\", \"IMCOMH\", \"IMURCD\", \"IMURDT\", \"IMURAT\", \"IMURAB\", \"IMURRF\", \"IMUSER\", \"IMPID\", \"IMJOBN\", \"IMUPMJ\", \"IMTDAY\", \"IMUPCN\", \"IMSCC0\", \"IMUMUP\", \"IMUMDF\", \"IMUMS0\", \"IMUMS1\", \"IMUMS2\", \"IMUMS3\", \"IMUMS4\", \"IMUMS5\", \"IMUMS6\", \"IMUMS7\", \"IMUMS8\", \"IMPOC\", \"IMAVRT\", \"IMEQTY\", \"IMWTRQ\", \"IMTMPL\", \"IMSEG1\", \"IMSEG2\", \"IMSEG3\", \"IMSEG4\", \"IMSEG5\", \"IMSEG6\", \"IMSEG7\", \"IMSEG8\", \"IMSEG9\", \"IMSEG0\", \"IMMIC\", \"IMAING\", \"IMBBDD\", \"IMCMDM\", \"IMLECM\", \"IMLEDD\", \"IMPEFD\", \"IMSBDD\", \"IMU1DD\", \"IMU2DD\", \"IMU3DD\", \"IMU4DD\", \"IMU5DD\", \"IMDLTL\", \"IMDPPO\", \"IMDUAL\", \"IMXDCK\", \"IMLAF\", \"IMLTFM\", \"IMRWLA\", \"IMLNPA\", \"IMLOTC\", \"IMAPSC\", \"IMAUOM\", \"IMCONB\", \"IMGCMP\", \"IMPRI1\", \"IMPRI2\", \"IMASHL\", \"IMVMINV\", \"IMCMETH\", \"IMEXPI\", \"IMOPTH\", \"IMCUTH\", \"IMUMTH\", \"IMLMFG\", \"IMLINE\", \"IMDFTPCT\", \"IMKBIT\", \"IMDFENDITM\", \"IMKANEXLL\", \"IMSCPSELL\", \"IMMOPTH\", \"IMMCUTH\", \"IMCUMTH\", \"IMATPRN\", \"IMATPCA\", \"IMATPAC\", \"IMCOORE\", \"IMVCPFC\", \"IMPNYN\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_HUB F4101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_S01 F4101_S01 ON F4101_HUB.ID = F4101_S01.ID\n    where F4101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4101_S01.ID ORDER BY F4101_S01.FD DESC) = 1 \n),*/\n\nmerge_key as\n(\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DEB_PERIODE\n    UNION\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DISPO\n),\n\nsource_data as \n(    \n    select\n    mk.ARTICLE_CODE as ITEM_CD,\n    mk.SITE_CODE as SITE_CD,\n    NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE) as TIME_ID,\n    mk.PHOTO_DATE as PHOTO_DT,\n    sha2_binary(to_variant(array_construct(ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT)),512) as PERIOD_INVENTORY_KEY,\n    NVL(sdp.CREATION_DATE,sd.CREATION_DATE) as CREATION_DT,\n    NVL(sdp.QUANTITE_VAL,0) as QTY_START_PERIOD_UOM,\n    NVL(sd.QUANTITE_VAL,0) as QTY_AVAILABLE_UOM,\n    NVL(sdp.FD,sd.FD) as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'NSKEP' as RSCR\n    --Perte de cl\u00e9 via item\n    --sha2_binary(to_variant(array_construct(mk.SITE_CODE)),512) as SITE_KEY,\n    --sha2_binary(to_variant(array_construct(F4101.IMITM, F4101.IMLITM)),512) as ITEM_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_period_date.CALENDAR_KEY)),512) as TIME_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_photo_date.CALENDAR_KEY)),512) as PHOTO_KEY,\n    --sha2_binary(to_variant(array_construct(SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY)),512) as T_LINK_PERIOD_INVENTORY_KEY\n    from merge_key mk\n    left outer join E_DD_STOCK_DEB_PERIODE sdp\n        on sdp.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sdp.SITE_CODE = mk.SITE_CODE\n        and sdp.PERIODE_CODE = mk.PERIODE_CODE\n        and sdp.PHOTO_DATE = mk.PHOTO_DATE\n    left outer join E_DD_STOCK_DISPO sd\n        on sd.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sd.SITE_CODE = mk.SITE_CODE\n        and sd.PERIODE_CODE = mk.PERIODE_CODE\n        and sd.PHOTO_DATE = mk.PHOTO_DATE\n    --left outer join F4101 on F4101.IMLITM = mk.ARTICLE_CODE\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_period_date on calendar_period_date.DT_DDMMYYYY = NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE)\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_photo_date on calendar_photo_date.DT_DDMMYYYY = mk.PHOTO_DATE\n)\n\nselect \n    PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM, EFFECTIVE_FROM, LDTS, RSCR, --SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY, T_LINK_PERIOD_INVENTORY_KEY,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM)),512) as HASHDIFF\nfrom source_data\n)select TIME_ID\nfrom __dbt__cte__dwh_dscp_period_inventory_tmp\nwhere TIME_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_dscp_period_inventory_tmp", "sql": " __dbt__cte__dwh_dscp_period_inventory_tmp as (\nWITH \n\nE_DD_STOCK_DEB_PERIODE AS (\n  SELECT \n    E_DD_STOCK_DEB_PERIODE_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DEB_PERIODE_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_HUB E_DD_STOCK_DEB_PERIODE_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_S01 E_DD_STOCK_DEB_PERIODE_S01 ON E_DD_STOCK_DEB_PERIODE_HUB.ID = E_DD_STOCK_DEB_PERIODE_S01.ID\n    where E_DD_STOCK_DEB_PERIODE_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DEB_PERIODE_S01.ID ORDER BY E_DD_STOCK_DEB_PERIODE_S01.FD DESC) = 1 \n),\n\nE_DD_STOCK_DISPO AS (\n  SELECT \n    E_DD_STOCK_DISPO_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DISPO_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_HUB E_DD_STOCK_DISPO_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_S01 E_DD_STOCK_DISPO_S01 ON E_DD_STOCK_DISPO_HUB.ID = E_DD_STOCK_DISPO_S01.ID\n    where E_DD_STOCK_DISPO_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DISPO_S01.ID ORDER BY E_DD_STOCK_DISPO_S01.FD DESC) = 1 \n),\n/*\nF4101 AS (\n  SELECT \n    F4101_HUB.\"ID\", \"IMITM\",\n    F4101_S01.\"FD\", \"TD\", \"IMLITM\", \"IMAITM\", \"IMDSC1\", \"IMDSC2\", \"IMSRTX\", \"IMALN\", \"IMSRP1\", \"IMSRP2\", \"IMSRP3\", \"IMSRP4\", \"IMSRP5\", \"IMSRP6\", \"IMSRP7\", \"IMSRP8\", \"IMSRP9\", \"IMSRP0\", \"IMPRP1\", \"IMPRP2\", \"IMPRP3\", \"IMPRP4\", \"IMPRP5\", \"IMPRP6\", \"IMPRP7\", \"IMPRP8\", \"IMPRP9\", \"IMPRP0\", \"IMCDCD\", \"IMPDGR\", \"IMDSGP\", \"IMPRGR\", \"IMRPRC\", \"IMORPR\", \"IMBUYR\", \"IMDRAW\", \"IMRVNO\", \"IMDSZE\", \"IMVCUD\", \"IMCARS\", \"IMCARP\", \"IMSHCN\", \"IMSHCM\", \"IMUOM1\", \"IMUOM2\", \"IMUOM3\", \"IMUOM4\", \"IMUOM6\", \"IMUOM8\", \"IMUOM9\", \"IMUWUM\", \"IMUVM1\", \"IMSUTM\", \"IMUMVW\", \"IMCYCL\", \"IMGLPT\", \"IMPLEV\", \"IMPPLV\", \"IMCLEV\", \"IMPRPO\", \"IMCKAV\", \"IMBPFG\", \"IMSRCE\", \"IMOT1Y\", \"IMOT2Y\", \"IMSTDP\", \"IMFRMP\", \"IMTHRP\", \"IMSTDG\", \"IMFRGD\", \"IMTHGD\", \"IMCOTY\", \"IMSTKT\", \"IMLNTY\", \"IMCONT\", \"IMBACK\", \"IMIFLA\", \"IMTFLA\", \"IMINMG\", \"IMABCS\", \"IMABCM\", \"IMABCI\", \"IMOVR\", \"IMWARR\", \"IMCMCG\", \"IMSRNR\", \"IMPMTH\", \"IMFIFO\", \"IMLOTS\", \"IMSLD\", \"IMANPL\", \"IMMPST\", \"IMPCTM\", \"IMMMPC\", \"IMPTSC\", \"IMSNS\", \"IMLTLV\", \"IMLTMF\", \"IMLTCM\", \"IMOPC\", \"IMOPV\", \"IMACQ\", \"IMMLQ\", \"IMLTPU\", \"IMMPSP\", \"IMMRPP\", \"IMITC\", \"IMORDW\", \"IMMTF1\", \"IMMTF2\", \"IMMTF3\", \"IMMTF4\", \"IMMTF5\", \"IMEXPD\", \"IMDEFD\", \"IMSFLT\", \"IMMAKE\", \"IMCOBY\", \"IMLLX\", \"IMCMGL\", \"IMCOMH\", \"IMURCD\", \"IMURDT\", \"IMURAT\", \"IMURAB\", \"IMURRF\", \"IMUSER\", \"IMPID\", \"IMJOBN\", \"IMUPMJ\", \"IMTDAY\", \"IMUPCN\", \"IMSCC0\", \"IMUMUP\", \"IMUMDF\", \"IMUMS0\", \"IMUMS1\", \"IMUMS2\", \"IMUMS3\", \"IMUMS4\", \"IMUMS5\", \"IMUMS6\", \"IMUMS7\", \"IMUMS8\", \"IMPOC\", \"IMAVRT\", \"IMEQTY\", \"IMWTRQ\", \"IMTMPL\", \"IMSEG1\", \"IMSEG2\", \"IMSEG3\", \"IMSEG4\", \"IMSEG5\", \"IMSEG6\", \"IMSEG7\", \"IMSEG8\", \"IMSEG9\", \"IMSEG0\", \"IMMIC\", \"IMAING\", \"IMBBDD\", \"IMCMDM\", \"IMLECM\", \"IMLEDD\", \"IMPEFD\", \"IMSBDD\", \"IMU1DD\", \"IMU2DD\", \"IMU3DD\", \"IMU4DD\", \"IMU5DD\", \"IMDLTL\", \"IMDPPO\", \"IMDUAL\", \"IMXDCK\", \"IMLAF\", \"IMLTFM\", \"IMRWLA\", \"IMLNPA\", \"IMLOTC\", \"IMAPSC\", \"IMAUOM\", \"IMCONB\", \"IMGCMP\", \"IMPRI1\", \"IMPRI2\", \"IMASHL\", \"IMVMINV\", \"IMCMETH\", \"IMEXPI\", \"IMOPTH\", \"IMCUTH\", \"IMUMTH\", \"IMLMFG\", \"IMLINE\", \"IMDFTPCT\", \"IMKBIT\", \"IMDFENDITM\", \"IMKANEXLL\", \"IMSCPSELL\", \"IMMOPTH\", \"IMMCUTH\", \"IMCUMTH\", \"IMATPRN\", \"IMATPCA\", \"IMATPAC\", \"IMCOORE\", \"IMVCPFC\", \"IMPNYN\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_HUB F4101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_S01 F4101_S01 ON F4101_HUB.ID = F4101_S01.ID\n    where F4101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4101_S01.ID ORDER BY F4101_S01.FD DESC) = 1 \n),*/\n\nmerge_key as\n(\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DEB_PERIODE\n    UNION\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DISPO\n),\n\nsource_data as \n(    \n    select\n    mk.ARTICLE_CODE as ITEM_CD,\n    mk.SITE_CODE as SITE_CD,\n    NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE) as TIME_ID,\n    mk.PHOTO_DATE as PHOTO_DT,\n    sha2_binary(to_variant(array_construct(ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT)),512) as PERIOD_INVENTORY_KEY,\n    NVL(sdp.CREATION_DATE,sd.CREATION_DATE) as CREATION_DT,\n    NVL(sdp.QUANTITE_VAL,0) as QTY_START_PERIOD_UOM,\n    NVL(sd.QUANTITE_VAL,0) as QTY_AVAILABLE_UOM,\n    NVL(sdp.FD,sd.FD) as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'NSKEP' as RSCR\n    --Perte de cl\u00e9 via item\n    --sha2_binary(to_variant(array_construct(mk.SITE_CODE)),512) as SITE_KEY,\n    --sha2_binary(to_variant(array_construct(F4101.IMITM, F4101.IMLITM)),512) as ITEM_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_period_date.CALENDAR_KEY)),512) as TIME_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_photo_date.CALENDAR_KEY)),512) as PHOTO_KEY,\n    --sha2_binary(to_variant(array_construct(SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY)),512) as T_LINK_PERIOD_INVENTORY_KEY\n    from merge_key mk\n    left outer join E_DD_STOCK_DEB_PERIODE sdp\n        on sdp.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sdp.SITE_CODE = mk.SITE_CODE\n        and sdp.PERIODE_CODE = mk.PERIODE_CODE\n        and sdp.PHOTO_DATE = mk.PHOTO_DATE\n    left outer join E_DD_STOCK_DISPO sd\n        on sd.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sd.SITE_CODE = mk.SITE_CODE\n        and sd.PERIODE_CODE = mk.PERIODE_CODE\n        and sd.PHOTO_DATE = mk.PHOTO_DATE\n    --left outer join F4101 on F4101.IMLITM = mk.ARTICLE_CODE\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_period_date on calendar_period_date.DT_DDMMYYYY = NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE)\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_photo_date on calendar_photo_date.DT_DDMMYYYY = mk.PHOTO_DATE\n)\n\nselect \n    PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM, EFFECTIVE_FROM, LDTS, RSCR, --SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY, T_LINK_PERIOD_INVENTORY_KEY,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM)),512) as HASHDIFF\nfrom source_data\n)"}], "column_name": "TIME_ID", "file_key_name": "models.dwh_dscp_period_inventory_tmp"}, "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_PHOTO_DT.b182a9ce5c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PHOTO_DT", "model": "{{ get_where_subquery(ref('dwh_dscp_period_inventory_tmp')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "not_null_dwh_dscp_period_inventory_tmp_PHOTO_DT", "resource_type": "test", "package_name": "dbt_grizzly", "path": "not_null_dwh_dscp_period_inventory_tmp_PHOTO_DT.sql", "original_file_path": "models\\20_silver_db\\dscp_sch\\00_stage\\dwh_dscp_period_inventory_tmp.schema.yml", "unique_id": "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_PHOTO_DT.b182a9ce5c", "fqn": ["dbt_grizzly", "20_silver_db", "dscp_sch", "00_stage", "not_null_dwh_dscp_period_inventory_tmp_PHOTO_DT"], "alias": "not_null_dwh_dscp_period_inventory_tmp_PHOTO_DT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884072.8522437, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_dscp_period_inventory_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\dscp_sch\\00_stage\\dwh_dscp_period_inventory_tmp.schema.yml\\not_null_dwh_dscp_period_inventory_tmp_PHOTO_DT.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__dwh_dscp_period_inventory_tmp as (\nWITH \n\nE_DD_STOCK_DEB_PERIODE AS (\n  SELECT \n    E_DD_STOCK_DEB_PERIODE_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DEB_PERIODE_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_HUB E_DD_STOCK_DEB_PERIODE_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_S01 E_DD_STOCK_DEB_PERIODE_S01 ON E_DD_STOCK_DEB_PERIODE_HUB.ID = E_DD_STOCK_DEB_PERIODE_S01.ID\n    where E_DD_STOCK_DEB_PERIODE_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DEB_PERIODE_S01.ID ORDER BY E_DD_STOCK_DEB_PERIODE_S01.FD DESC) = 1 \n),\n\nE_DD_STOCK_DISPO AS (\n  SELECT \n    E_DD_STOCK_DISPO_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DISPO_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_HUB E_DD_STOCK_DISPO_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_S01 E_DD_STOCK_DISPO_S01 ON E_DD_STOCK_DISPO_HUB.ID = E_DD_STOCK_DISPO_S01.ID\n    where E_DD_STOCK_DISPO_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DISPO_S01.ID ORDER BY E_DD_STOCK_DISPO_S01.FD DESC) = 1 \n),\n/*\nF4101 AS (\n  SELECT \n    F4101_HUB.\"ID\", \"IMITM\",\n    F4101_S01.\"FD\", \"TD\", \"IMLITM\", \"IMAITM\", \"IMDSC1\", \"IMDSC2\", \"IMSRTX\", \"IMALN\", \"IMSRP1\", \"IMSRP2\", \"IMSRP3\", \"IMSRP4\", \"IMSRP5\", \"IMSRP6\", \"IMSRP7\", \"IMSRP8\", \"IMSRP9\", \"IMSRP0\", \"IMPRP1\", \"IMPRP2\", \"IMPRP3\", \"IMPRP4\", \"IMPRP5\", \"IMPRP6\", \"IMPRP7\", \"IMPRP8\", \"IMPRP9\", \"IMPRP0\", \"IMCDCD\", \"IMPDGR\", \"IMDSGP\", \"IMPRGR\", \"IMRPRC\", \"IMORPR\", \"IMBUYR\", \"IMDRAW\", \"IMRVNO\", \"IMDSZE\", \"IMVCUD\", \"IMCARS\", \"IMCARP\", \"IMSHCN\", \"IMSHCM\", \"IMUOM1\", \"IMUOM2\", \"IMUOM3\", \"IMUOM4\", \"IMUOM6\", \"IMUOM8\", \"IMUOM9\", \"IMUWUM\", \"IMUVM1\", \"IMSUTM\", \"IMUMVW\", \"IMCYCL\", \"IMGLPT\", \"IMPLEV\", \"IMPPLV\", \"IMCLEV\", \"IMPRPO\", \"IMCKAV\", \"IMBPFG\", \"IMSRCE\", \"IMOT1Y\", \"IMOT2Y\", \"IMSTDP\", \"IMFRMP\", \"IMTHRP\", \"IMSTDG\", \"IMFRGD\", \"IMTHGD\", \"IMCOTY\", \"IMSTKT\", \"IMLNTY\", \"IMCONT\", \"IMBACK\", \"IMIFLA\", \"IMTFLA\", \"IMINMG\", \"IMABCS\", \"IMABCM\", \"IMABCI\", \"IMOVR\", \"IMWARR\", \"IMCMCG\", \"IMSRNR\", \"IMPMTH\", \"IMFIFO\", \"IMLOTS\", \"IMSLD\", \"IMANPL\", \"IMMPST\", \"IMPCTM\", \"IMMMPC\", \"IMPTSC\", \"IMSNS\", \"IMLTLV\", \"IMLTMF\", \"IMLTCM\", \"IMOPC\", \"IMOPV\", \"IMACQ\", \"IMMLQ\", \"IMLTPU\", \"IMMPSP\", \"IMMRPP\", \"IMITC\", \"IMORDW\", \"IMMTF1\", \"IMMTF2\", \"IMMTF3\", \"IMMTF4\", \"IMMTF5\", \"IMEXPD\", \"IMDEFD\", \"IMSFLT\", \"IMMAKE\", \"IMCOBY\", \"IMLLX\", \"IMCMGL\", \"IMCOMH\", \"IMURCD\", \"IMURDT\", \"IMURAT\", \"IMURAB\", \"IMURRF\", \"IMUSER\", \"IMPID\", \"IMJOBN\", \"IMUPMJ\", \"IMTDAY\", \"IMUPCN\", \"IMSCC0\", \"IMUMUP\", \"IMUMDF\", \"IMUMS0\", \"IMUMS1\", \"IMUMS2\", \"IMUMS3\", \"IMUMS4\", \"IMUMS5\", \"IMUMS6\", \"IMUMS7\", \"IMUMS8\", \"IMPOC\", \"IMAVRT\", \"IMEQTY\", \"IMWTRQ\", \"IMTMPL\", \"IMSEG1\", \"IMSEG2\", \"IMSEG3\", \"IMSEG4\", \"IMSEG5\", \"IMSEG6\", \"IMSEG7\", \"IMSEG8\", \"IMSEG9\", \"IMSEG0\", \"IMMIC\", \"IMAING\", \"IMBBDD\", \"IMCMDM\", \"IMLECM\", \"IMLEDD\", \"IMPEFD\", \"IMSBDD\", \"IMU1DD\", \"IMU2DD\", \"IMU3DD\", \"IMU4DD\", \"IMU5DD\", \"IMDLTL\", \"IMDPPO\", \"IMDUAL\", \"IMXDCK\", \"IMLAF\", \"IMLTFM\", \"IMRWLA\", \"IMLNPA\", \"IMLOTC\", \"IMAPSC\", \"IMAUOM\", \"IMCONB\", \"IMGCMP\", \"IMPRI1\", \"IMPRI2\", \"IMASHL\", \"IMVMINV\", \"IMCMETH\", \"IMEXPI\", \"IMOPTH\", \"IMCUTH\", \"IMUMTH\", \"IMLMFG\", \"IMLINE\", \"IMDFTPCT\", \"IMKBIT\", \"IMDFENDITM\", \"IMKANEXLL\", \"IMSCPSELL\", \"IMMOPTH\", \"IMMCUTH\", \"IMCUMTH\", \"IMATPRN\", \"IMATPCA\", \"IMATPAC\", \"IMCOORE\", \"IMVCPFC\", \"IMPNYN\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_HUB F4101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_S01 F4101_S01 ON F4101_HUB.ID = F4101_S01.ID\n    where F4101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4101_S01.ID ORDER BY F4101_S01.FD DESC) = 1 \n),*/\n\nmerge_key as\n(\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DEB_PERIODE\n    UNION\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DISPO\n),\n\nsource_data as \n(    \n    select\n    mk.ARTICLE_CODE as ITEM_CD,\n    mk.SITE_CODE as SITE_CD,\n    NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE) as TIME_ID,\n    mk.PHOTO_DATE as PHOTO_DT,\n    sha2_binary(to_variant(array_construct(ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT)),512) as PERIOD_INVENTORY_KEY,\n    NVL(sdp.CREATION_DATE,sd.CREATION_DATE) as CREATION_DT,\n    NVL(sdp.QUANTITE_VAL,0) as QTY_START_PERIOD_UOM,\n    NVL(sd.QUANTITE_VAL,0) as QTY_AVAILABLE_UOM,\n    NVL(sdp.FD,sd.FD) as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'NSKEP' as RSCR\n    --Perte de cl\u00e9 via item\n    --sha2_binary(to_variant(array_construct(mk.SITE_CODE)),512) as SITE_KEY,\n    --sha2_binary(to_variant(array_construct(F4101.IMITM, F4101.IMLITM)),512) as ITEM_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_period_date.CALENDAR_KEY)),512) as TIME_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_photo_date.CALENDAR_KEY)),512) as PHOTO_KEY,\n    --sha2_binary(to_variant(array_construct(SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY)),512) as T_LINK_PERIOD_INVENTORY_KEY\n    from merge_key mk\n    left outer join E_DD_STOCK_DEB_PERIODE sdp\n        on sdp.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sdp.SITE_CODE = mk.SITE_CODE\n        and sdp.PERIODE_CODE = mk.PERIODE_CODE\n        and sdp.PHOTO_DATE = mk.PHOTO_DATE\n    left outer join E_DD_STOCK_DISPO sd\n        on sd.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sd.SITE_CODE = mk.SITE_CODE\n        and sd.PERIODE_CODE = mk.PERIODE_CODE\n        and sd.PHOTO_DATE = mk.PHOTO_DATE\n    --left outer join F4101 on F4101.IMLITM = mk.ARTICLE_CODE\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_period_date on calendar_period_date.DT_DDMMYYYY = NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE)\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_photo_date on calendar_photo_date.DT_DDMMYYYY = mk.PHOTO_DATE\n)\n\nselect \n    PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM, EFFECTIVE_FROM, LDTS, RSCR, --SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY, T_LINK_PERIOD_INVENTORY_KEY,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM)),512) as HASHDIFF\nfrom source_data\n)select PHOTO_DT\nfrom __dbt__cte__dwh_dscp_period_inventory_tmp\nwhere PHOTO_DT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_dscp_period_inventory_tmp", "sql": " __dbt__cte__dwh_dscp_period_inventory_tmp as (\nWITH \n\nE_DD_STOCK_DEB_PERIODE AS (\n  SELECT \n    E_DD_STOCK_DEB_PERIODE_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DEB_PERIODE_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_HUB E_DD_STOCK_DEB_PERIODE_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_S01 E_DD_STOCK_DEB_PERIODE_S01 ON E_DD_STOCK_DEB_PERIODE_HUB.ID = E_DD_STOCK_DEB_PERIODE_S01.ID\n    where E_DD_STOCK_DEB_PERIODE_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DEB_PERIODE_S01.ID ORDER BY E_DD_STOCK_DEB_PERIODE_S01.FD DESC) = 1 \n),\n\nE_DD_STOCK_DISPO AS (\n  SELECT \n    E_DD_STOCK_DISPO_HUB.\"ID\", \"ARTICLE_SITE_CODE\", \"PERIODE_CODE\", \"PHOTO_DATE\",\n    E_DD_STOCK_DISPO_S01.\"FD\", \"TD\", \"ARTICLE_CODE\", \"SITE_CODE\", \"DEB_PERIODE_DATE\", \"FIN_PERIODE_DATE\", \"QUANTITE_VAL\", \"CREATION_DATE\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_HUB E_DD_STOCK_DISPO_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_S01 E_DD_STOCK_DISPO_S01 ON E_DD_STOCK_DISPO_HUB.ID = E_DD_STOCK_DISPO_S01.ID\n    where E_DD_STOCK_DISPO_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY E_DD_STOCK_DISPO_S01.ID ORDER BY E_DD_STOCK_DISPO_S01.FD DESC) = 1 \n),\n/*\nF4101 AS (\n  SELECT \n    F4101_HUB.\"ID\", \"IMITM\",\n    F4101_S01.\"FD\", \"TD\", \"IMLITM\", \"IMAITM\", \"IMDSC1\", \"IMDSC2\", \"IMSRTX\", \"IMALN\", \"IMSRP1\", \"IMSRP2\", \"IMSRP3\", \"IMSRP4\", \"IMSRP5\", \"IMSRP6\", \"IMSRP7\", \"IMSRP8\", \"IMSRP9\", \"IMSRP0\", \"IMPRP1\", \"IMPRP2\", \"IMPRP3\", \"IMPRP4\", \"IMPRP5\", \"IMPRP6\", \"IMPRP7\", \"IMPRP8\", \"IMPRP9\", \"IMPRP0\", \"IMCDCD\", \"IMPDGR\", \"IMDSGP\", \"IMPRGR\", \"IMRPRC\", \"IMORPR\", \"IMBUYR\", \"IMDRAW\", \"IMRVNO\", \"IMDSZE\", \"IMVCUD\", \"IMCARS\", \"IMCARP\", \"IMSHCN\", \"IMSHCM\", \"IMUOM1\", \"IMUOM2\", \"IMUOM3\", \"IMUOM4\", \"IMUOM6\", \"IMUOM8\", \"IMUOM9\", \"IMUWUM\", \"IMUVM1\", \"IMSUTM\", \"IMUMVW\", \"IMCYCL\", \"IMGLPT\", \"IMPLEV\", \"IMPPLV\", \"IMCLEV\", \"IMPRPO\", \"IMCKAV\", \"IMBPFG\", \"IMSRCE\", \"IMOT1Y\", \"IMOT2Y\", \"IMSTDP\", \"IMFRMP\", \"IMTHRP\", \"IMSTDG\", \"IMFRGD\", \"IMTHGD\", \"IMCOTY\", \"IMSTKT\", \"IMLNTY\", \"IMCONT\", \"IMBACK\", \"IMIFLA\", \"IMTFLA\", \"IMINMG\", \"IMABCS\", \"IMABCM\", \"IMABCI\", \"IMOVR\", \"IMWARR\", \"IMCMCG\", \"IMSRNR\", \"IMPMTH\", \"IMFIFO\", \"IMLOTS\", \"IMSLD\", \"IMANPL\", \"IMMPST\", \"IMPCTM\", \"IMMMPC\", \"IMPTSC\", \"IMSNS\", \"IMLTLV\", \"IMLTMF\", \"IMLTCM\", \"IMOPC\", \"IMOPV\", \"IMACQ\", \"IMMLQ\", \"IMLTPU\", \"IMMPSP\", \"IMMRPP\", \"IMITC\", \"IMORDW\", \"IMMTF1\", \"IMMTF2\", \"IMMTF3\", \"IMMTF4\", \"IMMTF5\", \"IMEXPD\", \"IMDEFD\", \"IMSFLT\", \"IMMAKE\", \"IMCOBY\", \"IMLLX\", \"IMCMGL\", \"IMCOMH\", \"IMURCD\", \"IMURDT\", \"IMURAT\", \"IMURAB\", \"IMURRF\", \"IMUSER\", \"IMPID\", \"IMJOBN\", \"IMUPMJ\", \"IMTDAY\", \"IMUPCN\", \"IMSCC0\", \"IMUMUP\", \"IMUMDF\", \"IMUMS0\", \"IMUMS1\", \"IMUMS2\", \"IMUMS3\", \"IMUMS4\", \"IMUMS5\", \"IMUMS6\", \"IMUMS7\", \"IMUMS8\", \"IMPOC\", \"IMAVRT\", \"IMEQTY\", \"IMWTRQ\", \"IMTMPL\", \"IMSEG1\", \"IMSEG2\", \"IMSEG3\", \"IMSEG4\", \"IMSEG5\", \"IMSEG6\", \"IMSEG7\", \"IMSEG8\", \"IMSEG9\", \"IMSEG0\", \"IMMIC\", \"IMAING\", \"IMBBDD\", \"IMCMDM\", \"IMLECM\", \"IMLEDD\", \"IMPEFD\", \"IMSBDD\", \"IMU1DD\", \"IMU2DD\", \"IMU3DD\", \"IMU4DD\", \"IMU5DD\", \"IMDLTL\", \"IMDPPO\", \"IMDUAL\", \"IMXDCK\", \"IMLAF\", \"IMLTFM\", \"IMRWLA\", \"IMLNPA\", \"IMLOTC\", \"IMAPSC\", \"IMAUOM\", \"IMCONB\", \"IMGCMP\", \"IMPRI1\", \"IMPRI2\", \"IMASHL\", \"IMVMINV\", \"IMCMETH\", \"IMEXPI\", \"IMOPTH\", \"IMCUTH\", \"IMUMTH\", \"IMLMFG\", \"IMLINE\", \"IMDFTPCT\", \"IMKBIT\", \"IMDFENDITM\", \"IMKANEXLL\", \"IMSCPSELL\", \"IMMOPTH\", \"IMMCUTH\", \"IMCUMTH\", \"IMATPRN\", \"IMATPCA\", \"IMATPAC\", \"IMCOORE\", \"IMVCPFC\", \"IMPNYN\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_HUB F4101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_S01 F4101_S01 ON F4101_HUB.ID = F4101_S01.ID\n    where F4101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F4101_S01.ID ORDER BY F4101_S01.FD DESC) = 1 \n),*/\n\nmerge_key as\n(\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DEB_PERIODE\n    UNION\n    select ARTICLE_CODE,SITE_CODE,PERIODE_CODE,PHOTO_DATE from E_DD_STOCK_DISPO\n),\n\nsource_data as \n(    \n    select\n    mk.ARTICLE_CODE as ITEM_CD,\n    mk.SITE_CODE as SITE_CD,\n    NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE) as TIME_ID,\n    mk.PHOTO_DATE as PHOTO_DT,\n    sha2_binary(to_variant(array_construct(ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT)),512) as PERIOD_INVENTORY_KEY,\n    NVL(sdp.CREATION_DATE,sd.CREATION_DATE) as CREATION_DT,\n    NVL(sdp.QUANTITE_VAL,0) as QTY_START_PERIOD_UOM,\n    NVL(sd.QUANTITE_VAL,0) as QTY_AVAILABLE_UOM,\n    NVL(sdp.FD,sd.FD) as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'NSKEP' as RSCR\n    --Perte de cl\u00e9 via item\n    --sha2_binary(to_variant(array_construct(mk.SITE_CODE)),512) as SITE_KEY,\n    --sha2_binary(to_variant(array_construct(F4101.IMITM, F4101.IMLITM)),512) as ITEM_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_period_date.CALENDAR_KEY)),512) as TIME_KEY,\n    --sha2_binary(to_variant(array_construct(calendar_photo_date.CALENDAR_KEY)),512) as PHOTO_KEY,\n    --sha2_binary(to_variant(array_construct(SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY)),512) as T_LINK_PERIOD_INVENTORY_KEY\n    from merge_key mk\n    left outer join E_DD_STOCK_DEB_PERIODE sdp\n        on sdp.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sdp.SITE_CODE = mk.SITE_CODE\n        and sdp.PERIODE_CODE = mk.PERIODE_CODE\n        and sdp.PHOTO_DATE = mk.PHOTO_DATE\n    left outer join E_DD_STOCK_DISPO sd\n        on sd.ARTICLE_CODE = mk.ARTICLE_CODE\n        and sd.SITE_CODE = mk.SITE_CODE\n        and sd.PERIODE_CODE = mk.PERIODE_CODE\n        and sd.PHOTO_DATE = mk.PHOTO_DATE\n    --left outer join F4101 on F4101.IMLITM = mk.ARTICLE_CODE\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_period_date on calendar_period_date.DT_DDMMYYYY = NVL(sdp.DEB_PERIODE_DATE,sd.DEB_PERIODE_DATE)\n    --left outer join PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB calendar_photo_date on calendar_photo_date.DT_DDMMYYYY = mk.PHOTO_DATE\n)\n\nselect \n    PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM, EFFECTIVE_FROM, LDTS, RSCR, --SITE_KEY, ITEM_KEY, TIME_KEY, PHOTO_KEY, T_LINK_PERIOD_INVENTORY_KEY,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PERIOD_INVENTORY_KEY, ITEM_CD, SITE_CD, TIME_ID, PHOTO_DT, CREATION_DT, QTY_START_PERIOD_UOM, QTY_AVAILABLE_UOM)),512) as HASHDIFF\nfrom source_data\n)"}], "column_name": "PHOTO_DT", "file_key_name": "models.dwh_dscp_period_inventory_tmp"}, "test.dbt_grizzly.unique_dwh_dscp_period_inventory_hub_PERIOD_INVENTORY_KEY.4375ed001c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "PERIOD_INVENTORY_KEY", "model": "{{ get_where_subquery(ref('dwh_dscp_period_inventory_hub')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "unique_dwh_dscp_period_inventory_hub_PERIOD_INVENTORY_KEY", "resource_type": "test", "package_name": "dbt_grizzly", "path": "unique_dwh_dscp_period_inventory_hub_PERIOD_INVENTORY_KEY.sql", "original_file_path": "models\\20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_hub.schema.yml", "unique_id": "test.dbt_grizzly.unique_dwh_dscp_period_inventory_hub_PERIOD_INVENTORY_KEY.4375ed001c", "fqn": ["dbt_grizzly", "20_silver_db", "dscp_sch", "01_business_vault", "unique_dwh_dscp_period_inventory_hub_PERIOD_INVENTORY_KEY"], "alias": "unique_dwh_dscp_period_inventory_hub_PERIOD_INVENTORY_KEY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884072.860402, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_dscp_period_inventory_hub"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_dscp_period_inventory_hub"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_hub.schema.yml\\unique_dwh_dscp_period_inventory_hub_PERIOD_INVENTORY_KEY.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    PERIOD_INVENTORY_KEY as unique_field,\n    count(*) as n_records\n\nfrom PRFR_00_DEV_20_SILVER_DB.PRFR_SC_SUPPLY_PLANNING.dwh_dscp_period_inventory_hub\nwhere PERIOD_INVENTORY_KEY is not null\ngroup by PERIOD_INVENTORY_KEY\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "PERIOD_INVENTORY_KEY", "file_key_name": "models.dwh_dscp_period_inventory_hub"}, "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_ITEM_CD.1b0032a9eb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ITEM_CD", "model": "{{ get_where_subquery(ref('dwh_dscp_period_inventory_hub')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "not_null_dwh_dscp_period_inventory_hub_ITEM_CD", "resource_type": "test", "package_name": "dbt_grizzly", "path": "not_null_dwh_dscp_period_inventory_hub_ITEM_CD.sql", "original_file_path": "models\\20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_hub.schema.yml", "unique_id": "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_ITEM_CD.1b0032a9eb", "fqn": ["dbt_grizzly", "20_silver_db", "dscp_sch", "01_business_vault", "not_null_dwh_dscp_period_inventory_hub_ITEM_CD"], "alias": "not_null_dwh_dscp_period_inventory_hub_ITEM_CD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884072.8684077, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_dscp_period_inventory_hub"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_dscp_period_inventory_hub"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_hub.schema.yml\\not_null_dwh_dscp_period_inventory_hub_ITEM_CD.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ITEM_CD\nfrom PRFR_00_DEV_20_SILVER_DB.PRFR_SC_SUPPLY_PLANNING.dwh_dscp_period_inventory_hub\nwhere ITEM_CD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ITEM_CD", "file_key_name": "models.dwh_dscp_period_inventory_hub"}, "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_SITE_CD.005304f94e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SITE_CD", "model": "{{ get_where_subquery(ref('dwh_dscp_period_inventory_hub')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "not_null_dwh_dscp_period_inventory_hub_SITE_CD", "resource_type": "test", "package_name": "dbt_grizzly", "path": "not_null_dwh_dscp_period_inventory_hub_SITE_CD.sql", "original_file_path": "models\\20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_hub.schema.yml", "unique_id": "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_SITE_CD.005304f94e", "fqn": ["dbt_grizzly", "20_silver_db", "dscp_sch", "01_business_vault", "not_null_dwh_dscp_period_inventory_hub_SITE_CD"], "alias": "not_null_dwh_dscp_period_inventory_hub_SITE_CD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884072.8684077, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_dscp_period_inventory_hub"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_dscp_period_inventory_hub"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_hub.schema.yml\\not_null_dwh_dscp_period_inventory_hub_SITE_CD.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SITE_CD\nfrom PRFR_00_DEV_20_SILVER_DB.PRFR_SC_SUPPLY_PLANNING.dwh_dscp_period_inventory_hub\nwhere SITE_CD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "SITE_CD", "file_key_name": "models.dwh_dscp_period_inventory_hub"}, "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_TIME_ID.d7ad6b19c7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TIME_ID", "model": "{{ get_where_subquery(ref('dwh_dscp_period_inventory_hub')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "not_null_dwh_dscp_period_inventory_hub_TIME_ID", "resource_type": "test", "package_name": "dbt_grizzly", "path": "not_null_dwh_dscp_period_inventory_hub_TIME_ID.sql", "original_file_path": "models\\20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_hub.schema.yml", "unique_id": "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_TIME_ID.d7ad6b19c7", "fqn": ["dbt_grizzly", "20_silver_db", "dscp_sch", "01_business_vault", "not_null_dwh_dscp_period_inventory_hub_TIME_ID"], "alias": "not_null_dwh_dscp_period_inventory_hub_TIME_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884072.8765743, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_dscp_period_inventory_hub"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_dscp_period_inventory_hub"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_hub.schema.yml\\not_null_dwh_dscp_period_inventory_hub_TIME_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TIME_ID\nfrom PRFR_00_DEV_20_SILVER_DB.PRFR_SC_SUPPLY_PLANNING.dwh_dscp_period_inventory_hub\nwhere TIME_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TIME_ID", "file_key_name": "models.dwh_dscp_period_inventory_hub"}, "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_PHOTO_DT.4c01882e52": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PHOTO_DT", "model": "{{ get_where_subquery(ref('dwh_dscp_period_inventory_hub')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "not_null_dwh_dscp_period_inventory_hub_PHOTO_DT", "resource_type": "test", "package_name": "dbt_grizzly", "path": "not_null_dwh_dscp_period_inventory_hub_PHOTO_DT.sql", "original_file_path": "models\\20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_hub.schema.yml", "unique_id": "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_PHOTO_DT.4c01882e52", "fqn": ["dbt_grizzly", "20_silver_db", "dscp_sch", "01_business_vault", "not_null_dwh_dscp_period_inventory_hub_PHOTO_DT"], "alias": "not_null_dwh_dscp_period_inventory_hub_PHOTO_DT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884072.8765743, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_dscp_period_inventory_hub"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_dscp_period_inventory_hub"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\dscp_sch\\01_business_vault\\dwh_dscp_period_inventory_hub.schema.yml\\not_null_dwh_dscp_period_inventory_hub_PHOTO_DT.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PHOTO_DT\nfrom PRFR_00_DEV_20_SILVER_DB.PRFR_SC_SUPPLY_PLANNING.dwh_dscp_period_inventory_hub\nwhere PHOTO_DT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "PHOTO_DT", "file_key_name": "models.dwh_dscp_period_inventory_hub"}, "test.dbt_grizzly.not_null_dwh_work_order_parts_list_tmp_PARTS_LIST_KEY.b5bd3080bb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PARTS_LIST_KEY", "model": "{{ get_where_subquery(ref('dwh_work_order_parts_list_tmp')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "not_null_dwh_work_order_parts_list_tmp_PARTS_LIST_KEY", "resource_type": "test", "package_name": "dbt_grizzly", "path": "not_null_dwh_work_order_parts_list_tmp_PARTS_LIST_KEY.sql", "original_file_path": "models\\20_silver_db\\production_sch\\00_stage\\dwh_work_order_parts_list_tmp.schema.yml", "unique_id": "test.dbt_grizzly.not_null_dwh_work_order_parts_list_tmp_PARTS_LIST_KEY.b5bd3080bb", "fqn": ["dbt_grizzly", "20_silver_db", "production_sch", "00_stage", "not_null_dwh_work_order_parts_list_tmp_PARTS_LIST_KEY"], "alias": "not_null_dwh_work_order_parts_list_tmp_PARTS_LIST_KEY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884072.9179814, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_work_order_parts_list_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_work_order_parts_list_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\production_sch\\00_stage\\dwh_work_order_parts_list_tmp.schema.yml\\not_null_dwh_work_order_parts_list_tmp_PARTS_LIST_KEY.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__dwh_work_order_parts_list_tmp as (\nwith\n    \nF3111 AS (\n  SELECT \n    F3111_HUB.\"ID\", \"WMUKID\",\n    F3111_S01.\"FD\", \"TD\", \"WMDOCO\", \"WMDCTO\", \"WMSFXO\", \"WMTBM\", \"WMFORQ\", \"WMITC\", \"WMCOBY\", \"WMCOTY\", \"WMCPNT\", \"WMFRMP\", \"WMTHRP\", \"WMFRGD\", \"WMTHGD\", \"WMRKCO\", \"WMRORN\", \"WMRCTO\", \"WMRLLN\", \"WMOPSQ\", \"WMBSEQ\", \"WMRSCP\", \"WMSCRP\", \"WMREWP\", \"WMASIP\", \"WMCPYP\", \"WMSTPP\", \"WMLOVD\", \"WMCPIT\", \"WMCPIL\", \"WMCPIA\", \"WMCMCU\", \"WMDSC1\", \"WMDSC2\", \"WMLOCN\", \"WMLOTN\", \"WMAN8\", \"WMLNTY\", \"WMSERN\", \"WMTRDJ\", \"WMDRQJ\", \"WMUORG\", \"WMTRQT\", \"WMSOCN\", \"WMSOBK\", \"WMCTS1\", \"WMQNTA\", \"WMUM\", \"WMEA\", \"WMRTG\", \"WMMTST\", \"WMDCT\", \"WMSHNO\", \"WMMCU\", \"WMOMCU\", \"WMOBJ\", \"WMSUB\", \"WMCMRV\", \"WMSTRX\", \"WMPARS\", \"WMCOMM\", \"WMURCD\", \"WMURDT\", \"WMURAT\", \"WMURRF\", \"WMURAB\", \"WMUSER\", \"WMPID\", \"WMJOBN\", \"WMUPMJ\", \"WMTDAY\", \"WMVEND\", \"WMPOC\", \"WMCTS4\", \"WMCTS7\", \"WMCTS8\", \"WMGLD\", \"WMSBFL\", \"WMAING\", \"WMSSTQ\", \"WMUOM2\", \"WMAPSC\", \"WMPSN\", \"WMDLEJ\", \"WMCOST\", \"WMCHPP\", \"WMCPNB\", \"WMBSEQAN\", \"DELETED_FLG\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F3111_HUB F3111_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F3111_S01 F3111_S01 ON F3111_HUB.ID = F3111_S01.ID\n    where F3111_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F3111_S01.ID ORDER BY F3111_S01.FD DESC) = 1 \n),\n    source_data as (\n        select\n            sha2_binary(to_variant(array_construct(F3111.\"WMUKID\")), 512) as PARTS_LIST_KEY,  /* cle technique*/\n            F3111.\"WMUKID\" as TRANSACTION_ID,  /*Num Transaction Interne*/\n            F3111.\"WMDOCO\" as OF_ID, /*N\u00b0 OF*/\n            F3111.\"WMDCTO\" as TYPE_OF_CD ,/*OF Type - Code */\n            F3111.\"WMCPIT\" as ITEM_ID, /*Code Interne Composant*/\n            F3111.\"WMCPIL\" as ITEM_CD, /*Code article composant*/\n            F3111.\"WMUM\" as UOM_CD, /*Unit\u00e9 de Mesure - Code*/\n            F3111.\"WMLOCN\" as LOCATION, /*Emplacement*/\n            F3111.\"WMLOTN\" as LOT_NUM, /*Composant - N\u00b0 Lot*/\n            F3111.\"WMTRQT\"/1000 as QTY_AVAILABLE, /*Quantit\u00e9 Consomm\u00e9e*/\n            F3111.\"WMUORG\"/1000 as QTY_ORDER, /*Quantit\u00e9 Pr\u00e9vue*/\n            F3111.\"WMSOCN\"/1000 as QTY_CANCELED, /*Quantit\u00e9 Annul\u00e9e*/\n            F3111.\"WMSOBK\"/1000 as QTY_HELD, /*Quantit\u00e9 Bloqu\u00e9e*/\n            F3111.\"WMQNTA\"/1000 as QTY_COMMITED, /*Quantit\u00e9 R\u00e9serv\u00e9e*/\n            F3111.fd as start_date,  /* Date de debut*/\n            F3111.td as end_date,  /* Date de fin */\n            F3111.fd as effective_from,  /* Date effective */\n            '2023-05-12 09:34:26'::datetime as ldts,  /* Date de chargement*/\n            'JDE' as rscr  /* Donn\u00e9es JDE*/\n        from F3111\n    )\n\nselect\n     PARTS_LIST_KEY\n    ,TRANSACTION_ID\n    ,OF_ID\n    ,TYPE_OF_CD\n    ,ITEM_ID\n    ,ITEM_CD\n    ,UOM_CD\n    ,LOCATION\n    ,LOT_NUM\n    ,QTY_AVAILABLE\n    ,QTY_ORDER\n    ,QTY_CANCELED\n    ,QTY_HELD\n    ,QTY_COMMITED\n    ,start_date\n    ,end_date\n    ,effective_from\n    ,ldts\n    ,rscr\n    ,sha2_binary(to_variant(array_construct(\n     TRANSACTION_ID\n    ,OF_ID\n    ,TYPE_OF_CD\n    ,ITEM_ID\n    ,ITEM_CD\n    ,UOM_CD\n    ,LOCATION\n    ,LOT_NUM\n    ,QTY_AVAILABLE\n    ,QTY_ORDER\n    ,QTY_CANCELED\n    ,QTY_HELD\n    ,QTY_COMMITED)), 512) as hashdiff\nfrom source_data\n)select PARTS_LIST_KEY\nfrom __dbt__cte__dwh_work_order_parts_list_tmp\nwhere PARTS_LIST_KEY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_work_order_parts_list_tmp", "sql": " __dbt__cte__dwh_work_order_parts_list_tmp as (\nwith\n    \nF3111 AS (\n  SELECT \n    F3111_HUB.\"ID\", \"WMUKID\",\n    F3111_S01.\"FD\", \"TD\", \"WMDOCO\", \"WMDCTO\", \"WMSFXO\", \"WMTBM\", \"WMFORQ\", \"WMITC\", \"WMCOBY\", \"WMCOTY\", \"WMCPNT\", \"WMFRMP\", \"WMTHRP\", \"WMFRGD\", \"WMTHGD\", \"WMRKCO\", \"WMRORN\", \"WMRCTO\", \"WMRLLN\", \"WMOPSQ\", \"WMBSEQ\", \"WMRSCP\", \"WMSCRP\", \"WMREWP\", \"WMASIP\", \"WMCPYP\", \"WMSTPP\", \"WMLOVD\", \"WMCPIT\", \"WMCPIL\", \"WMCPIA\", \"WMCMCU\", \"WMDSC1\", \"WMDSC2\", \"WMLOCN\", \"WMLOTN\", \"WMAN8\", \"WMLNTY\", \"WMSERN\", \"WMTRDJ\", \"WMDRQJ\", \"WMUORG\", \"WMTRQT\", \"WMSOCN\", \"WMSOBK\", \"WMCTS1\", \"WMQNTA\", \"WMUM\", \"WMEA\", \"WMRTG\", \"WMMTST\", \"WMDCT\", \"WMSHNO\", \"WMMCU\", \"WMOMCU\", \"WMOBJ\", \"WMSUB\", \"WMCMRV\", \"WMSTRX\", \"WMPARS\", \"WMCOMM\", \"WMURCD\", \"WMURDT\", \"WMURAT\", \"WMURRF\", \"WMURAB\", \"WMUSER\", \"WMPID\", \"WMJOBN\", \"WMUPMJ\", \"WMTDAY\", \"WMVEND\", \"WMPOC\", \"WMCTS4\", \"WMCTS7\", \"WMCTS8\", \"WMGLD\", \"WMSBFL\", \"WMAING\", \"WMSSTQ\", \"WMUOM2\", \"WMAPSC\", \"WMPSN\", \"WMDLEJ\", \"WMCOST\", \"WMCHPP\", \"WMCPNB\", \"WMBSEQAN\", \"DELETED_FLG\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F3111_HUB F3111_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F3111_S01 F3111_S01 ON F3111_HUB.ID = F3111_S01.ID\n    where F3111_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F3111_S01.ID ORDER BY F3111_S01.FD DESC) = 1 \n),\n    source_data as (\n        select\n            sha2_binary(to_variant(array_construct(F3111.\"WMUKID\")), 512) as PARTS_LIST_KEY,  /* cle technique*/\n            F3111.\"WMUKID\" as TRANSACTION_ID,  /*Num Transaction Interne*/\n            F3111.\"WMDOCO\" as OF_ID, /*N\u00b0 OF*/\n            F3111.\"WMDCTO\" as TYPE_OF_CD ,/*OF Type - Code */\n            F3111.\"WMCPIT\" as ITEM_ID, /*Code Interne Composant*/\n            F3111.\"WMCPIL\" as ITEM_CD, /*Code article composant*/\n            F3111.\"WMUM\" as UOM_CD, /*Unit\u00e9 de Mesure - Code*/\n            F3111.\"WMLOCN\" as LOCATION, /*Emplacement*/\n            F3111.\"WMLOTN\" as LOT_NUM, /*Composant - N\u00b0 Lot*/\n            F3111.\"WMTRQT\"/1000 as QTY_AVAILABLE, /*Quantit\u00e9 Consomm\u00e9e*/\n            F3111.\"WMUORG\"/1000 as QTY_ORDER, /*Quantit\u00e9 Pr\u00e9vue*/\n            F3111.\"WMSOCN\"/1000 as QTY_CANCELED, /*Quantit\u00e9 Annul\u00e9e*/\n            F3111.\"WMSOBK\"/1000 as QTY_HELD, /*Quantit\u00e9 Bloqu\u00e9e*/\n            F3111.\"WMQNTA\"/1000 as QTY_COMMITED, /*Quantit\u00e9 R\u00e9serv\u00e9e*/\n            F3111.fd as start_date,  /* Date de debut*/\n            F3111.td as end_date,  /* Date de fin */\n            F3111.fd as effective_from,  /* Date effective */\n            '2023-05-12 09:34:26'::datetime as ldts,  /* Date de chargement*/\n            'JDE' as rscr  /* Donn\u00e9es JDE*/\n        from F3111\n    )\n\nselect\n     PARTS_LIST_KEY\n    ,TRANSACTION_ID\n    ,OF_ID\n    ,TYPE_OF_CD\n    ,ITEM_ID\n    ,ITEM_CD\n    ,UOM_CD\n    ,LOCATION\n    ,LOT_NUM\n    ,QTY_AVAILABLE\n    ,QTY_ORDER\n    ,QTY_CANCELED\n    ,QTY_HELD\n    ,QTY_COMMITED\n    ,start_date\n    ,end_date\n    ,effective_from\n    ,ldts\n    ,rscr\n    ,sha2_binary(to_variant(array_construct(\n     TRANSACTION_ID\n    ,OF_ID\n    ,TYPE_OF_CD\n    ,ITEM_ID\n    ,ITEM_CD\n    ,UOM_CD\n    ,LOCATION\n    ,LOT_NUM\n    ,QTY_AVAILABLE\n    ,QTY_ORDER\n    ,QTY_CANCELED\n    ,QTY_HELD\n    ,QTY_COMMITED)), 512) as hashdiff\nfrom source_data\n)"}], "column_name": "PARTS_LIST_KEY", "file_key_name": "models.dwh_work_order_parts_list_tmp"}, "test.dbt_grizzly.unique_dwh_work_order_parts_list_hub_PARTS_LIST_KEY.8752a71f23": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "PARTS_LIST_KEY", "model": "{{ get_where_subquery(ref('dwh_work_order_parts_list_hub')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "unique_dwh_work_order_parts_list_hub_PARTS_LIST_KEY", "resource_type": "test", "package_name": "dbt_grizzly", "path": "unique_dwh_work_order_parts_list_hub_PARTS_LIST_KEY.sql", "original_file_path": "models\\20_silver_db\\production_sch\\01_business_vault\\dwh_work_order_parts_list_hub.schema.yml", "unique_id": "test.dbt_grizzly.unique_dwh_work_order_parts_list_hub_PARTS_LIST_KEY.8752a71f23", "fqn": ["dbt_grizzly", "20_silver_db", "production_sch", "01_business_vault", "unique_dwh_work_order_parts_list_hub_PARTS_LIST_KEY"], "alias": "unique_dwh_work_order_parts_list_hub_PARTS_LIST_KEY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884072.9341033, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_work_order_parts_list_hub"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_work_order_parts_list_hub"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\production_sch\\01_business_vault\\dwh_work_order_parts_list_hub.schema.yml\\unique_dwh_work_order_parts_list_hub_PARTS_LIST_KEY.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    PARTS_LIST_KEY as unique_field,\n    count(*) as n_records\n\nfrom PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PRODUCTION_SCH.dwh_work_order_parts_list_hub\nwhere PARTS_LIST_KEY is not null\ngroup by PARTS_LIST_KEY\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "PARTS_LIST_KEY", "file_key_name": "models.dwh_work_order_parts_list_hub"}, "test.dbt_grizzly.not_null_dwh_work_order_parts_list_hub_PARTS_LIST_KEY.05eb527fb3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PARTS_LIST_KEY", "model": "{{ get_where_subquery(ref('dwh_work_order_parts_list_hub')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "not_null_dwh_work_order_parts_list_hub_PARTS_LIST_KEY", "resource_type": "test", "package_name": "dbt_grizzly", "path": "not_null_dwh_work_order_parts_list_hub_PARTS_LIST_KEY.sql", "original_file_path": "models\\20_silver_db\\production_sch\\01_business_vault\\dwh_work_order_parts_list_hub.schema.yml", "unique_id": "test.dbt_grizzly.not_null_dwh_work_order_parts_list_hub_PARTS_LIST_KEY.05eb527fb3", "fqn": ["dbt_grizzly", "20_silver_db", "production_sch", "01_business_vault", "not_null_dwh_work_order_parts_list_hub_PARTS_LIST_KEY"], "alias": "not_null_dwh_work_order_parts_list_hub_PARTS_LIST_KEY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884072.942065, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_work_order_parts_list_hub"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_work_order_parts_list_hub"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\production_sch\\01_business_vault\\dwh_work_order_parts_list_hub.schema.yml\\not_null_dwh_work_order_parts_list_hub_PARTS_LIST_KEY.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PARTS_LIST_KEY\nfrom PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PRODUCTION_SCH.dwh_work_order_parts_list_hub\nwhere PARTS_LIST_KEY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "PARTS_LIST_KEY", "file_key_name": "models.dwh_work_order_parts_list_hub"}, "test.dbt_grizzly.not_null_dwh_ddo_parent_company_tmp_PARENT_COMPANY_KEY.f69d0898f3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PARENT_COMPANY_KEY", "model": "{{ get_where_subquery(ref('dwh_ddo_parent_company_tmp')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "not_null_dwh_ddo_parent_company_tmp_PARENT_COMPANY_KEY", "resource_type": "test", "package_name": "dbt_grizzly", "path": "not_null_dwh_ddo_parent_company_tmp_PARENT_COMPANY_KEY.sql", "original_file_path": "models\\20_silver_db\\ref_company_sch\\00_stage\\dwh_ddo_parent_company_tmp.schema.yml", "unique_id": "test.dbt_grizzly.not_null_dwh_ddo_parent_company_tmp_PARENT_COMPANY_KEY.f69d0898f3", "fqn": ["dbt_grizzly", "20_silver_db", "ref_company_sch", "00_stage", "not_null_dwh_ddo_parent_company_tmp_PARENT_COMPANY_KEY"], "alias": "not_null_dwh_ddo_parent_company_tmp_PARENT_COMPANY_KEY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884072.954595, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_ddo_parent_company_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_ddo_parent_company_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\ref_company_sch\\00_stage\\dwh_ddo_parent_company_tmp.schema.yml\\not_null_dwh_ddo_parent_company_tmp_PARENT_COMPANY_KEY.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__dwh_ddo_parent_company_tmp as (\nwith\nsource_data as \n(    \n    select\n    sha2_binary(to_variant(array_construct(OBJ_CD)),512) as PARENT_COMPANY_KEY,\n    OBJ_CD as PARENT_COMPANY_CD,\n    OBJ_NAME as PARENT_COMPANY_NAME,\n    VLD_START_DT as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'AD_P_PARAM' as RSCR\n    from PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM\n    where PARAM_CLASS_CD = 'LSV_SOCIETE_MERE'\n)\n\nselect \n    PARENT_COMPANY_KEY, PARENT_COMPANY_CD, PARENT_COMPANY_NAME, EFFECTIVE_FROM, LDTS, RSCR,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PARENT_COMPANY_KEY, PARENT_COMPANY_CD, PARENT_COMPANY_NAME)),512) as HASHDIFF\nfrom source_data\n)select PARENT_COMPANY_KEY\nfrom __dbt__cte__dwh_ddo_parent_company_tmp\nwhere PARENT_COMPANY_KEY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_ddo_parent_company_tmp", "sql": " __dbt__cte__dwh_ddo_parent_company_tmp as (\nwith\nsource_data as \n(    \n    select\n    sha2_binary(to_variant(array_construct(OBJ_CD)),512) as PARENT_COMPANY_KEY,\n    OBJ_CD as PARENT_COMPANY_CD,\n    OBJ_NAME as PARENT_COMPANY_NAME,\n    VLD_START_DT as EFFECTIVE_FROM,\n    '2023-05-12 09:34:26'::DATETIME as LDTS, \n    'AD_P_PARAM' as RSCR\n    from PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM\n    where PARAM_CLASS_CD = 'LSV_SOCIETE_MERE'\n)\n\nselect \n    PARENT_COMPANY_KEY, PARENT_COMPANY_CD, PARENT_COMPANY_NAME, EFFECTIVE_FROM, LDTS, RSCR,\n    sha2_binary(to_variant(ARRAY_CONSTRUCT(PARENT_COMPANY_KEY, PARENT_COMPANY_CD, PARENT_COMPANY_NAME)),512) as HASHDIFF\nfrom source_data\n)"}], "column_name": "PARENT_COMPANY_KEY", "file_key_name": "models.dwh_ddo_parent_company_tmp"}, "test.dbt_grizzly.unique_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY.9bd6c81548": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "PARENT_COMPANY_KEY", "model": "{{ get_where_subquery(ref('dwh_ddo_parent_company_hub')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "unique_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY", "resource_type": "test", "package_name": "dbt_grizzly", "path": "unique_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY.sql", "original_file_path": "models\\20_silver_db\\ref_company_sch\\01_business_vault\\dwh_ddo_parent_company_hub.schema.yml", "unique_id": "test.dbt_grizzly.unique_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY.9bd6c81548", "fqn": ["dbt_grizzly", "20_silver_db", "ref_company_sch", "01_business_vault", "unique_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY"], "alias": "unique_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884072.9624727, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_ddo_parent_company_hub"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_ddo_parent_company_hub"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\ref_company_sch\\01_business_vault\\dwh_ddo_parent_company_hub.schema.yml\\unique_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    PARENT_COMPANY_KEY as unique_field,\n    count(*) as n_records\n\nfrom PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_COMPANY_SCH.dwh_ddo_parent_company_hub\nwhere PARENT_COMPANY_KEY is not null\ngroup by PARENT_COMPANY_KEY\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "PARENT_COMPANY_KEY", "file_key_name": "models.dwh_ddo_parent_company_hub"}, "test.dbt_grizzly.not_null_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY.5824042b7b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PARENT_COMPANY_KEY", "model": "{{ get_where_subquery(ref('dwh_ddo_parent_company_hub')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "not_null_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY", "resource_type": "test", "package_name": "dbt_grizzly", "path": "not_null_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY.sql", "original_file_path": "models\\20_silver_db\\ref_company_sch\\01_business_vault\\dwh_ddo_parent_company_hub.schema.yml", "unique_id": "test.dbt_grizzly.not_null_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY.5824042b7b", "fqn": ["dbt_grizzly", "20_silver_db", "ref_company_sch", "01_business_vault", "not_null_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY"], "alias": "not_null_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884072.964946, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_ddo_parent_company_hub"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_ddo_parent_company_hub"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\ref_company_sch\\01_business_vault\\dwh_ddo_parent_company_hub.schema.yml\\not_null_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PARENT_COMPANY_KEY\nfrom PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_COMPANY_SCH.dwh_ddo_parent_company_hub\nwhere PARENT_COMPANY_KEY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "PARENT_COMPANY_KEY", "file_key_name": "models.dwh_ddo_parent_company_hub"}, "test.dbt_grizzly.unique_dwh_site_tmp_SITE_KEY.e2166ec73b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "SITE_KEY", "model": "{{ get_where_subquery(ref('dwh_site_tmp')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "unique_dwh_site_tmp_SITE_KEY", "resource_type": "test", "package_name": "dbt_grizzly", "path": "unique_dwh_site_tmp_SITE_KEY.sql", "original_file_path": "models\\20_silver_db\\site_sch\\00_stage\\dwh_site_tmp.schema.yml", "unique_id": "test.dbt_grizzly.unique_dwh_site_tmp_SITE_KEY.e2166ec73b", "fqn": ["dbt_grizzly", "20_silver_db", "site_sch", "00_stage", "unique_dwh_site_tmp_SITE_KEY"], "alias": "unique_dwh_site_tmp_SITE_KEY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884073.0152771, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_site_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_site_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\site_sch\\00_stage\\dwh_site_tmp.schema.yml\\unique_dwh_site_tmp_SITE_KEY.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__dwh_site_tmp as (\nWITH\n    \nF0006 AS (\n  SELECT \n    F0006_HUB.\"ID\", \"MCMCU\",\n    F0006_S01.\"FD\", \"TD\", \"MCSTYL\", \"MCDC\", \"MCLDM\", \"MCCO\", \"MCAN8\", \"MCAN8O\", \"MCCNTY\", \"MCADDS\", \"MCFMOD\", \"MCDL01\", \"MCDL02\", \"MCDL03\", \"MCDL04\", \"MCRP01\", \"MCRP02\", \"MCRP03\", \"MCRP04\", \"MCRP05\", \"MCRP06\", \"MCRP07\", \"MCRP08\", \"MCRP09\", \"MCRP10\", \"MCRP11\", \"MCRP12\", \"MCRP13\", \"MCRP14\", \"MCRP15\", \"MCRP16\", \"MCRP17\", \"MCRP18\", \"MCRP19\", \"MCRP20\", \"MCRP21\", \"MCRP22\", \"MCRP23\", \"MCRP24\", \"MCRP25\", \"MCRP26\", \"MCRP27\", \"MCRP28\", \"MCRP29\", \"MCRP30\", \"MCTA\", \"MCTXJS\", \"MCTXA1\", \"MCEXR1\", \"MCTC01\", \"MCTC02\", \"MCTC03\", \"MCTC04\", \"MCTC05\", \"MCTC06\", \"MCTC07\", \"MCTC08\", \"MCTC09\", \"MCTC10\", \"MCND01\", \"MCND02\", \"MCND03\", \"MCND04\", \"MCND05\", \"MCND06\", \"MCND07\", \"MCND08\", \"MCND09\", \"MCND10\", \"MCCC01\", \"MCCC02\", \"MCCC03\", \"MCCC04\", \"MCCC05\", \"MCCC06\", \"MCCC07\", \"MCCC08\", \"MCCC09\", \"MCCC10\", \"MCPECC\", \"MCALS\", \"MCISS\", \"MCGLBA\", \"MCALCL\", \"MCLMTH\", \"MCLF\", \"MCOBJ1\", \"MCOBJ2\", \"MCOBJ3\", \"MCSUB1\", \"MCTOU\", \"MCSBLI\", \"MCANPA\", \"MCCT\", \"MCCERT\", \"MCMCUS\", \"MCBTYP\", \"MCPC\", \"MCPCA\", \"MCPCC\", \"MCINTA\", \"MCINTL\", \"MCD1J\", \"MCD2J\", \"MCD3J\", \"MCD4J\", \"MCD5J\", \"MCD6J\", \"MCFPDJ\", \"MCCAC\", \"MCPAC\", \"MCEEO\", \"MCERC\", \"MCUSER\", \"MCPID\", \"MCUPMJ\", \"MCJOBN\", \"MCUPMT\", \"MCBPTP\", \"MCAPSB\", \"MCTSBU\", \"MCRP31\", \"MCRP32\", \"MCRP33\", \"MCRP34\", \"MCRP35\", \"MCRP36\", \"MCRP37\", \"MCRP38\", \"MCRP39\", \"MCRP40\", \"MCRP41\", \"MCRP42\", \"MCRP43\", \"MCRP44\", \"MCRP45\", \"MCRP46\", \"MCRP47\", \"MCRP48\", \"MCRP49\", \"MCRP50\", \"MCAN8GCA1\", \"MCAN8GCA2\", \"MCAN8GCA3\", \"MCAN8GCA4\", \"MCAN8GCA5\", \"MCRMCU1\", \"MCDOCO\", \"MCPCTN\", \"MCCLNU\", \"MCBUCA\", \"MCADJENT\", \"MCUAFL\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_HUB F0006_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_S01 F0006_S01 ON F0006_HUB.ID = F0006_S01.ID\n    where F0006_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0006_S01.ID ORDER BY F0006_S01.FD DESC) = 1 \n),\n    \nF0005 AS (\n  SELECT \n    F0005_HUB.\"ID\", \"DRSY\", \"DRRT\", \"DRKY\",\n    F0005_S01.\"FD\", \"TD\", \"DRDL01\", \"DRDL02\", \"DRSPHD\", \"DRUDCO\", \"DRHRDC\", \"DRUSER\", \"DRPID\", \"DRUPMJ\", \"DRJOBN\", \"DRUPMT\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_HUB F0005_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_S01 F0005_S01 ON F0005_HUB.ID = F0005_S01.ID\n    where F0005_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0005_S01.ID ORDER BY F0005_S01.FD DESC) = 1 \n),\n    \nF0101 AS (\n  SELECT \n    F0101_HUB.\"ID\", \"ABAN8\",\n    F0101_S01.\"FD\", \"TD\", \"ABALKY\", \"ABTAX\", \"ABALPH\", \"ABDC\", \"ABMCU\", \"ABSIC\", \"ABLNGP\", \"ABAT1\", \"ABCM\", \"ABTAXC\", \"ABAT2\", \"ABAT3\", \"ABAT4\", \"ABAT5\", \"ABATP\", \"ABATR\", \"ABATPR\", \"ABAB3\", \"ABATE\", \"ABSBLI\", \"ABEFTB\", \"ABAN81\", \"ABAN82\", \"ABAN83\", \"ABAN84\", \"ABAN86\", \"ABAN85\", \"ABAC01\", \"ABAC02\", \"ABAC03\", \"ABAC04\", \"ABAC05\", \"ABAC06\", \"ABAC07\", \"ABAC08\", \"ABAC09\", \"ABAC10\", \"ABAC11\", \"ABAC12\", \"ABAC13\", \"ABAC14\", \"ABAC15\", \"ABAC16\", \"ABAC17\", \"ABAC18\", \"ABAC19\", \"ABAC20\", \"ABAC21\", \"ABAC22\", \"ABAC23\", \"ABAC24\", \"ABAC25\", \"ABAC26\", \"ABAC27\", \"ABAC28\", \"ABAC29\", \"ABAC30\", \"ABGLBA\", \"ABPTI\", \"ABPDI\", \"ABMSGA\", \"ABRMK\", \"ABTXCT\", \"ABTX2\", \"ABALP1\", \"ABURCD\", \"ABURDT\", \"ABURAT\", \"ABURAB\", \"ABURRF\", \"ABUSER\", \"ABPID\", \"ABUPMJ\", \"ABJOBN\", \"ABUPMT\", \"ABPRGF\", \"ABSCCLTP\", \"ABTICKER\", \"ABEXCHG\", \"ABDUNS\", \"ABCLASS01\", \"ABCLASS02\", \"ABCLASS03\", \"ABCLASS04\", \"ABCLASS05\", \"ABNOE\", \"ABGROWTHR\", \"ABYEARSTAR\", \"ABAEMPGP\", \"ABACTIN\", \"ABREVRNG\", \"ABSYNCS\", \"ABPERRS\", \"ABCAAD\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_HUB F0101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_S01 F0101_S01 ON F0101_HUB.ID = F0101_S01.ID\n    where F0101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0101_S01.ID ORDER BY F0101_S01.FD DESC) = 1 \n),\n\nsite_type as (\n    --select aban8, abat1,abalph,mcrp05,mcrp07,mcmcu from\n    select TRIM(F0006.MCMCU) as MCMCU,\n    CASE WHEN TRIM(F0006.MCMCU) = TRIM(F0006.MCRP05) THEN 'DER'\n         WHEN F0006.MCRP07 = 'SU' THEN 'SU'\n         WHEN F0006.MCRP07 = 'A' THEN 'ACH'\n         WHEN F0006.MCRP07 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'KT' THEN 'DISP'\n         WHEN F0101.ABAT1 = 'D' THEN 'DL'\n         WHEN F0101.ABAT1 = 'AD' THEN 'DF'\n    END as SITE_TYPE_CD --Code du type de site\n    from F0101\n    inner join F0006 on F0101.ABAN8 = F0006.MCAN8\n    where F0101.abat1 in ('D','AD','ST','KT')\n),\n\nsource_data as (\n  select\n    sha2_binary(to_variant(array_construct(TRIM(F0006.MCMCU))),512) as SITE_KEY, --cle technique\n    sha2_binary(to_variant(array_construct(F0006.MCCO)),512) as COMPANY_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(F0006.MCAN8)),512) AS CUSTOMER_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    sha2_binary(to_variant(array_construct(SITE_KEY,COMPANY_KEY)),512) as SITE_COMPANY_LINK_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(SITE_KEY,CUSTOMER_KEY)),512) AS SITE_CUSTOMER_LINK_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    TRIM(F0006.MCMCU)  as SITE_CD, --Magasin - Code\n    F0006.MCDL01 as SITE_NAME, --Libell\u00e9 du site\n    IFF(AD_P_PARAM.PARAM_CLASS_CD = 'LSV_TYPE_SITE', F0101_TIER.ABAT1 , NULL) as TYP_REF, --Typologie du Referentiel tracabilit\u00e9\n    site_type.SITE_TYPE_CD as SITE_TYPE_CD, --Code du type de site*/\n    AD_P_PARAM.OBJ_NAME as SITE_TYPE_NAME, --Libell\u00e9 du type de site\n    AD_P_PARAM.OBJ_CPLT_1 as SITE_PRF_CD,  --Code du site PRF\n    AD_P_PARAM.OBJ_CPLT_2 as SITE_PRF_NAME,  --Libell\u00e9 du site PRF\n    IFF(SITE_TYPE.SITE_TYPE_CD = 'DER', 1 , 0) as DER_FLG, --Flag indiquant que nous sommes sur une DER\n    F0006.MCCO as COMPANY_ID,\n    --company_hub.COMPANY_CD as COMPANY_ID, --Identifiant technique de la soci\u00e9t\u00e9\n    --case when TRIM(F0101_0.ABAT1) in ('D','AD') then F0006.MCAN8 else NULL end  as PARTY_ID, --Identifiant technique du tiers\n    F0006.MCRP05 as SITE_GUARDSHIP_CD, --Code du site de rattachement (DER)\n    F0005_SITE_GUARDSHIP_NAME.DRDL01 as SITE_GUARDSHIP_NAME, --Libell\u00e9 du site de rattachement (DER)\n    F0005_CAPACITY_PROPRE_NBR_PL.DRDL01 as CAPACITY_PROPRE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits propres\n    F0005_CAPACITY_NEGOCE_NBR_PL.DRDL01 as CAPACITY_NEGOCE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits de negoce\n    F0005_CAPACITY_NBR_PL.DRDL01 as CAPACITY_NBR_PL, --Capacit\u00e9 en nombre de palette\n    F0006.FD as EFFECTIVE_FROM, -- Date effective  \n    '2023-05-12 09:34:26'::DATETIME as LDTS, -- Date de chargement\n    'JDE' as RSCR -- Donnees JDE\n  from F0006\n\n  inner join SITE_TYPE on TRIM(SITE_TYPE.MCMCU) = TRIM(F0006.MCMCU)\n  LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM AD_P_PARAM ON TRIM(AD_P_PARAM.OBJ_CD) = TRIM(SITE_TYPE.SITE_TYPE_CD) AND PARAM_CLASS_CD = 'LSV_TYPE_SITE'\n\n  LEFT JOIN (select distinct ABMCU from F0101 where ABAT1 in ('ST','KT','D','AD')) F0101 ON TRIM(F0101.ABMCU)=TRIM(F0006.MCMCU)\n  LEFT JOIN F0101 F0101_TIER ON F0101_TIER.ABAN8 = TRIM(F0006.MCAN8)\n  LEFT JOIN F0005 F0005_SITE_GUARDSHIP_NAME ON TRIM(F0005_SITE_GUARDSHIP_NAME.DRKY) = F0006.MCRP05 AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRSY) = '00' AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRRT) = '05' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_PROPRE_NBR_PL ON TRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRKY) = F0006.MCRP02 AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRRT) = '02' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NEGOCE_NBR_PL ON TRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRKY) = F0006.MCRP03 AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRRT) = '03' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NBR_PL ON TRIM(F0005_CAPACITY_NBR_PL.DRKY) = F0006.MCRP04 AND RTRIM(F0005_CAPACITY_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NBR_PL.DRRT) = '04' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n)\nselect\nSITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG,COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL, EFFECTIVE_FROM, LDTS, RSCR,\nsha2_binary(to_variant(ARRAY_CONSTRUCT(SITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG, COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL)),512) as HASHDIFF\nfrom source_data\n)select\n    SITE_KEY as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__dwh_site_tmp\nwhere SITE_KEY is not null\ngroup by SITE_KEY\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_site_tmp", "sql": " __dbt__cte__dwh_site_tmp as (\nWITH\n    \nF0006 AS (\n  SELECT \n    F0006_HUB.\"ID\", \"MCMCU\",\n    F0006_S01.\"FD\", \"TD\", \"MCSTYL\", \"MCDC\", \"MCLDM\", \"MCCO\", \"MCAN8\", \"MCAN8O\", \"MCCNTY\", \"MCADDS\", \"MCFMOD\", \"MCDL01\", \"MCDL02\", \"MCDL03\", \"MCDL04\", \"MCRP01\", \"MCRP02\", \"MCRP03\", \"MCRP04\", \"MCRP05\", \"MCRP06\", \"MCRP07\", \"MCRP08\", \"MCRP09\", \"MCRP10\", \"MCRP11\", \"MCRP12\", \"MCRP13\", \"MCRP14\", \"MCRP15\", \"MCRP16\", \"MCRP17\", \"MCRP18\", \"MCRP19\", \"MCRP20\", \"MCRP21\", \"MCRP22\", \"MCRP23\", \"MCRP24\", \"MCRP25\", \"MCRP26\", \"MCRP27\", \"MCRP28\", \"MCRP29\", \"MCRP30\", \"MCTA\", \"MCTXJS\", \"MCTXA1\", \"MCEXR1\", \"MCTC01\", \"MCTC02\", \"MCTC03\", \"MCTC04\", \"MCTC05\", \"MCTC06\", \"MCTC07\", \"MCTC08\", \"MCTC09\", \"MCTC10\", \"MCND01\", \"MCND02\", \"MCND03\", \"MCND04\", \"MCND05\", \"MCND06\", \"MCND07\", \"MCND08\", \"MCND09\", \"MCND10\", \"MCCC01\", \"MCCC02\", \"MCCC03\", \"MCCC04\", \"MCCC05\", \"MCCC06\", \"MCCC07\", \"MCCC08\", \"MCCC09\", \"MCCC10\", \"MCPECC\", \"MCALS\", \"MCISS\", \"MCGLBA\", \"MCALCL\", \"MCLMTH\", \"MCLF\", \"MCOBJ1\", \"MCOBJ2\", \"MCOBJ3\", \"MCSUB1\", \"MCTOU\", \"MCSBLI\", \"MCANPA\", \"MCCT\", \"MCCERT\", \"MCMCUS\", \"MCBTYP\", \"MCPC\", \"MCPCA\", \"MCPCC\", \"MCINTA\", \"MCINTL\", \"MCD1J\", \"MCD2J\", \"MCD3J\", \"MCD4J\", \"MCD5J\", \"MCD6J\", \"MCFPDJ\", \"MCCAC\", \"MCPAC\", \"MCEEO\", \"MCERC\", \"MCUSER\", \"MCPID\", \"MCUPMJ\", \"MCJOBN\", \"MCUPMT\", \"MCBPTP\", \"MCAPSB\", \"MCTSBU\", \"MCRP31\", \"MCRP32\", \"MCRP33\", \"MCRP34\", \"MCRP35\", \"MCRP36\", \"MCRP37\", \"MCRP38\", \"MCRP39\", \"MCRP40\", \"MCRP41\", \"MCRP42\", \"MCRP43\", \"MCRP44\", \"MCRP45\", \"MCRP46\", \"MCRP47\", \"MCRP48\", \"MCRP49\", \"MCRP50\", \"MCAN8GCA1\", \"MCAN8GCA2\", \"MCAN8GCA3\", \"MCAN8GCA4\", \"MCAN8GCA5\", \"MCRMCU1\", \"MCDOCO\", \"MCPCTN\", \"MCCLNU\", \"MCBUCA\", \"MCADJENT\", \"MCUAFL\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_HUB F0006_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_S01 F0006_S01 ON F0006_HUB.ID = F0006_S01.ID\n    where F0006_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0006_S01.ID ORDER BY F0006_S01.FD DESC) = 1 \n),\n    \nF0005 AS (\n  SELECT \n    F0005_HUB.\"ID\", \"DRSY\", \"DRRT\", \"DRKY\",\n    F0005_S01.\"FD\", \"TD\", \"DRDL01\", \"DRDL02\", \"DRSPHD\", \"DRUDCO\", \"DRHRDC\", \"DRUSER\", \"DRPID\", \"DRUPMJ\", \"DRJOBN\", \"DRUPMT\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_HUB F0005_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_S01 F0005_S01 ON F0005_HUB.ID = F0005_S01.ID\n    where F0005_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0005_S01.ID ORDER BY F0005_S01.FD DESC) = 1 \n),\n    \nF0101 AS (\n  SELECT \n    F0101_HUB.\"ID\", \"ABAN8\",\n    F0101_S01.\"FD\", \"TD\", \"ABALKY\", \"ABTAX\", \"ABALPH\", \"ABDC\", \"ABMCU\", \"ABSIC\", \"ABLNGP\", \"ABAT1\", \"ABCM\", \"ABTAXC\", \"ABAT2\", \"ABAT3\", \"ABAT4\", \"ABAT5\", \"ABATP\", \"ABATR\", \"ABATPR\", \"ABAB3\", \"ABATE\", \"ABSBLI\", \"ABEFTB\", \"ABAN81\", \"ABAN82\", \"ABAN83\", \"ABAN84\", \"ABAN86\", \"ABAN85\", \"ABAC01\", \"ABAC02\", \"ABAC03\", \"ABAC04\", \"ABAC05\", \"ABAC06\", \"ABAC07\", \"ABAC08\", \"ABAC09\", \"ABAC10\", \"ABAC11\", \"ABAC12\", \"ABAC13\", \"ABAC14\", \"ABAC15\", \"ABAC16\", \"ABAC17\", \"ABAC18\", \"ABAC19\", \"ABAC20\", \"ABAC21\", \"ABAC22\", \"ABAC23\", \"ABAC24\", \"ABAC25\", \"ABAC26\", \"ABAC27\", \"ABAC28\", \"ABAC29\", \"ABAC30\", \"ABGLBA\", \"ABPTI\", \"ABPDI\", \"ABMSGA\", \"ABRMK\", \"ABTXCT\", \"ABTX2\", \"ABALP1\", \"ABURCD\", \"ABURDT\", \"ABURAT\", \"ABURAB\", \"ABURRF\", \"ABUSER\", \"ABPID\", \"ABUPMJ\", \"ABJOBN\", \"ABUPMT\", \"ABPRGF\", \"ABSCCLTP\", \"ABTICKER\", \"ABEXCHG\", \"ABDUNS\", \"ABCLASS01\", \"ABCLASS02\", \"ABCLASS03\", \"ABCLASS04\", \"ABCLASS05\", \"ABNOE\", \"ABGROWTHR\", \"ABYEARSTAR\", \"ABAEMPGP\", \"ABACTIN\", \"ABREVRNG\", \"ABSYNCS\", \"ABPERRS\", \"ABCAAD\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_HUB F0101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_S01 F0101_S01 ON F0101_HUB.ID = F0101_S01.ID\n    where F0101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0101_S01.ID ORDER BY F0101_S01.FD DESC) = 1 \n),\n\nsite_type as (\n    --select aban8, abat1,abalph,mcrp05,mcrp07,mcmcu from\n    select TRIM(F0006.MCMCU) as MCMCU,\n    CASE WHEN TRIM(F0006.MCMCU) = TRIM(F0006.MCRP05) THEN 'DER'\n         WHEN F0006.MCRP07 = 'SU' THEN 'SU'\n         WHEN F0006.MCRP07 = 'A' THEN 'ACH'\n         WHEN F0006.MCRP07 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'KT' THEN 'DISP'\n         WHEN F0101.ABAT1 = 'D' THEN 'DL'\n         WHEN F0101.ABAT1 = 'AD' THEN 'DF'\n    END as SITE_TYPE_CD --Code du type de site\n    from F0101\n    inner join F0006 on F0101.ABAN8 = F0006.MCAN8\n    where F0101.abat1 in ('D','AD','ST','KT')\n),\n\nsource_data as (\n  select\n    sha2_binary(to_variant(array_construct(TRIM(F0006.MCMCU))),512) as SITE_KEY, --cle technique\n    sha2_binary(to_variant(array_construct(F0006.MCCO)),512) as COMPANY_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(F0006.MCAN8)),512) AS CUSTOMER_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    sha2_binary(to_variant(array_construct(SITE_KEY,COMPANY_KEY)),512) as SITE_COMPANY_LINK_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(SITE_KEY,CUSTOMER_KEY)),512) AS SITE_CUSTOMER_LINK_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    TRIM(F0006.MCMCU)  as SITE_CD, --Magasin - Code\n    F0006.MCDL01 as SITE_NAME, --Libell\u00e9 du site\n    IFF(AD_P_PARAM.PARAM_CLASS_CD = 'LSV_TYPE_SITE', F0101_TIER.ABAT1 , NULL) as TYP_REF, --Typologie du Referentiel tracabilit\u00e9\n    site_type.SITE_TYPE_CD as SITE_TYPE_CD, --Code du type de site*/\n    AD_P_PARAM.OBJ_NAME as SITE_TYPE_NAME, --Libell\u00e9 du type de site\n    AD_P_PARAM.OBJ_CPLT_1 as SITE_PRF_CD,  --Code du site PRF\n    AD_P_PARAM.OBJ_CPLT_2 as SITE_PRF_NAME,  --Libell\u00e9 du site PRF\n    IFF(SITE_TYPE.SITE_TYPE_CD = 'DER', 1 , 0) as DER_FLG, --Flag indiquant que nous sommes sur une DER\n    F0006.MCCO as COMPANY_ID,\n    --company_hub.COMPANY_CD as COMPANY_ID, --Identifiant technique de la soci\u00e9t\u00e9\n    --case when TRIM(F0101_0.ABAT1) in ('D','AD') then F0006.MCAN8 else NULL end  as PARTY_ID, --Identifiant technique du tiers\n    F0006.MCRP05 as SITE_GUARDSHIP_CD, --Code du site de rattachement (DER)\n    F0005_SITE_GUARDSHIP_NAME.DRDL01 as SITE_GUARDSHIP_NAME, --Libell\u00e9 du site de rattachement (DER)\n    F0005_CAPACITY_PROPRE_NBR_PL.DRDL01 as CAPACITY_PROPRE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits propres\n    F0005_CAPACITY_NEGOCE_NBR_PL.DRDL01 as CAPACITY_NEGOCE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits de negoce\n    F0005_CAPACITY_NBR_PL.DRDL01 as CAPACITY_NBR_PL, --Capacit\u00e9 en nombre de palette\n    F0006.FD as EFFECTIVE_FROM, -- Date effective  \n    '2023-05-12 09:34:26'::DATETIME as LDTS, -- Date de chargement\n    'JDE' as RSCR -- Donnees JDE\n  from F0006\n\n  inner join SITE_TYPE on TRIM(SITE_TYPE.MCMCU) = TRIM(F0006.MCMCU)\n  LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM AD_P_PARAM ON TRIM(AD_P_PARAM.OBJ_CD) = TRIM(SITE_TYPE.SITE_TYPE_CD) AND PARAM_CLASS_CD = 'LSV_TYPE_SITE'\n\n  LEFT JOIN (select distinct ABMCU from F0101 where ABAT1 in ('ST','KT','D','AD')) F0101 ON TRIM(F0101.ABMCU)=TRIM(F0006.MCMCU)\n  LEFT JOIN F0101 F0101_TIER ON F0101_TIER.ABAN8 = TRIM(F0006.MCAN8)\n  LEFT JOIN F0005 F0005_SITE_GUARDSHIP_NAME ON TRIM(F0005_SITE_GUARDSHIP_NAME.DRKY) = F0006.MCRP05 AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRSY) = '00' AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRRT) = '05' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_PROPRE_NBR_PL ON TRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRKY) = F0006.MCRP02 AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRRT) = '02' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NEGOCE_NBR_PL ON TRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRKY) = F0006.MCRP03 AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRRT) = '03' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NBR_PL ON TRIM(F0005_CAPACITY_NBR_PL.DRKY) = F0006.MCRP04 AND RTRIM(F0005_CAPACITY_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NBR_PL.DRRT) = '04' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n)\nselect\nSITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG,COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL, EFFECTIVE_FROM, LDTS, RSCR,\nsha2_binary(to_variant(ARRAY_CONSTRUCT(SITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG, COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL)),512) as HASHDIFF\nfrom source_data\n)"}], "column_name": "SITE_KEY", "file_key_name": "models.dwh_site_tmp"}, "test.dbt_grizzly.not_null_dwh_site_tmp_SITE_CD.99392ab9d7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SITE_CD", "model": "{{ get_where_subquery(ref('dwh_site_tmp')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "not_null_dwh_site_tmp_SITE_CD", "resource_type": "test", "package_name": "dbt_grizzly", "path": "not_null_dwh_site_tmp_SITE_CD.sql", "original_file_path": "models\\20_silver_db\\site_sch\\00_stage\\dwh_site_tmp.schema.yml", "unique_id": "test.dbt_grizzly.not_null_dwh_site_tmp_SITE_CD.99392ab9d7", "fqn": ["dbt_grizzly", "20_silver_db", "site_sch", "00_stage", "not_null_dwh_site_tmp_SITE_CD"], "alias": "not_null_dwh_site_tmp_SITE_CD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1683884073.0152771, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [["dwh_site_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_site_tmp"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\site_sch\\00_stage\\dwh_site_tmp.schema.yml\\not_null_dwh_site_tmp_SITE_CD.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__dwh_site_tmp as (\nWITH\n    \nF0006 AS (\n  SELECT \n    F0006_HUB.\"ID\", \"MCMCU\",\n    F0006_S01.\"FD\", \"TD\", \"MCSTYL\", \"MCDC\", \"MCLDM\", \"MCCO\", \"MCAN8\", \"MCAN8O\", \"MCCNTY\", \"MCADDS\", \"MCFMOD\", \"MCDL01\", \"MCDL02\", \"MCDL03\", \"MCDL04\", \"MCRP01\", \"MCRP02\", \"MCRP03\", \"MCRP04\", \"MCRP05\", \"MCRP06\", \"MCRP07\", \"MCRP08\", \"MCRP09\", \"MCRP10\", \"MCRP11\", \"MCRP12\", \"MCRP13\", \"MCRP14\", \"MCRP15\", \"MCRP16\", \"MCRP17\", \"MCRP18\", \"MCRP19\", \"MCRP20\", \"MCRP21\", \"MCRP22\", \"MCRP23\", \"MCRP24\", \"MCRP25\", \"MCRP26\", \"MCRP27\", \"MCRP28\", \"MCRP29\", \"MCRP30\", \"MCTA\", \"MCTXJS\", \"MCTXA1\", \"MCEXR1\", \"MCTC01\", \"MCTC02\", \"MCTC03\", \"MCTC04\", \"MCTC05\", \"MCTC06\", \"MCTC07\", \"MCTC08\", \"MCTC09\", \"MCTC10\", \"MCND01\", \"MCND02\", \"MCND03\", \"MCND04\", \"MCND05\", \"MCND06\", \"MCND07\", \"MCND08\", \"MCND09\", \"MCND10\", \"MCCC01\", \"MCCC02\", \"MCCC03\", \"MCCC04\", \"MCCC05\", \"MCCC06\", \"MCCC07\", \"MCCC08\", \"MCCC09\", \"MCCC10\", \"MCPECC\", \"MCALS\", \"MCISS\", \"MCGLBA\", \"MCALCL\", \"MCLMTH\", \"MCLF\", \"MCOBJ1\", \"MCOBJ2\", \"MCOBJ3\", \"MCSUB1\", \"MCTOU\", \"MCSBLI\", \"MCANPA\", \"MCCT\", \"MCCERT\", \"MCMCUS\", \"MCBTYP\", \"MCPC\", \"MCPCA\", \"MCPCC\", \"MCINTA\", \"MCINTL\", \"MCD1J\", \"MCD2J\", \"MCD3J\", \"MCD4J\", \"MCD5J\", \"MCD6J\", \"MCFPDJ\", \"MCCAC\", \"MCPAC\", \"MCEEO\", \"MCERC\", \"MCUSER\", \"MCPID\", \"MCUPMJ\", \"MCJOBN\", \"MCUPMT\", \"MCBPTP\", \"MCAPSB\", \"MCTSBU\", \"MCRP31\", \"MCRP32\", \"MCRP33\", \"MCRP34\", \"MCRP35\", \"MCRP36\", \"MCRP37\", \"MCRP38\", \"MCRP39\", \"MCRP40\", \"MCRP41\", \"MCRP42\", \"MCRP43\", \"MCRP44\", \"MCRP45\", \"MCRP46\", \"MCRP47\", \"MCRP48\", \"MCRP49\", \"MCRP50\", \"MCAN8GCA1\", \"MCAN8GCA2\", \"MCAN8GCA3\", \"MCAN8GCA4\", \"MCAN8GCA5\", \"MCRMCU1\", \"MCDOCO\", \"MCPCTN\", \"MCCLNU\", \"MCBUCA\", \"MCADJENT\", \"MCUAFL\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_HUB F0006_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_S01 F0006_S01 ON F0006_HUB.ID = F0006_S01.ID\n    where F0006_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0006_S01.ID ORDER BY F0006_S01.FD DESC) = 1 \n),\n    \nF0005 AS (\n  SELECT \n    F0005_HUB.\"ID\", \"DRSY\", \"DRRT\", \"DRKY\",\n    F0005_S01.\"FD\", \"TD\", \"DRDL01\", \"DRDL02\", \"DRSPHD\", \"DRUDCO\", \"DRHRDC\", \"DRUSER\", \"DRPID\", \"DRUPMJ\", \"DRJOBN\", \"DRUPMT\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_HUB F0005_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_S01 F0005_S01 ON F0005_HUB.ID = F0005_S01.ID\n    where F0005_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0005_S01.ID ORDER BY F0005_S01.FD DESC) = 1 \n),\n    \nF0101 AS (\n  SELECT \n    F0101_HUB.\"ID\", \"ABAN8\",\n    F0101_S01.\"FD\", \"TD\", \"ABALKY\", \"ABTAX\", \"ABALPH\", \"ABDC\", \"ABMCU\", \"ABSIC\", \"ABLNGP\", \"ABAT1\", \"ABCM\", \"ABTAXC\", \"ABAT2\", \"ABAT3\", \"ABAT4\", \"ABAT5\", \"ABATP\", \"ABATR\", \"ABATPR\", \"ABAB3\", \"ABATE\", \"ABSBLI\", \"ABEFTB\", \"ABAN81\", \"ABAN82\", \"ABAN83\", \"ABAN84\", \"ABAN86\", \"ABAN85\", \"ABAC01\", \"ABAC02\", \"ABAC03\", \"ABAC04\", \"ABAC05\", \"ABAC06\", \"ABAC07\", \"ABAC08\", \"ABAC09\", \"ABAC10\", \"ABAC11\", \"ABAC12\", \"ABAC13\", \"ABAC14\", \"ABAC15\", \"ABAC16\", \"ABAC17\", \"ABAC18\", \"ABAC19\", \"ABAC20\", \"ABAC21\", \"ABAC22\", \"ABAC23\", \"ABAC24\", \"ABAC25\", \"ABAC26\", \"ABAC27\", \"ABAC28\", \"ABAC29\", \"ABAC30\", \"ABGLBA\", \"ABPTI\", \"ABPDI\", \"ABMSGA\", \"ABRMK\", \"ABTXCT\", \"ABTX2\", \"ABALP1\", \"ABURCD\", \"ABURDT\", \"ABURAT\", \"ABURAB\", \"ABURRF\", \"ABUSER\", \"ABPID\", \"ABUPMJ\", \"ABJOBN\", \"ABUPMT\", \"ABPRGF\", \"ABSCCLTP\", \"ABTICKER\", \"ABEXCHG\", \"ABDUNS\", \"ABCLASS01\", \"ABCLASS02\", \"ABCLASS03\", \"ABCLASS04\", \"ABCLASS05\", \"ABNOE\", \"ABGROWTHR\", \"ABYEARSTAR\", \"ABAEMPGP\", \"ABACTIN\", \"ABREVRNG\", \"ABSYNCS\", \"ABPERRS\", \"ABCAAD\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_HUB F0101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_S01 F0101_S01 ON F0101_HUB.ID = F0101_S01.ID\n    where F0101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0101_S01.ID ORDER BY F0101_S01.FD DESC) = 1 \n),\n\nsite_type as (\n    --select aban8, abat1,abalph,mcrp05,mcrp07,mcmcu from\n    select TRIM(F0006.MCMCU) as MCMCU,\n    CASE WHEN TRIM(F0006.MCMCU) = TRIM(F0006.MCRP05) THEN 'DER'\n         WHEN F0006.MCRP07 = 'SU' THEN 'SU'\n         WHEN F0006.MCRP07 = 'A' THEN 'ACH'\n         WHEN F0006.MCRP07 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'KT' THEN 'DISP'\n         WHEN F0101.ABAT1 = 'D' THEN 'DL'\n         WHEN F0101.ABAT1 = 'AD' THEN 'DF'\n    END as SITE_TYPE_CD --Code du type de site\n    from F0101\n    inner join F0006 on F0101.ABAN8 = F0006.MCAN8\n    where F0101.abat1 in ('D','AD','ST','KT')\n),\n\nsource_data as (\n  select\n    sha2_binary(to_variant(array_construct(TRIM(F0006.MCMCU))),512) as SITE_KEY, --cle technique\n    sha2_binary(to_variant(array_construct(F0006.MCCO)),512) as COMPANY_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(F0006.MCAN8)),512) AS CUSTOMER_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    sha2_binary(to_variant(array_construct(SITE_KEY,COMPANY_KEY)),512) as SITE_COMPANY_LINK_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(SITE_KEY,CUSTOMER_KEY)),512) AS SITE_CUSTOMER_LINK_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    TRIM(F0006.MCMCU)  as SITE_CD, --Magasin - Code\n    F0006.MCDL01 as SITE_NAME, --Libell\u00e9 du site\n    IFF(AD_P_PARAM.PARAM_CLASS_CD = 'LSV_TYPE_SITE', F0101_TIER.ABAT1 , NULL) as TYP_REF, --Typologie du Referentiel tracabilit\u00e9\n    site_type.SITE_TYPE_CD as SITE_TYPE_CD, --Code du type de site*/\n    AD_P_PARAM.OBJ_NAME as SITE_TYPE_NAME, --Libell\u00e9 du type de site\n    AD_P_PARAM.OBJ_CPLT_1 as SITE_PRF_CD,  --Code du site PRF\n    AD_P_PARAM.OBJ_CPLT_2 as SITE_PRF_NAME,  --Libell\u00e9 du site PRF\n    IFF(SITE_TYPE.SITE_TYPE_CD = 'DER', 1 , 0) as DER_FLG, --Flag indiquant que nous sommes sur une DER\n    F0006.MCCO as COMPANY_ID,\n    --company_hub.COMPANY_CD as COMPANY_ID, --Identifiant technique de la soci\u00e9t\u00e9\n    --case when TRIM(F0101_0.ABAT1) in ('D','AD') then F0006.MCAN8 else NULL end  as PARTY_ID, --Identifiant technique du tiers\n    F0006.MCRP05 as SITE_GUARDSHIP_CD, --Code du site de rattachement (DER)\n    F0005_SITE_GUARDSHIP_NAME.DRDL01 as SITE_GUARDSHIP_NAME, --Libell\u00e9 du site de rattachement (DER)\n    F0005_CAPACITY_PROPRE_NBR_PL.DRDL01 as CAPACITY_PROPRE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits propres\n    F0005_CAPACITY_NEGOCE_NBR_PL.DRDL01 as CAPACITY_NEGOCE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits de negoce\n    F0005_CAPACITY_NBR_PL.DRDL01 as CAPACITY_NBR_PL, --Capacit\u00e9 en nombre de palette\n    F0006.FD as EFFECTIVE_FROM, -- Date effective  \n    '2023-05-12 09:34:26'::DATETIME as LDTS, -- Date de chargement\n    'JDE' as RSCR -- Donnees JDE\n  from F0006\n\n  inner join SITE_TYPE on TRIM(SITE_TYPE.MCMCU) = TRIM(F0006.MCMCU)\n  LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM AD_P_PARAM ON TRIM(AD_P_PARAM.OBJ_CD) = TRIM(SITE_TYPE.SITE_TYPE_CD) AND PARAM_CLASS_CD = 'LSV_TYPE_SITE'\n\n  LEFT JOIN (select distinct ABMCU from F0101 where ABAT1 in ('ST','KT','D','AD')) F0101 ON TRIM(F0101.ABMCU)=TRIM(F0006.MCMCU)\n  LEFT JOIN F0101 F0101_TIER ON F0101_TIER.ABAN8 = TRIM(F0006.MCAN8)\n  LEFT JOIN F0005 F0005_SITE_GUARDSHIP_NAME ON TRIM(F0005_SITE_GUARDSHIP_NAME.DRKY) = F0006.MCRP05 AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRSY) = '00' AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRRT) = '05' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_PROPRE_NBR_PL ON TRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRKY) = F0006.MCRP02 AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRRT) = '02' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NEGOCE_NBR_PL ON TRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRKY) = F0006.MCRP03 AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRRT) = '03' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NBR_PL ON TRIM(F0005_CAPACITY_NBR_PL.DRKY) = F0006.MCRP04 AND RTRIM(F0005_CAPACITY_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NBR_PL.DRRT) = '04' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n)\nselect\nSITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG,COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL, EFFECTIVE_FROM, LDTS, RSCR,\nsha2_binary(to_variant(ARRAY_CONSTRUCT(SITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG, COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL)),512) as HASHDIFF\nfrom source_data\n)select SITE_CD\nfrom __dbt__cte__dwh_site_tmp\nwhere SITE_CD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_grizzly.dwh_site_tmp", "sql": " __dbt__cte__dwh_site_tmp as (\nWITH\n    \nF0006 AS (\n  SELECT \n    F0006_HUB.\"ID\", \"MCMCU\",\n    F0006_S01.\"FD\", \"TD\", \"MCSTYL\", \"MCDC\", \"MCLDM\", \"MCCO\", \"MCAN8\", \"MCAN8O\", \"MCCNTY\", \"MCADDS\", \"MCFMOD\", \"MCDL01\", \"MCDL02\", \"MCDL03\", \"MCDL04\", \"MCRP01\", \"MCRP02\", \"MCRP03\", \"MCRP04\", \"MCRP05\", \"MCRP06\", \"MCRP07\", \"MCRP08\", \"MCRP09\", \"MCRP10\", \"MCRP11\", \"MCRP12\", \"MCRP13\", \"MCRP14\", \"MCRP15\", \"MCRP16\", \"MCRP17\", \"MCRP18\", \"MCRP19\", \"MCRP20\", \"MCRP21\", \"MCRP22\", \"MCRP23\", \"MCRP24\", \"MCRP25\", \"MCRP26\", \"MCRP27\", \"MCRP28\", \"MCRP29\", \"MCRP30\", \"MCTA\", \"MCTXJS\", \"MCTXA1\", \"MCEXR1\", \"MCTC01\", \"MCTC02\", \"MCTC03\", \"MCTC04\", \"MCTC05\", \"MCTC06\", \"MCTC07\", \"MCTC08\", \"MCTC09\", \"MCTC10\", \"MCND01\", \"MCND02\", \"MCND03\", \"MCND04\", \"MCND05\", \"MCND06\", \"MCND07\", \"MCND08\", \"MCND09\", \"MCND10\", \"MCCC01\", \"MCCC02\", \"MCCC03\", \"MCCC04\", \"MCCC05\", \"MCCC06\", \"MCCC07\", \"MCCC08\", \"MCCC09\", \"MCCC10\", \"MCPECC\", \"MCALS\", \"MCISS\", \"MCGLBA\", \"MCALCL\", \"MCLMTH\", \"MCLF\", \"MCOBJ1\", \"MCOBJ2\", \"MCOBJ3\", \"MCSUB1\", \"MCTOU\", \"MCSBLI\", \"MCANPA\", \"MCCT\", \"MCCERT\", \"MCMCUS\", \"MCBTYP\", \"MCPC\", \"MCPCA\", \"MCPCC\", \"MCINTA\", \"MCINTL\", \"MCD1J\", \"MCD2J\", \"MCD3J\", \"MCD4J\", \"MCD5J\", \"MCD6J\", \"MCFPDJ\", \"MCCAC\", \"MCPAC\", \"MCEEO\", \"MCERC\", \"MCUSER\", \"MCPID\", \"MCUPMJ\", \"MCJOBN\", \"MCUPMT\", \"MCBPTP\", \"MCAPSB\", \"MCTSBU\", \"MCRP31\", \"MCRP32\", \"MCRP33\", \"MCRP34\", \"MCRP35\", \"MCRP36\", \"MCRP37\", \"MCRP38\", \"MCRP39\", \"MCRP40\", \"MCRP41\", \"MCRP42\", \"MCRP43\", \"MCRP44\", \"MCRP45\", \"MCRP46\", \"MCRP47\", \"MCRP48\", \"MCRP49\", \"MCRP50\", \"MCAN8GCA1\", \"MCAN8GCA2\", \"MCAN8GCA3\", \"MCAN8GCA4\", \"MCAN8GCA5\", \"MCRMCU1\", \"MCDOCO\", \"MCPCTN\", \"MCCLNU\", \"MCBUCA\", \"MCADJENT\", \"MCUAFL\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_HUB F0006_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_S01 F0006_S01 ON F0006_HUB.ID = F0006_S01.ID\n    where F0006_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0006_S01.ID ORDER BY F0006_S01.FD DESC) = 1 \n),\n    \nF0005 AS (\n  SELECT \n    F0005_HUB.\"ID\", \"DRSY\", \"DRRT\", \"DRKY\",\n    F0005_S01.\"FD\", \"TD\", \"DRDL01\", \"DRDL02\", \"DRSPHD\", \"DRUDCO\", \"DRHRDC\", \"DRUSER\", \"DRPID\", \"DRUPMJ\", \"DRJOBN\", \"DRUPMT\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_HUB F0005_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_S01 F0005_S01 ON F0005_HUB.ID = F0005_S01.ID\n    where F0005_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0005_S01.ID ORDER BY F0005_S01.FD DESC) = 1 \n),\n    \nF0101 AS (\n  SELECT \n    F0101_HUB.\"ID\", \"ABAN8\",\n    F0101_S01.\"FD\", \"TD\", \"ABALKY\", \"ABTAX\", \"ABALPH\", \"ABDC\", \"ABMCU\", \"ABSIC\", \"ABLNGP\", \"ABAT1\", \"ABCM\", \"ABTAXC\", \"ABAT2\", \"ABAT3\", \"ABAT4\", \"ABAT5\", \"ABATP\", \"ABATR\", \"ABATPR\", \"ABAB3\", \"ABATE\", \"ABSBLI\", \"ABEFTB\", \"ABAN81\", \"ABAN82\", \"ABAN83\", \"ABAN84\", \"ABAN86\", \"ABAN85\", \"ABAC01\", \"ABAC02\", \"ABAC03\", \"ABAC04\", \"ABAC05\", \"ABAC06\", \"ABAC07\", \"ABAC08\", \"ABAC09\", \"ABAC10\", \"ABAC11\", \"ABAC12\", \"ABAC13\", \"ABAC14\", \"ABAC15\", \"ABAC16\", \"ABAC17\", \"ABAC18\", \"ABAC19\", \"ABAC20\", \"ABAC21\", \"ABAC22\", \"ABAC23\", \"ABAC24\", \"ABAC25\", \"ABAC26\", \"ABAC27\", \"ABAC28\", \"ABAC29\", \"ABAC30\", \"ABGLBA\", \"ABPTI\", \"ABPDI\", \"ABMSGA\", \"ABRMK\", \"ABTXCT\", \"ABTX2\", \"ABALP1\", \"ABURCD\", \"ABURDT\", \"ABURAT\", \"ABURAB\", \"ABURRF\", \"ABUSER\", \"ABPID\", \"ABUPMJ\", \"ABJOBN\", \"ABUPMT\", \"ABPRGF\", \"ABSCCLTP\", \"ABTICKER\", \"ABEXCHG\", \"ABDUNS\", \"ABCLASS01\", \"ABCLASS02\", \"ABCLASS03\", \"ABCLASS04\", \"ABCLASS05\", \"ABNOE\", \"ABGROWTHR\", \"ABYEARSTAR\", \"ABAEMPGP\", \"ABACTIN\", \"ABREVRNG\", \"ABSYNCS\", \"ABPERRS\", \"ABCAAD\"\n  FROM \n    PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_HUB F0101_HUB \n    INNER JOIN PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_S01 F0101_S01 ON F0101_HUB.ID = F0101_S01.ID\n    where F0101_HUB.ID <> 0\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY F0101_S01.ID ORDER BY F0101_S01.FD DESC) = 1 \n),\n\nsite_type as (\n    --select aban8, abat1,abalph,mcrp05,mcrp07,mcmcu from\n    select TRIM(F0006.MCMCU) as MCMCU,\n    CASE WHEN TRIM(F0006.MCMCU) = TRIM(F0006.MCRP05) THEN 'DER'\n         WHEN F0006.MCRP07 = 'SU' THEN 'SU'\n         WHEN F0006.MCRP07 = 'A' THEN 'ACH'\n         WHEN F0006.MCRP07 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'ST' THEN 'ST'\n         WHEN F0101.ABAT1 = 'KT' THEN 'DISP'\n         WHEN F0101.ABAT1 = 'D' THEN 'DL'\n         WHEN F0101.ABAT1 = 'AD' THEN 'DF'\n    END as SITE_TYPE_CD --Code du type de site\n    from F0101\n    inner join F0006 on F0101.ABAN8 = F0006.MCAN8\n    where F0101.abat1 in ('D','AD','ST','KT')\n),\n\nsource_data as (\n  select\n    sha2_binary(to_variant(array_construct(TRIM(F0006.MCMCU))),512) as SITE_KEY, --cle technique\n    sha2_binary(to_variant(array_construct(F0006.MCCO)),512) as COMPANY_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(F0006.MCAN8)),512) AS CUSTOMER_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    sha2_binary(to_variant(array_construct(SITE_KEY,COMPANY_KEY)),512) as SITE_COMPANY_LINK_KEY, --Cl\u00e9 hash\u00e9e des soci\u00e9t\u00e9s\n    sha2_binary(to_variant(array_construct(SITE_KEY,CUSTOMER_KEY)),512) AS SITE_CUSTOMER_LINK_KEY, --Cl\u00e9 hash\u00e9e des utilisateurs\n    TRIM(F0006.MCMCU)  as SITE_CD, --Magasin - Code\n    F0006.MCDL01 as SITE_NAME, --Libell\u00e9 du site\n    IFF(AD_P_PARAM.PARAM_CLASS_CD = 'LSV_TYPE_SITE', F0101_TIER.ABAT1 , NULL) as TYP_REF, --Typologie du Referentiel tracabilit\u00e9\n    site_type.SITE_TYPE_CD as SITE_TYPE_CD, --Code du type de site*/\n    AD_P_PARAM.OBJ_NAME as SITE_TYPE_NAME, --Libell\u00e9 du type de site\n    AD_P_PARAM.OBJ_CPLT_1 as SITE_PRF_CD,  --Code du site PRF\n    AD_P_PARAM.OBJ_CPLT_2 as SITE_PRF_NAME,  --Libell\u00e9 du site PRF\n    IFF(SITE_TYPE.SITE_TYPE_CD = 'DER', 1 , 0) as DER_FLG, --Flag indiquant que nous sommes sur une DER\n    F0006.MCCO as COMPANY_ID,\n    --company_hub.COMPANY_CD as COMPANY_ID, --Identifiant technique de la soci\u00e9t\u00e9\n    --case when TRIM(F0101_0.ABAT1) in ('D','AD') then F0006.MCAN8 else NULL end  as PARTY_ID, --Identifiant technique du tiers\n    F0006.MCRP05 as SITE_GUARDSHIP_CD, --Code du site de rattachement (DER)\n    F0005_SITE_GUARDSHIP_NAME.DRDL01 as SITE_GUARDSHIP_NAME, --Libell\u00e9 du site de rattachement (DER)\n    F0005_CAPACITY_PROPRE_NBR_PL.DRDL01 as CAPACITY_PROPRE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits propres\n    F0005_CAPACITY_NEGOCE_NBR_PL.DRDL01 as CAPACITY_NEGOCE_NBR_PL, --Capacit\u00e9 en nombre de palette pour les produits de negoce\n    F0005_CAPACITY_NBR_PL.DRDL01 as CAPACITY_NBR_PL, --Capacit\u00e9 en nombre de palette\n    F0006.FD as EFFECTIVE_FROM, -- Date effective  \n    '2023-05-12 09:34:26'::DATETIME as LDTS, -- Date de chargement\n    'JDE' as RSCR -- Donnees JDE\n  from F0006\n\n  inner join SITE_TYPE on TRIM(SITE_TYPE.MCMCU) = TRIM(F0006.MCMCU)\n  LEFT JOIN PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM AD_P_PARAM ON TRIM(AD_P_PARAM.OBJ_CD) = TRIM(SITE_TYPE.SITE_TYPE_CD) AND PARAM_CLASS_CD = 'LSV_TYPE_SITE'\n\n  LEFT JOIN (select distinct ABMCU from F0101 where ABAT1 in ('ST','KT','D','AD')) F0101 ON TRIM(F0101.ABMCU)=TRIM(F0006.MCMCU)\n  LEFT JOIN F0101 F0101_TIER ON F0101_TIER.ABAN8 = TRIM(F0006.MCAN8)\n  LEFT JOIN F0005 F0005_SITE_GUARDSHIP_NAME ON TRIM(F0005_SITE_GUARDSHIP_NAME.DRKY) = F0006.MCRP05 AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRSY) = '00' AND RTRIM(F0005_SITE_GUARDSHIP_NAME.DRRT) = '05' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_PROPRE_NBR_PL ON TRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRKY) = F0006.MCRP02 AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_PROPRE_NBR_PL.DRRT) = '02' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NEGOCE_NBR_PL ON TRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRKY) = F0006.MCRP03 AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NEGOCE_NBR_PL.DRRT) = '03' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n  LEFT JOIN F0005 F0005_CAPACITY_NBR_PL ON TRIM(F0005_CAPACITY_NBR_PL.DRKY) = F0006.MCRP04 AND RTRIM(F0005_CAPACITY_NBR_PL.DRSY) = '00' AND RTRIM(F0005_CAPACITY_NBR_PL.DRRT) = '04' --R\u00e9cup\u00e9ration du libell\u00e9 dans la table TDWH_JDE_F0005_HUB\n)\nselect\nSITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG,COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL, EFFECTIVE_FROM, LDTS, RSCR,\nsha2_binary(to_variant(ARRAY_CONSTRUCT(SITE_KEY, COMPANY_KEY, CUSTOMER_KEY, SITE_COMPANY_LINK_KEY, SITE_CUSTOMER_LINK_KEY, SITE_CD, SITE_NAME, TYP_REF, SITE_TYPE_CD, SITE_TYPE_NAME, SITE_PRF_CD, SITE_PRF_NAME, DER_FLG, COMPANY_ID, SITE_GUARDSHIP_CD, SITE_GUARDSHIP_NAME, CAPACITY_PROPRE_NBR_PL, CAPACITY_NEGOCE_NBR_PL, CAPACITY_NBR_PL)),512) as HASHDIFF\nfrom source_data\n)"}], "column_name": "SITE_CD", "file_key_name": "models.dwh_site_tmp"}, "test.dbt_grizzly.unique_dwh_site_company_link_SITE_COMPANY_LINK_KEY.dbe397ae81": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "SITE_COMPANY_LINK_KEY", "model": "{{ get_where_subquery(ref('dwh_site_company_link')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "unique_dwh_site_company_link_SITE_COMPANY_LINK_KEY", "resource_type": "test", "package_name": "dbt_grizzly", "path": "unique_dwh_site_company_link_SITE_COMPANY_LINK_KEY.sql", "original_file_path": "models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_company_link.schema.yml", "unique_id": "test.dbt_grizzly.unique_dwh_site_company_link_SITE_COMPANY_LINK_KEY.dbe397ae81", "fqn": ["dbt_grizzly", "20_silver_db", "site_sch", "01_business_vault", "unique_dwh_site_company_link_SITE_COMPANY_LINK_KEY"], "alias": "unique_dwh_site_company_link_SITE_COMPANY_LINK_KEY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884073.0313623, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_site_company_link"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_site_company_link"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_company_link.schema.yml\\unique_dwh_site_company_link_SITE_COMPANY_LINK_KEY.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    SITE_COMPANY_LINK_KEY as unique_field,\n    count(*) as n_records\n\nfrom PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_SITE_SCH.dwh_site_company_link\nwhere SITE_COMPANY_LINK_KEY is not null\ngroup by SITE_COMPANY_LINK_KEY\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "SITE_COMPANY_LINK_KEY", "file_key_name": "models.dwh_site_company_link"}, "test.dbt_grizzly.unique_dwh_site_CUSTOMER_link_SITE_CUSTOMER_LINK_KEY.da9cb6041b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "SITE_CUSTOMER_LINK_KEY", "model": "{{ get_where_subquery(ref('dwh_site_CUSTOMER_link')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "unique_dwh_site_CUSTOMER_link_SITE_CUSTOMER_LINK_KEY", "resource_type": "test", "package_name": "dbt_grizzly", "path": "unique_dwh_site_CUSTOMER_link_SITE_CUSTOMER_LINK_KEY.sql", "original_file_path": "models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_customer_link.schema.yml", "unique_id": "test.dbt_grizzly.unique_dwh_site_CUSTOMER_link_SITE_CUSTOMER_LINK_KEY.da9cb6041b", "fqn": ["dbt_grizzly", "20_silver_db", "site_sch", "01_business_vault", "unique_dwh_site_CUSTOMER_link_SITE_CUSTOMER_LINK_KEY"], "alias": "unique_dwh_site_CUSTOMER_link_SITE_CUSTOMER_LINK_KEY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884073.0474405, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_site_CUSTOMER_link"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "column_name": "SITE_CUSTOMER_LINK_KEY", "file_key_name": "models.dwh_site_CUSTOMER_link"}, "test.dbt_grizzly.unique_dwh_site_hub_SITE_KEY.2239e655cc": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "SITE_KEY", "model": "{{ get_where_subquery(ref('dwh_site_hub')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "unique_dwh_site_hub_SITE_KEY", "resource_type": "test", "package_name": "dbt_grizzly", "path": "unique_dwh_site_hub_SITE_KEY.sql", "original_file_path": "models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_hub.schema.yml", "unique_id": "test.dbt_grizzly.unique_dwh_site_hub_SITE_KEY.2239e655cc", "fqn": ["dbt_grizzly", "20_silver_db", "site_sch", "01_business_vault", "unique_dwh_site_hub_SITE_KEY"], "alias": "unique_dwh_site_hub_SITE_KEY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1683884073.0599375, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dwh_site_hub"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_site_hub"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_hub.schema.yml\\unique_dwh_site_hub_SITE_KEY.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    SITE_KEY as unique_field,\n    count(*) as n_records\n\nfrom PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_SITE_SCH.dwh_site_hub\nwhere SITE_KEY is not null\ngroup by SITE_KEY\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "SITE_KEY", "file_key_name": "models.dwh_site_hub"}, "test.dbt_grizzly.not_null_dwh_site_hub_SITE_CD.a2963a92f4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SITE_CD", "model": "{{ get_where_subquery(ref('dwh_site_hub')) }}"}, "namespace": null}, "database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_dbt_test__audit", "name": "not_null_dwh_site_hub_SITE_CD", "resource_type": "test", "package_name": "dbt_grizzly", "path": "not_null_dwh_site_hub_SITE_CD.sql", "original_file_path": "models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_hub.schema.yml", "unique_id": "test.dbt_grizzly.not_null_dwh_site_hub_SITE_CD.a2963a92f4", "fqn": ["dbt_grizzly", "20_silver_db", "site_sch", "01_business_vault", "not_null_dwh_site_hub_SITE_CD"], "alias": "not_null_dwh_site_hub_SITE_CD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1683884073.0678442, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [["dwh_site_hub"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_grizzly.dwh_site_hub"]}, "compiled_path": "target\\compiled\\dbt_grizzly\\models\\20_silver_db\\site_sch\\01_business_vault\\dwh_site_hub.schema.yml\\not_null_dwh_site_hub_SITE_CD.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SITE_CD\nfrom PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_SITE_SCH.dwh_site_hub\nwhere SITE_CD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "SITE_CD", "file_key_name": "models.dwh_site_hub"}}, "sources": {"source.dbt_grizzly.ITEM.ITEM_COEFF_MEASURE_UNIT_HUB": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_REF_ITEM_SCH", "name": "ITEM_COEFF_MEASURE_UNIT_HUB", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.ITEM.ITEM_COEFF_MEASURE_UNIT_HUB", "fqn": ["dbt_grizzly", "ITEM", "ITEM_COEFF_MEASURE_UNIT_HUB"], "source_name": "ITEM", "source_description": "", "loader": "", "identifier": "DWH_ITEM_COEFF_MEASURE_UNIT_HUB", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table hub des coefficients des unit\u00e9es de mesures", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_ITEM_SCH.DWH_ITEM_COEFF_MEASURE_UNIT_HUB", "created_at": 1683884073.1346262}, "source.dbt_grizzly.ITEM.ITEM_COEFF_MEASURE_UNIT_SAT": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_REF_ITEM_SCH", "name": "ITEM_COEFF_MEASURE_UNIT_SAT", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.ITEM.ITEM_COEFF_MEASURE_UNIT_SAT", "fqn": ["dbt_grizzly", "ITEM", "ITEM_COEFF_MEASURE_UNIT_SAT"], "source_name": "ITEM", "source_description": "", "loader": "", "identifier": "DWH_ITEM_COEFF_MEASURE_UNIT_SAT", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table sat des coefficients des unit\u00e9es de mesures", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_ITEM_SCH.DWH_ITEM_COEFF_MEASURE_UNIT_SAT", "created_at": 1683884073.1346262}, "source.dbt_grizzly.RAW_JDE.F0005_HUB": {"database": "PRFR_00_DEV_10_BRONZE_DB", "schema": "PRFR_RAW_JDE_RFI_SCH", "name": "F0005_HUB", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.RAW_JDE.F0005_HUB", "fqn": ["dbt_grizzly", "RAW_JDE", "F0005_HUB"], "source_name": "RAW_JDE", "source_description": "", "loader": "", "identifier": "TDWH_JDE_F0005_HUB", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table hub des attributs", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_HUB", "created_at": 1683884073.1346262}, "source.dbt_grizzly.RAW_JDE.F0005_S01": {"database": "PRFR_00_DEV_10_BRONZE_DB", "schema": "PRFR_RAW_JDE_RFI_SCH", "name": "F0005_S01", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.RAW_JDE.F0005_S01", "fqn": ["dbt_grizzly", "RAW_JDE", "F0005_S01"], "source_name": "RAW_JDE", "source_description": "", "loader": "", "identifier": "TDWH_JDE_F0005_S01", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table sat des attributs", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0005_S01", "created_at": 1683884073.1346262}, "source.dbt_grizzly.RAW_JDE.F0006_HUB": {"database": "PRFR_00_DEV_10_BRONZE_DB", "schema": "PRFR_RAW_JDE_RFI_SCH", "name": "F0006_HUB", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.RAW_JDE.F0006_HUB", "fqn": ["dbt_grizzly", "RAW_JDE", "F0006_HUB"], "source_name": "RAW_JDE", "source_description": "", "loader": "", "identifier": "TDWH_JDE_F0006_HUB", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_HUB", "created_at": 1683884073.1346262}, "source.dbt_grizzly.RAW_JDE.F0006_S01": {"database": "PRFR_00_DEV_10_BRONZE_DB", "schema": "PRFR_RAW_JDE_RFI_SCH", "name": "F0006_S01", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.RAW_JDE.F0006_S01", "fqn": ["dbt_grizzly", "RAW_JDE", "F0006_S01"], "source_name": "RAW_JDE", "source_description": "", "loader": "", "identifier": "TDWH_JDE_F0006_S01", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0006_S01", "created_at": 1683884073.1346262}, "source.dbt_grizzly.RAW_JDE.F0101_HUB": {"database": "PRFR_00_DEV_10_BRONZE_DB", "schema": "PRFR_RAW_JDE_RFI_SCH", "name": "F0101_HUB", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.RAW_JDE.F0101_HUB", "fqn": ["dbt_grizzly", "RAW_JDE", "F0101_HUB"], "source_name": "RAW_JDE", "source_description": "", "loader": "", "identifier": "TDWH_JDE_F0101_HUB", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table hub des utilisateurs", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_HUB", "created_at": 1683884073.1346262}, "source.dbt_grizzly.RAW_JDE.F0101_S01": {"database": "PRFR_00_DEV_10_BRONZE_DB", "schema": "PRFR_RAW_JDE_RFI_SCH", "name": "F0101_S01", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.RAW_JDE.F0101_S01", "fqn": ["dbt_grizzly", "RAW_JDE", "F0101_S01"], "source_name": "RAW_JDE", "source_description": "", "loader": "", "identifier": "TDWH_JDE_F0101_S01", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table sat des utilisateurs", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F0101_S01", "created_at": 1683884073.1346262}, "source.dbt_grizzly.RAW_JDE.F3111_HUB": {"database": "PRFR_00_DEV_10_BRONZE_DB", "schema": "PRFR_RAW_JDE_RFI_SCH", "name": "F3111_HUB", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.RAW_JDE.F3111_HUB", "fqn": ["dbt_grizzly", "RAW_JDE", "F3111_HUB"], "source_name": "RAW_JDE", "source_description": "", "loader": "", "identifier": "TDWH_JDE_F3111_HUB", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table hub des articles", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F3111_HUB", "created_at": 1683884073.1346262}, "source.dbt_grizzly.RAW_JDE.F3111_S01": {"database": "PRFR_00_DEV_10_BRONZE_DB", "schema": "PRFR_RAW_JDE_RFI_SCH", "name": "F3111_S01", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.RAW_JDE.F3111_S01", "fqn": ["dbt_grizzly", "RAW_JDE", "F3111_S01"], "source_name": "RAW_JDE", "source_description": "", "loader": "", "identifier": "TDWH_JDE_F3111_S01", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table sat des articles", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F3111_S01", "created_at": 1683884073.1346262}, "source.dbt_grizzly.RAW_JDE.F4101_HUB": {"database": "PRFR_00_DEV_10_BRONZE_DB", "schema": "PRFR_RAW_JDE_RFI_SCH", "name": "F4101_HUB", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.RAW_JDE.F4101_HUB", "fqn": ["dbt_grizzly", "RAW_JDE", "F4101_HUB"], "source_name": "RAW_JDE", "source_description": "", "loader": "", "identifier": "TDWH_JDE_F4101_HUB", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table hub des articles", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_HUB", "created_at": 1683884073.1346262}, "source.dbt_grizzly.RAW_JDE.F4101_S01": {"database": "PRFR_00_DEV_10_BRONZE_DB", "schema": "PRFR_RAW_JDE_RFI_SCH", "name": "F4101_S01", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.RAW_JDE.F4101_S01", "fqn": ["dbt_grizzly", "RAW_JDE", "F4101_S01"], "source_name": "RAW_JDE", "source_description": "", "loader": "", "identifier": "TDWH_JDE_F4101_S01", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table sat des articles", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4101_S01", "created_at": 1683884073.1346262}, "source.dbt_grizzly.RAW_JDE.F4801_HUB": {"database": "PRFR_00_DEV_10_BRONZE_DB", "schema": "PRFR_RAW_JDE_RFI_SCH", "name": "F4801_HUB", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.RAW_JDE.F4801_HUB", "fqn": ["dbt_grizzly", "RAW_JDE", "F4801_HUB"], "source_name": "RAW_JDE", "source_description": "", "loader": "", "identifier": "TDWH_JDE_F4801_HUB", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table hub des articles", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4801_HUB", "created_at": 1683884073.1346262}, "source.dbt_grizzly.RAW_JDE.F4801_S01": {"database": "PRFR_00_DEV_10_BRONZE_DB", "schema": "PRFR_RAW_JDE_RFI_SCH", "name": "F4801_S01", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.RAW_JDE.F4801_S01", "fqn": ["dbt_grizzly", "RAW_JDE", "F4801_S01"], "source_name": "RAW_JDE", "source_description": "", "loader": "", "identifier": "TDWH_JDE_F4801_S01", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table sat des articles", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_JDE_RFI_SCH.TDWH_JDE_F4801_S01", "created_at": 1683884073.1346262}, "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DEB_PERIODE_HUB": {"database": "PRFR_00_DEV_10_BRONZE_DB", "schema": "PRFR_RAW_DSCPPROD_SCH", "name": "E_DD_STOCK_DEB_PERIODE_HUB", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DEB_PERIODE_HUB", "fqn": ["dbt_grizzly", "RAW_NSKEP", "E_DD_STOCK_DEB_PERIODE_HUB"], "source_name": "RAW_NSKEP", "source_description": "", "loader": "", "identifier": "TDWH_E_DD_STOCK_DEB_PERIODE_HUB", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_HUB", "created_at": 1683884073.1346262}, "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DEB_PERIODE_S01": {"database": "PRFR_00_DEV_10_BRONZE_DB", "schema": "PRFR_RAW_DSCPPROD_SCH", "name": "E_DD_STOCK_DEB_PERIODE_S01", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DEB_PERIODE_S01", "fqn": ["dbt_grizzly", "RAW_NSKEP", "E_DD_STOCK_DEB_PERIODE_S01"], "source_name": "RAW_NSKEP", "source_description": "", "loader": "", "identifier": "TDWH_E_DD_STOCK_DEB_PERIODE_S01", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DEB_PERIODE_S01", "created_at": 1683884073.1346262}, "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DISPO_HUB": {"database": "PRFR_00_DEV_10_BRONZE_DB", "schema": "PRFR_RAW_DSCPPROD_SCH", "name": "E_DD_STOCK_DISPO_HUB", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DISPO_HUB", "fqn": ["dbt_grizzly", "RAW_NSKEP", "E_DD_STOCK_DISPO_HUB"], "source_name": "RAW_NSKEP", "source_description": "", "loader": "", "identifier": "TDWH_E_DD_STOCK_DISPO_HUB", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_HUB", "created_at": 1683884073.1346262}, "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DISPO_S01": {"database": "PRFR_00_DEV_10_BRONZE_DB", "schema": "PRFR_RAW_DSCPPROD_SCH", "name": "E_DD_STOCK_DISPO_S01", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DISPO_S01", "fqn": ["dbt_grizzly", "RAW_NSKEP", "E_DD_STOCK_DISPO_S01"], "source_name": "RAW_NSKEP", "source_description": "", "loader": "", "identifier": "TDWH_E_DD_STOCK_DISPO_S01", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_10_BRONZE_DB.PRFR_RAW_DSCPPROD_SCH.TDWH_E_DD_STOCK_DISPO_S01", "created_at": 1683884073.1346262}, "source.dbt_grizzly.PARAMETERS.AD_P_PARAM": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_PARAMETERS_SCH", "name": "AD_P_PARAM", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.PARAMETERS.AD_P_PARAM", "fqn": ["dbt_grizzly", "PARAMETERS", "AD_P_PARAM"], "source_name": "PARAMETERS", "source_description": "", "loader": "", "identifier": "AD_P_PARAM", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table des param\u00e8tres", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.AD_P_PARAM", "created_at": 1683884073.1426373}, "source.dbt_grizzly.PARAMETERS.CALENDAR_HUB": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_PARAMETERS_SCH", "name": "CALENDAR_HUB", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.PARAMETERS.CALENDAR_HUB", "fqn": ["dbt_grizzly", "PARAMETERS", "CALENDAR_HUB"], "source_name": "PARAMETERS", "source_description": "", "loader": "", "identifier": "DWH_CALENDAR_HUB", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table hub du calendrier", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_HUB", "created_at": 1683884073.1426373}, "source.dbt_grizzly.PARAMETERS.CALENDAR_SAT": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_PARAMETERS_SCH", "name": "CALENDAR_SAT", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.PARAMETERS.CALENDAR_SAT", "fqn": ["dbt_grizzly", "PARAMETERS", "CALENDAR_SAT"], "source_name": "PARAMETERS", "source_description": "", "loader": "", "identifier": "DWH_CALENDAR_SAT", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table sat du calendrier", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_PARAMETERS_SCH.DWH_CALENDAR_SAT", "created_at": 1683884073.1426373}, "source.dbt_grizzly.PURCHASE.PURCHASE_ORDER_DETAIL_HUB": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_REF_PURCHASE_SCH", "name": "PURCHASE_ORDER_DETAIL_HUB", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.PURCHASE.PURCHASE_ORDER_DETAIL_HUB", "fqn": ["dbt_grizzly", "PURCHASE", "PURCHASE_ORDER_DETAIL_HUB"], "source_name": "PURCHASE", "source_description": "", "loader": "", "identifier": "DWH_PURCHASE_ORDER_DETAIL_HUB", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table hub du d\u00e9tail des purchase order", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PURCHASE_SCH.DWH_PURCHASE_ORDER_DETAIL_HUB", "created_at": 1683884073.1426373}, "source.dbt_grizzly.PURCHASE.PURCHASE_ORDER_DETAIL_SAT": {"database": "PRFR_00_DEV_20_SILVER_DB", "schema": "PRFR_DWH_REF_PURCHASE_SCH", "name": "PURCHASE_ORDER_DETAIL_SAT", "resource_type": "source", "package_name": "dbt_grizzly", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbt_grizzly.PURCHASE.PURCHASE_ORDER_DETAIL_SAT", "fqn": ["dbt_grizzly", "PURCHASE", "PURCHASE_ORDER_DETAIL_SAT"], "source_name": "PURCHASE", "source_description": "", "loader": "", "identifier": "DWH_PURCHASE_ORDER_DETAIL_SAT", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table sat du d\u00e9tail des purchase order", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PRFR_00_DEV_20_SILVER_DB.PRFR_DWH_REF_PURCHASE_SCH.DWH_PURCHASE_ORDER_DETAIL_SAT", "created_at": 1683884073.1426373}}, "macros": {"macro.dbt_grizzly.create_3NF": {"name": "create_3NF", "resource_type": "macro", "package_name": "dbt_grizzly", "path": "macros\\create_3NF.sql", "original_file_path": "macros\\create_3NF.sql", "unique_id": "macro.dbt_grizzly.create_3NF", "macro_sql": "{% macro create_3NF(src_hub,src_sat,src_pk,src_ldts,src_payload,src_delete_field=none,deleted_value=none) %}\r\n\r\n{%- set src_payload = dbtvault.escape_column_names(src_payload) -%}\r\n{%- if src_delete_field is not none and deleted_value is not none -%}\r\n    {%- set src_payload_init = dbtvault.escape_column_names(src_payload + [src_delete_field]) -%}\r\n{%- else -%}\r\n    {%- set src_payload_init = dbtvault.escape_column_names(src_payload) -%}\r\n{%- endif -%}\r\n\r\nwith source_data_init as (\r\n    select distinct {{ dbtvault.alias_all(src_payload_init, 'sat') }}\r\n    from {{ src_hub }} hub\r\n    inner join {{ src_sat }} sat on hub.{{ src_pk }} = sat.{{ src_pk }}\r\n    qualify row_number() over (partition by sat.{{ src_pk }} order by sat.{{ src_ldts }} desc) = 1\r\n)\r\nselect {{ dbtvault.alias_all(src_payload) }}\r\nfrom source_data_init\r\n{% if src_delete_field is not none and deleted_value is not none -%}\r\n    where {{ src_delete_field }} <> {{ deleted_value }}\r\n{% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.escape_column_names", "macro.dbtvault.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.1692019, "supported_languages": null}, "macro.dbt_grizzly.cte_table_generator": {"name": "cte_table_generator", "resource_type": "macro", "package_name": "dbt_grizzly", "path": "macros\\cte_table_generator.sql", "original_file_path": "macros\\cte_table_generator.sql", "unique_id": "macro.dbt_grizzly.cte_table_generator", "macro_sql": "{% macro cte_table_generator(table, source_name='RAW_JDE') %}\r\n{{table}} AS (\r\n  SELECT \r\n    {{table}}_HUB.{{ dbt_utils.star(source(source_name, table + '_HUB'), except=['RUNNO_INSERT','RUNNO_UPDATE']) | replace(\"\\n \", \"\") }},\r\n    {{table}}_S01.{{ dbt_utils.star(source(source_name, table + '_S01'), except=['RUNNO_INSERT','RUNNO_UPDATE','ID']) | replace(\"\\n \", \"\") }}\r\n  FROM \r\n    {{source(source_name,table + '_HUB')}} {{table}}_HUB \r\n    INNER JOIN {{source(source_name,table + '_S01')}} {{table}}_S01 ON {{table}}_HUB.ID = {{table}}_S01.ID\r\n    where {{table}}_HUB.ID <> 0\r\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{table}}_S01.ID ORDER BY {{table}}_S01.FD DESC) = 1 \r\n)\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.1692019, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from(\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.193204, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.193204, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.193204, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.201124, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.201124, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.201124, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.201124, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.201124, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.201124, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.201124, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.201124, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.201124, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2092023, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2092023, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2092023, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2092023, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2092023, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2092023, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2092023, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2092023, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2171237, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2171237, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2171237, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2171237, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2251294, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2331228, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2331228, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2331228, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2331228, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2331228, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2411244, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2411244, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2411244, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2491198, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    df.write.mode(\"overwrite\").save_as_table(\"{{ target_relation }}\", create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2491198, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2491198, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2491198, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2491198, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2491198, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2491198, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2572038, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2572038, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2572038, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2572038, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2572038, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2572038, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2572038, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2572038, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2572038, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2572038, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2572038, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2572038, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2651968, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2651968, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2651968, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2651968, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2651968, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2651968, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2651968, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2651968, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2651968, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2651968, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2651968, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2732, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2732, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2732, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2732, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2732, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2732, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.281204, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.281204, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.281204, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.281204, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.281204, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.281204, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.281204, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.281204, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2892091, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2892091, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2892091, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2892091, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2892091, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2892091, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2892091, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2892091, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2892091, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2892091, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2892091, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2972019, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2972019, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2972019, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2972019, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2972019, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2972019, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2972019, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.2972019, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3052013, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3052013, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3052013, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3052013, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3052013, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3052013, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3052013, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3052013, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3052013, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3052013, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3052013, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.313202, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.313202, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.313202, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.313202, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.313202, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.313202, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.313202, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.313202, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.313202, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.313202, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.313202, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.313202, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.313202, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.313202, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3212068, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3212068, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3212068, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3212068, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3212068, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3212068, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3291974, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3291974, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3291974, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3291974, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3291974, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3372073, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3372073, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3372073, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3372073, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3372073, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3372073, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3372073, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3372073, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3372073, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3372073, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3372073, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3451986, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3451986, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3451986, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3451986, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3451986, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3451986, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3451986, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3451986, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.353206, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.353206, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.353206, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.353206, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.353206, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3693461, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3693461, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3775775, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3775775, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3775775, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3854837, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.388086, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.388086, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.3959994, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4012117, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4012117, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4012117, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4012117, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4012117, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.409313, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.409313, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.409313, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.409313, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.409313, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.409313, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.409313, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.409313, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.409313, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.409313, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.409313, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.409313, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.409313, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4177687, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4258704, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4258704, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4258704, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4258704, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4283428, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4283428, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4283428, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4283428, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4362657, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.444484, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.444484, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.444484, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.444484, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.444484, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.444484, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.444484, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.444484, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.444484, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.444484, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.444484, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.452407, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.454973, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4628913, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4628913, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4628913, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4628913, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.468003, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.468003, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.468003, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.468003, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.468003, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.468003, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.468003, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4839895, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4860816, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4860816, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4860816, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4942327, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4942327, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4942327, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4942327, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4942327, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.4942327, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5022337, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5022337, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5022337, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5022337, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5102327, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5102327, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5102327, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5102327, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5102327, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5181627, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5181627, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5181627, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5181627, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5181627, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5181627, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5181627, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5181627, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5181627, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5181627, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5181627, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5181627, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5181627, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5181627, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5262268, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5262268, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.534179, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.534179, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.534179, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.534179, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.534179, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.534179, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5424535, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5424535, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5424535, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5424535, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5424535, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5424535, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5424535, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5424535, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5424535, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5424535, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5424535, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5424535, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5424535, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5424535, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5508323, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5508323, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5508323, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5508323, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5508323, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5508323, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5508323, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5508323, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5508323, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5508323, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5508323, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5508323, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5508323, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5508323, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5508323, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5597508, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5604193, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5606632, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5606632, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5606632, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5606632, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5606632, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5606632, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5606632, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5606632, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5606632, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5606632, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5682201, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5694213, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5694213, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5694213, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5694213, "supported_languages": null}, "macro.dbtvault.is_list": {"name": "is_list", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\helpers\\is_checks.sql", "original_file_path": "macros\\internal\\helpers\\is_checks.sql", "unique_id": "macro.dbtvault.is_list", "macro_sql": "{%- macro is_list(obj, empty_is_false=false) -%}\r\n\r\n    {%- if obj is iterable and obj is not string and obj is not mapping -%}\r\n        {%- if obj is none and obj is undefined and not obj and empty_is_false -%}\r\n            {%- do return(false) -%}\r\n        {%- endif -%}\r\n\r\n        {%- do return(true) -%}\r\n    {%- else -%}\r\n        {%- do return(false) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5776498, "supported_languages": null}, "macro.dbtvault.is_nothing": {"name": "is_nothing", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\helpers\\is_checks.sql", "original_file_path": "macros\\internal\\helpers\\is_checks.sql", "unique_id": "macro.dbtvault.is_nothing", "macro_sql": "{%- macro is_nothing(obj) -%}\r\n\r\n    {%- if obj is none or obj is undefined or not obj or dbtvault.is_list(obj, empty_is_false=true) -%}\r\n        {%- do return(true) -%}\r\n    {%- else -%}\r\n        {%- do return(false) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5776498, "supported_languages": null}, "macro.dbtvault.is_something": {"name": "is_something", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\helpers\\is_checks.sql", "original_file_path": "macros\\internal\\helpers\\is_checks.sql", "unique_id": "macro.dbtvault.is_something", "macro_sql": "{%- macro is_something(obj) -%}\r\n\r\n    {%- if obj is not none and obj is defined and obj -%}\r\n        {#- if an empty list, do not consider the object something -#}\r\n        {% if dbtvault.is_list(empty_is_false=true) %}\r\n            {%- do return(true) -%}\r\n        {%- else -%}\r\n            {%- do return(false) -%}\r\n        {%- endif -%}\r\n    {%- else -%}\r\n        {%- do return(false) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5776498, "supported_languages": null}, "macro.dbtvault.is_expression": {"name": "is_expression", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\helpers\\is_checks.sql", "original_file_path": "macros\\internal\\helpers\\is_checks.sql", "unique_id": "macro.dbtvault.is_expression", "macro_sql": "{%- macro is_expression(obj) -%}\r\n\r\n    {%- if obj is string -%}\r\n        {%- if (obj | first == \"'\" and obj | last == \"'\") or (\"(\" in obj and \")\" in obj) or \"::\" in obj -%}\r\n            {%- do return(true) -%}\r\n        {%- else -%}\r\n            {%- do return(false) -%}\r\n        {%- endif -%}\r\n    {%- else -%}\r\n        {%- do return(false) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5776498, "supported_languages": null}, "macro.dbtvault.log_relation_sources": {"name": "log_relation_sources", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\helpers\\logging.sql", "original_file_path": "macros\\internal\\helpers\\logging.sql", "unique_id": "macro.dbtvault.log_relation_sources", "macro_sql": "{% macro log_relation_sources(relation, source_count) %}\r\n    {{ return(adapter.dispatch('log_relation_sources', 'dbtvault')(relation=relation, source_count=source_count)) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.default__log_relation_sources"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5857384, "supported_languages": null}, "macro.dbtvault.default__log_relation_sources": {"name": "default__log_relation_sources", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\helpers\\logging.sql", "original_file_path": "macros\\internal\\helpers\\logging.sql", "unique_id": "macro.dbtvault.default__log_relation_sources", "macro_sql": "{% macro default__log_relation_sources(relation, source_count) %}\r\n\r\n    {%- if execute -%}\r\n\r\n        {%- do dbt_utils.log_info('Loading {} from {} source(s)'.format(\"{}.{}.{}\".format(relation.database, relation.schema, relation.identifier),\r\n                                                                        source_count)) -%}\r\n    {%- endif -%}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5857384, "supported_languages": null}, "macro.dbtvault.databricks__log_relation_sources": {"name": "databricks__log_relation_sources", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\helpers\\logging.sql", "original_file_path": "macros\\internal\\helpers\\logging.sql", "unique_id": "macro.dbtvault.databricks__log_relation_sources", "macro_sql": "{% macro databricks__log_relation_sources(relation, source_count) %}\r\n\r\n    {%- if execute -%}\r\n\r\n        {%- do dbt_utils.log_info('Loading {} from {} source(s)'.format(\"{}.{}\".format(relation.schema, relation.identifier),\r\n                                                                        source_count)) -%}\r\n    {%- endif -%}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5857384, "supported_languages": null}, "macro.dbtvault.prepend_generated_by": {"name": "prepend_generated_by", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\helpers\\prepend_generated_by.sql", "original_file_path": "macros\\internal\\helpers\\prepend_generated_by.sql", "unique_id": "macro.dbtvault.prepend_generated_by", "macro_sql": "{%- macro prepend_generated_by() -%}\r\n-- Generated by dbtvault.\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5857384, "supported_languages": null}, "macro.dbtvault.process_columns_to_select": {"name": "process_columns_to_select", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\helpers\\stage_processing_macros.sql", "original_file_path": "macros\\internal\\helpers\\stage_processing_macros.sql", "unique_id": "macro.dbtvault.process_columns_to_select", "macro_sql": "{%- macro process_columns_to_select(columns_list=none, exclude_columns_list=none) -%}\r\n\r\n    {% set columns_list = columns_list | map('upper') | list %}\r\n    {% set exclude_columns_list = exclude_columns_list | map('upper') | list %}\r\n\r\n    {% set columns_to_select = [] %}\r\n\r\n    {% if not dbtvault.is_list(columns_list) or not dbtvault.is_list(exclude_columns_list)  %}\r\n\r\n        {{- exceptions.raise_compiler_error(\"One or both arguments are not of list type.\") -}}\r\n\r\n    {%- endif -%}\r\n\r\n    {%- if dbtvault.is_something(columns_list) and dbtvault.is_something(exclude_columns_list) -%}\r\n\r\n        {%- for col in columns_list -%}\r\n\r\n            {%- if col not in exclude_columns_list -%}\r\n                {%- do columns_to_select.append(col) -%}\r\n            {%- endif -%}\r\n\r\n        {%- endfor -%}\r\n\r\n    {%- endif -%}\r\n\r\n    {%- do return(columns_to_select) -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.5936482, "supported_languages": null}, "macro.dbtvault.extract_column_names": {"name": "extract_column_names", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\helpers\\stage_processing_macros.sql", "original_file_path": "macros\\internal\\helpers\\stage_processing_macros.sql", "unique_id": "macro.dbtvault.extract_column_names", "macro_sql": "{%- macro extract_column_names(columns_dict=none) -%}\r\n\r\n    {%- set extracted_column_names = [] -%}\r\n\r\n    {%- if columns_dict is mapping -%}\r\n        {%- for key, value in columns_dict.items() -%}\r\n            {%- do extracted_column_names.append(key) -%}\r\n        {%- endfor -%}\r\n\r\n        {%- do return(extracted_column_names) -%}\r\n    {%- else -%}\r\n        {%- do return([]) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6017272, "supported_languages": null}, "macro.dbtvault.process_hash_column_excludes": {"name": "process_hash_column_excludes", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\helpers\\stage_processing_macros.sql", "original_file_path": "macros\\internal\\helpers\\stage_processing_macros.sql", "unique_id": "macro.dbtvault.process_hash_column_excludes", "macro_sql": "{%- macro process_hash_column_excludes(hash_columns=none, source_columns=none) -%}\r\n\r\n    {%- set processed_hash_columns = {} -%}\r\n\r\n    {%- for col, col_mapping in hash_columns.items() -%}\r\n        \r\n        {%- if col_mapping is mapping -%}\r\n            {%- if col_mapping.exclude_columns -%}\r\n\r\n                {%- if col_mapping.columns -%}\r\n\r\n                    {%- set columns_to_hash = dbtvault.process_columns_to_select(source_columns, col_mapping.columns) -%}\r\n\r\n                    {%- do hash_columns[col].pop('exclude_columns') -%}\r\n                    {%- do hash_columns[col].update({'columns': columns_to_hash}) -%}\r\n\r\n                    {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}\r\n                {%- else -%}\r\n\r\n                    {%- do hash_columns[col].pop('exclude_columns') -%}\r\n                    {%- do hash_columns[col].update({'columns': source_columns}) -%}\r\n\r\n                    {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}\r\n                {%- endif -%}\r\n            {%- else -%}\r\n                {%- do processed_hash_columns.update({col: col_mapping}) -%}\r\n            {%- endif -%}\r\n        {%- else -%}\r\n            {%- do processed_hash_columns.update({col: col_mapping}) -%}\r\n        {%- endif -%}\r\n\r\n    {%- endfor -%}\r\n\r\n    {%- do return(processed_hash_columns) -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.process_columns_to_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6017272, "supported_languages": null}, "macro.dbtvault.print_list": {"name": "print_list", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\helpers\\stage_processing_macros.sql", "original_file_path": "macros\\internal\\helpers\\stage_processing_macros.sql", "unique_id": "macro.dbtvault.print_list", "macro_sql": "{%- macro print_list(list_to_print=none, indent=4) -%}\r\n\r\n    {%- for col_name in list_to_print -%}\r\n        {{- col_name | indent(indent) -}}{{ \",\\n    \" if not loop.last }}\r\n    {%- endfor -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6017272, "supported_languages": null}, "macro.dbtvault.extract_null_column_names": {"name": "extract_null_column_names", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\helpers\\stage_processing_macros.sql", "original_file_path": "macros\\internal\\helpers\\stage_processing_macros.sql", "unique_id": "macro.dbtvault.extract_null_column_names", "macro_sql": "{%- macro extract_null_column_names(columns_dict=none) -%}\r\n\r\n    {%- set extracted_column_names = [] -%}\r\n\r\n    {%- if columns_dict is mapping -%}\r\n        {%- for key, value in columns_dict.items() -%}\r\n            {%- if dbtvault.is_something(value) -%}\r\n                {% if dbtvault.is_list(value) %}\r\n                    {% for col_name in value %}\r\n                        {%- do extracted_column_names.append(col_name) -%}\r\n                        {%- do extracted_column_names.append(col_name ~ \"_ORIGINAL\") -%}\r\n                    {% endfor %}\r\n                {%  else %}\r\n                    {%- do extracted_column_names.append(value) -%}\r\n                    {%- do extracted_column_names.append(value ~ \"_ORIGINAL\") -%}\r\n                {% endif %}\r\n            {%- endif -%}\r\n        {%- endfor -%}\r\n\r\n        {%- do return(extracted_column_names) -%}\r\n    {%- else -%}\r\n        {%- do return([]) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.is_something", "macro.dbtvault.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6017272, "supported_languages": null}, "macro.dbtvault.alias": {"name": "alias", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\alias.sql", "original_file_path": "macros\\internal\\metadata_processing\\alias.sql", "unique_id": "macro.dbtvault.alias", "macro_sql": "{%- macro alias(alias_config=none, prefix=none) -%}\r\n\r\n    {{- adapter.dispatch('alias', 'dbtvault')(alias_config=alias_config, prefix=prefix) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__alias"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6097183, "supported_languages": null}, "macro.dbtvault.default__alias": {"name": "default__alias", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\alias.sql", "original_file_path": "macros\\internal\\metadata_processing\\alias.sql", "unique_id": "macro.dbtvault.default__alias", "macro_sql": "\r\n\r\n{%- macro default__alias(alias_config=none, prefix=none) -%}\r\n\r\n{%- if alias_config is defined and alias_config is not none and alias_config -%}\r\n\r\n    {%- if alias_config is mapping -%}\r\n\r\n        {%- if alias_config['source_column'] and alias_config['alias'] -%}\r\n\r\n            {%- if prefix -%}\r\n                {{prefix}}.{{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\r\n            {%- else -%}\r\n                {{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\r\n            {%- endif -%}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- else -%}\r\n\r\n        {%- if prefix -%}\r\n\r\n        {{- dbtvault.prefix([alias_config], prefix) -}}\r\n\r\n        {%- else -%}\r\n\r\n        {{ alias_config }}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- endif -%}\r\n\r\n{%- else -%}\r\n\r\n    {%- if execute -%}\r\n\r\n        {{ exceptions.raise_compiler_error(\"Invalid alias configuration:\\nexpected format: {source_column: 'column', alias: 'column_alias'}\\ngot: \" ~ alias_config) }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6097183, "supported_languages": null}, "macro.dbtvault.alias_all": {"name": "alias_all", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\alias_all.sql", "original_file_path": "macros\\internal\\metadata_processing\\alias_all.sql", "unique_id": "macro.dbtvault.alias_all", "macro_sql": "{%- macro alias_all(columns=none, prefix=none) -%}\r\n\r\n    {{- adapter.dispatch('alias_all', 'dbtvault')(columns=columns, prefix=prefix) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6097183, "supported_languages": null}, "macro.dbtvault.default__alias_all": {"name": "default__alias_all", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\alias_all.sql", "original_file_path": "macros\\internal\\metadata_processing\\alias_all.sql", "unique_id": "macro.dbtvault.default__alias_all", "macro_sql": "\r\n\r\n{%- macro default__alias_all(columns, prefix) -%}\r\n\r\n{%- if dbtvault.is_list(columns) -%}\r\n\r\n    {%- for column in columns -%}\r\n        {{ dbtvault.alias(alias_config=column, prefix=prefix) }}\r\n        {%- if not loop.last -%} , {% endif -%}\r\n    {%- endfor -%}\r\n\r\n{%- elif columns is string -%}\r\n\r\n{{ dbtvault.alias(alias_config=columns, prefix=prefix) }}\r\n\r\n{%- else -%}\r\n\r\n    {%- if execute -%}\r\n        {{ exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list or a string.\") }}\r\n    {%- endif %}\r\n\r\n{%- endif %}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.alias"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6097183, "supported_languages": null}, "macro.dbtvault.as_constant": {"name": "as_constant", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\as_constant.sql", "original_file_path": "macros\\internal\\metadata_processing\\as_constant.sql", "unique_id": "macro.dbtvault.as_constant", "macro_sql": "{%- macro as_constant(column_str=none) -%}\r\n\r\n    {{- adapter.dispatch('as_constant', 'dbtvault')(column_str=column_str) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6097183, "supported_languages": null}, "macro.dbtvault.default__as_constant": {"name": "default__as_constant", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\as_constant.sql", "original_file_path": "macros\\internal\\metadata_processing\\as_constant.sql", "unique_id": "macro.dbtvault.default__as_constant", "macro_sql": "\r\n\r\n{%- macro default__as_constant(column_str) -%}\r\n\r\n    {%- if column_str is not none and column_str is string and column_str -%}\r\n\r\n        {%- if column_str | first == \"!\" -%}\r\n        \r\n            {{- return(\"'\" ~ column_str[1:] ~ \"'\") -}}\r\n        \r\n        {%- else -%}\r\n        \r\n            {{- return(column_str) -}}\r\n\r\n        {%- endif -%}\r\n    {%- else -%}\r\n        {%- if execute -%}\r\n            {{ exceptions.raise_compiler_error(\"Invalid columns_str object provided. Must be a string and not null.\") }}\r\n        {%- endif %}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6097183, "supported_languages": null}, "macro.dbtvault.check_required_parameters": {"name": "check_required_parameters", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\check_required_parameters.sql", "original_file_path": "macros\\internal\\metadata_processing\\check_required_parameters.sql", "unique_id": "macro.dbtvault.check_required_parameters", "macro_sql": "{%- macro check_required_parameters() -%}\r\n\r\n    {%- set ns = namespace(missing_parameters=[]) -%}\r\n\r\n    {%- if kwargs is not none -%}\r\n\r\n        {%- for k, v in kwargs.items() %}\r\n            {%- do ns.missing_parameters.append(k) if v is none -%}\r\n        {%- endfor -%}\r\n\r\n        {%- if ns.missing_parameters -%}\r\n            {{- exceptions.raise_compiler_error(\"Required parameter(s) missing or none in '{}': {}\".format(this, ns.missing_parameters | join(\", \"))) -}}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.617723, "supported_languages": null}, "macro.dbtvault.concat_ws": {"name": "concat_ws", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\concat_ws.sql", "original_file_path": "macros\\internal\\metadata_processing\\concat_ws.sql", "unique_id": "macro.dbtvault.concat_ws", "macro_sql": "{%- macro concat_ws(string_list, separator=\"||\") -%}\r\n\r\n    {{- adapter.dispatch('concat_ws', 'dbtvault')(string_list=string_list, separator=separator) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.617723, "supported_languages": null}, "macro.dbtvault.default__concat_ws": {"name": "default__concat_ws", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\concat_ws.sql", "original_file_path": "macros\\internal\\metadata_processing\\concat_ws.sql", "unique_id": "macro.dbtvault.default__concat_ws", "macro_sql": "\r\n\r\n{%- macro default__concat_ws(string_list, separator=\"||\") -%}\r\n\r\n    CONCAT_WS('{{ separator }}', {{ string_list | join(\", \") }})\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.617723, "supported_languages": null}, "macro.dbtvault.bigquery__concat_ws": {"name": "bigquery__concat_ws", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\concat_ws.sql", "original_file_path": "macros\\internal\\metadata_processing\\concat_ws.sql", "unique_id": "macro.dbtvault.bigquery__concat_ws", "macro_sql": "{%- macro bigquery__concat_ws(string_list, separator=\"||\") -%}\r\n\r\n    {{- 'CONCAT(' -}}\r\n    {%- for str in string_list -%}\r\n        {{- \"{}\".format(str) -}}\r\n        {{- \",'{}',\".format(separator) if not loop.last -}}\r\n    {%- endfor -%}\r\n    {{- '\\n)' -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.617723, "supported_languages": null}, "macro.dbtvault.sqlserver__concat_ws": {"name": "sqlserver__concat_ws", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\concat_ws.sql", "original_file_path": "macros\\internal\\metadata_processing\\concat_ws.sql", "unique_id": "macro.dbtvault.sqlserver__concat_ws", "macro_sql": "{%- macro sqlserver__concat_ws(string_list, separator=\"||\") -%}\r\n\r\n{{ dbtvault.default__concat_ws(string_list=string_list, separator=separator) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.617723, "supported_languages": null}, "macro.dbtvault.escape_column_names": {"name": "escape_column_names", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "unique_id": "macro.dbtvault.escape_column_names", "macro_sql": "{%- macro escape_column_names(columns=none) -%}\r\n\r\n    {%- if dbtvault.is_list(columns) -%}\r\n        {%- set columns = dbtvault.expand_column_list(columns) -%}\r\n    {%- endif -%}\r\n\r\n    {%- if dbtvault.is_something(columns) -%}\r\n\r\n        {%- set col_string = '' -%}\r\n        {%- set col_list = [] -%}\r\n        {%- set col_mapping = {} -%}\r\n\r\n        {%- if columns is string -%}\r\n\r\n            {%- set col_string = dbtvault.escape_column_name(columns) -%}\r\n\r\n        {%- elif dbtvault.is_list(columns) -%}\r\n\r\n            {%- for col in columns -%}\r\n\r\n                {%- if col is string -%}\r\n\r\n                    {%- set escaped_col = dbtvault.escape_column_name(col) -%}\r\n\r\n                    {%- do col_list.append(escaped_col) -%}\r\n\r\n                {%- else -%}\r\n\r\n                    {%- if execute -%}\r\n                        {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string.\") -}}\r\n                    {%- endif -%}\r\n\r\n                {%- endif -%}\r\n\r\n            {%- endfor -%}\r\n\r\n        {%- elif columns is mapping -%}\r\n\r\n            {%- if columns['source_column'] and columns['alias'] -%}\r\n\r\n                {%- set escaped_source_col = dbtvault.escape_column_name(columns['source_column']) -%}\r\n                {%- set escaped_alias_col = dbtvault.escape_column_name(columns['alias']) -%}\r\n                {%- set col_mapping = {\"source_column\": escaped_source_col, \"alias\": escaped_alias_col} -%}\r\n\r\n            {%- else -%}\r\n\r\n                {%- if execute -%}\r\n                    {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.\") -}}\r\n                {%- endif %}\r\n\r\n            {%- endif -%}\r\n\r\n        {%- else -%}\r\n\r\n            {%- if execute -%}\r\n                {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.\") -}}\r\n            {%- endif %}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- elif columns == '' -%}\r\n\r\n        {%- if execute -%}\r\n            {{- exceptions.raise_compiler_error(\"Expected a column name or a list of column names, got an empty string\") -}}\r\n        {%- endif -%}\r\n\r\n    {%- endif -%}\r\n\r\n    {%- if columns is none -%}\r\n\r\n        {%- do return(none) -%}\r\n\r\n    {%- elif columns == [] -%}\r\n\r\n        {%- do return([]) -%}\r\n\r\n    {%- elif columns == {} -%}\r\n\r\n        {%- do return({}) -%}\r\n\r\n    {%- elif columns is string -%}\r\n\r\n        {%- do return(col_string) -%}\r\n\r\n    {%- elif dbtvault.is_list(columns) -%}\r\n\r\n        {%- do return(col_list) -%}\r\n\r\n    {%- elif columns is mapping -%}\r\n\r\n        {%- do return(col_mapping) -%}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.expand_column_list", "macro.dbtvault.is_something", "macro.dbtvault.escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6257288, "supported_languages": null}, "macro.dbtvault.escape_column_name": {"name": "escape_column_name", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "unique_id": "macro.dbtvault.escape_column_name", "macro_sql": "{%- macro escape_column_name(column) -%}\r\n\r\n    {{- adapter.dispatch('escape_column_name', 'dbtvault')(column=column) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6257288, "supported_languages": null}, "macro.dbtvault.default__escape_column_name": {"name": "default__escape_column_name", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "unique_id": "macro.dbtvault.default__escape_column_name", "macro_sql": "\r\n\r\n{%- macro default__escape_column_name(column) -%}\r\n\r\n    {# Do not escape a constant (single quoted) value #}\r\n    {%- if column | first == \"'\" and column | last == \"'\" -%}\r\n        {%- set escaped_column_name = column -%}\r\n    {%- else -%}\r\n        {%- set escape_char_default_left, escape_char_default_right = dbtvault.get_escape_characters() -%}\r\n        {%- set escape_char_left  = var('escape_char_left',  escape_char_default_left) -%}\r\n        {%- set escape_char_right = var('escape_char_right', escape_char_default_right) -%}\r\n\r\n        {%- set escaped_column_name = escape_char_left ~ column | replace(escape_char_left, '') | replace(escape_char_right, '') | trim ~ escape_char_right -%}\r\n    {%- endif -%}\r\n\r\n    {%- do return(escaped_column_name) -%}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.get_escape_characters"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6257288, "supported_languages": null}, "macro.dbtvault.get_escape_characters": {"name": "get_escape_characters", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "unique_id": "macro.dbtvault.get_escape_characters", "macro_sql": "{% macro get_escape_characters() -%}\r\n\r\n    {% do return(adapter.dispatch('get_escape_characters', 'dbtvault')()) -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.snowflake__get_escape_characters"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6341796, "supported_languages": null}, "macro.dbtvault.snowflake__get_escape_characters": {"name": "snowflake__get_escape_characters", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "unique_id": "macro.dbtvault.snowflake__get_escape_characters", "macro_sql": "\r\n\r\n{%- macro snowflake__get_escape_characters() %}\r\n    {%- do return (('\"', '\"')) -%}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6341796, "supported_languages": null}, "macro.dbtvault.bigquery__get_escape_characters": {"name": "bigquery__get_escape_characters", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "unique_id": "macro.dbtvault.bigquery__get_escape_characters", "macro_sql": "\r\n\r\n{%- macro bigquery__get_escape_characters() %}\r\n    {%- do return (('`', '`')) -%}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6341796, "supported_languages": null}, "macro.dbtvault.sqlserver__get_escape_characters": {"name": "sqlserver__get_escape_characters", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "unique_id": "macro.dbtvault.sqlserver__get_escape_characters", "macro_sql": "\r\n\r\n{%- macro sqlserver__get_escape_characters() %}\r\n    {%- do return (('\"', '\"')) -%}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6341796, "supported_languages": null}, "macro.dbtvault.databricks__get_escape_characters": {"name": "databricks__get_escape_characters", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "unique_id": "macro.dbtvault.databricks__get_escape_characters", "macro_sql": "\r\n\r\n{%- macro databricks__get_escape_characters() %}\r\n    {%- do return (('`', '`')) -%}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6341796, "supported_languages": null}, "macro.dbtvault.postgres__get_escape_characters": {"name": "postgres__get_escape_characters", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "unique_id": "macro.dbtvault.postgres__get_escape_characters", "macro_sql": "\r\n\r\n{%- macro postgres__get_escape_characters() %}\r\n    {#- DO NOT QUOTE FOR NOW. Postgres has a \"feature\" which froces explicit casing and breaks the SQL-92 standard -#}\r\n    {%- do return (('', '')) -%}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6341796, "supported_languages": null}, "macro.dbtvault.expand_column_list": {"name": "expand_column_list", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\expand_column_list.sql", "original_file_path": "macros\\internal\\metadata_processing\\expand_column_list.sql", "unique_id": "macro.dbtvault.expand_column_list", "macro_sql": "{%- macro expand_column_list(columns=none) -%}\r\n\r\n{%- if not columns -%}\r\n    {%- do return([]) -%}\r\n{%- endif -%}\r\n\r\n{%- set col_list = [] -%}\r\n\r\n{%- if dbtvault.is_list(columns) -%}\r\n\r\n    {%- set columns = columns | reject(\"none\") %}\r\n\r\n    {%- for col in columns -%}\r\n\r\n        {%- if col is string -%}\r\n\r\n            {%- do col_list.append(col) -%}\r\n\r\n        {#- If list of lists -#}\r\n        {%- elif dbtvault.is_list(col) -%}\r\n\r\n            {%- for cols in col -%}\r\n\r\n                {%- do col_list.append(cols) -%}\r\n\r\n            {%- endfor -%}\r\n        {%- elif col is mapping -%}\r\n\r\n            {%- do col_list.append(col) -%}\r\n\r\n        {%- else -%}\r\n\r\n            {%- if execute -%}\r\n                {{- exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list of lists, dictionaries or strings.\") -}}\r\n            {%- endif %}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- endfor -%}\r\n{%- else -%}\r\n\r\n    {%- if execute -%}\r\n        {{- exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list.\") -}}\r\n    {%- endif %}\r\n\r\n{%- endif -%}\r\n\r\n{%- do return(col_list) -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6341796, "supported_languages": null}, "macro.dbtvault.multikey": {"name": "multikey", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\multikey.sql", "original_file_path": "macros\\internal\\metadata_processing\\multikey.sql", "unique_id": "macro.dbtvault.multikey", "macro_sql": "{%- macro multikey(columns, prefix=none, condition=none, operator='AND') -%}\r\n\r\n    {{- adapter.dispatch('multikey', 'dbtvault')(columns=columns, prefix=prefix, condition=condition, operator=operator) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6341796, "supported_languages": null}, "macro.dbtvault.default__multikey": {"name": "default__multikey", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\multikey.sql", "original_file_path": "macros\\internal\\metadata_processing\\multikey.sql", "unique_id": "macro.dbtvault.default__multikey", "macro_sql": "\r\n\r\n{%- macro default__multikey(columns, prefix=none, condition=none, operator='AND') -%}\r\n\r\n    {%- if prefix is string -%}\r\n        {%- set prefix = [prefix] -%}\r\n    {%- endif -%}\r\n\r\n    {%- if columns is string -%}\r\n        {%- set columns = [columns] -%}\r\n    {%- endif -%}\r\n\r\n    {%- if condition in ['<>', '!=', '='] -%}\r\n        {%- for col in columns -%}\r\n            {%- if prefix -%}\r\n                {{- dbtvault.prefix([col], prefix[0], alias_target='target') }} {{ condition }} {{ dbtvault.prefix([col], prefix[1]) -}}\r\n            {%- endif %}\r\n            {%- if not loop.last %} {{ operator }} {% endif -%}\r\n        {% endfor -%}\r\n    {%- else -%}\r\n        {%- if dbtvault.is_list(columns) -%}\r\n            {%- for col in columns -%}\r\n                {{ (prefix[0] ~ '.') if prefix }}{{ col }} {{ condition if condition else '' }}\r\n                {%- if not loop.last -%} {{ \"\\n    \" ~ operator }} {% endif -%}\r\n            {%- endfor -%}\r\n        {%- else -%}\r\n            {{ prefix[0] ~ '.' if prefix }}{{ columns }} {{ condition if condition else '' }}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.prefix", "macro.dbtvault.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6423042, "supported_languages": null}, "macro.dbtvault.process_payload_column_excludes": {"name": "process_payload_column_excludes", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\internal\\metadata_processing\\process_payload_column_excludes.sql", "original_file_path": "macros\\internal\\metadata_processing\\process_payload_column_excludes.sql", "unique_id": "macro.dbtvault.process_payload_column_excludes", "macro_sql": "{%- macro process_payload_column_excludes(src_pk, src_hashdiff, src_payload, src_extra_columns,\r\n                                          src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {%- if src_payload is not mapping -%}\r\n        {%- do return(src_payload) -%}\r\n    {%- endif -%}\r\n\r\n    {%- set source_model_cols = adapter.get_columns_in_relation(ref(source_model)) -%}\r\n    {%- set columns_in_metadata = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff,\r\n                                                                       src_payload, src_extra_columns,\r\n                                                                       src_eff, src_ldts, src_source]) | map('lower') | list -%}\r\n\r\n    {%- set payload_cols = [] -%}\r\n    {%- for col in source_model_cols -%}\r\n        {%- if col.column | lower not in columns_in_metadata -%}\r\n            {%- do payload_cols.append(col.column) -%}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n\r\n    {%- if 'exclude_columns' in src_payload.keys() -%}\r\n        {%- set table_excludes_columns = src_payload.exclude_columns -%}\r\n\r\n        {%- if table_excludes_columns -%}\r\n\r\n            {%- set excluded_payload = [] -%}\r\n            {%- set exclude_columns_list = src_payload.columns | map('lower') | list -%}\r\n\r\n            {%- for col in payload_cols -%}\r\n               {%- if col | lower not in exclude_columns_list -%}\r\n                   {%- do excluded_payload.append(col) -%}\r\n               {%- endif -%}\r\n            {%- endfor -%}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n    {%- do return(excluded_payload) -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6423042, "supported_languages": null}, "macro.dbtvault.drop_temporary_special": {"name": "drop_temporary_special", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\drop_temporary.sql", "original_file_path": "macros\\materialisations\\drop_temporary.sql", "unique_id": "macro.dbtvault.drop_temporary_special", "macro_sql": "{% macro drop_temporary_special(tmp_relation) %}\r\n    {# In databricks and sqlserver a temporary view/table can only be dropped by #}\r\n    {# the connection or session that created it so drop it now before the commit below closes this session #}\r\n\r\n    {%- set drop_query_name = 'DROP_QUERY-' ~ i -%}\r\n    {% call statement(drop_query_name, fetch_result=True) -%}\r\n        {% if target.type == 'databricks' %}\r\n            DROP VIEW {{ tmp_relation }};\r\n        {% elif target.type == 'sqlserver' %}\r\n            DROP TABLE {{ tmp_relation }};\r\n        {% endif %}\r\n    {%- endcall %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6423042, "supported_languages": null}, "macro.dbtvault.materialization_bridge_incremental_default": {"name": "materialization_bridge_incremental_default", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\incremental_bridge_materialization.sql", "original_file_path": "macros\\materialisations\\incremental_bridge_materialization.sql", "unique_id": "macro.dbtvault.materialization_bridge_incremental_default", "macro_sql": "{%- materialization bridge_incremental, default -%}\r\n\r\n  {%- set full_refresh_mode = should_full_refresh() -%}\r\n\r\n  {% if target.type == \"sqlserver\" %}\r\n      {%- set target_relation = this.incorporate(type='table') -%}\r\n  {%  else %}\r\n      {%- set target_relation = this -%}\r\n  {% endif %}\r\n  {%- set existing_relation = load_relation(this) -%}\r\n  {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  {%- set to_drop = [] -%}\r\n  {%- if existing_relation is none -%}\r\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\r\n  {%- elif existing_relation.is_view or full_refresh_mode -%}\r\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\r\n      {%- set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" -%}\r\n      {%- set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) -%}\r\n      {%- do adapter.drop_relation(backup_relation) -%}\r\n\r\n      {%- do adapter.rename_relation(target_relation, backup_relation) -%}\r\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\r\n      {%- do to_drop.append(backup_relation) -%}\r\n  {%- else -%}\r\n\r\n      {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n      {%- do run_query(create_table_as(True, tmp_relation, sql)) -%}\r\n      {%- do adapter.expand_target_column_types(\r\n             from_relation=tmp_relation,\r\n             to_relation=target_relation) -%}\r\n      {%- set build_sql = dbtvault.incremental_bridge_replace(tmp_relation, target_relation) -%}\r\n{%- endif -%}\r\n\r\n  {%- call statement(\"main\") -%}\r\n      {{ build_sql }}\r\n  {%- endcall -%}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  -- `COMMIT` happens here\r\n  {%- do adapter.commit() -%}\r\n\r\n  {%- for rel in to_drop -%}\r\n      {%- do adapter.drop_relation(rel) -%}\r\n  {%- endfor -%}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbtvault.incremental_bridge_replace", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6504266, "supported_languages": ["sql"]}, "macro.dbtvault.incremental_pit_replace": {"name": "incremental_pit_replace", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\incremental_pit_bridge_replace.sql", "original_file_path": "macros\\materialisations\\incremental_pit_bridge_replace.sql", "unique_id": "macro.dbtvault.incremental_pit_replace", "macro_sql": "{% macro incremental_pit_replace(tmp_relation, target_relation, statement_name=\"main\") %}\r\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\r\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\r\n\r\n    TRUNCATE TABLE {{ target_relation }};\r\n\r\n    INSERT INTO {{ target_relation }} ({{ dest_cols_csv }})\r\n    (\r\n       SELECT {{ dest_cols_csv }}\r\n       FROM {{ tmp_relation }}\r\n    );\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6504266, "supported_languages": null}, "macro.dbtvault.incremental_bridge_replace": {"name": "incremental_bridge_replace", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\incremental_pit_bridge_replace.sql", "original_file_path": "macros\\materialisations\\incremental_pit_bridge_replace.sql", "unique_id": "macro.dbtvault.incremental_bridge_replace", "macro_sql": "{% macro incremental_bridge_replace(tmp_relation, target_relation, statement_name=\"main\") %}\r\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\r\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\r\n\r\n    TRUNCATE TABLE {{ target_relation }};\r\n\r\n    INSERT INTO {{ target_relation }} ({{ dest_cols_csv }})\r\n    (\r\n       SELECT {{ dest_cols_csv }}\r\n       FROM {{ tmp_relation }}\r\n    );\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6504266, "supported_languages": null}, "macro.dbtvault.materialization_pit_incremental_default": {"name": "materialization_pit_incremental_default", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\incremental_pit_materialization.sql", "original_file_path": "macros\\materialisations\\incremental_pit_materialization.sql", "unique_id": "macro.dbtvault.materialization_pit_incremental_default", "macro_sql": "{%- materialization pit_incremental, default -%}\r\n\r\n  {%- set full_refresh_mode = should_full_refresh() -%}\r\n\r\n  {% if target.type == \"sqlserver\" %}\r\n      {%- set target_relation = this.incorporate(type='table') -%}\r\n  {%  else %}\r\n      {%- set target_relation = this -%}\r\n  {% endif %}\r\n  {%- set existing_relation = load_relation(this) -%}\r\n  {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  {%- set to_drop = [] -%}\r\n  {%- if existing_relation is none -%}\r\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\r\n  {%- elif existing_relation.is_view or full_refresh_mode -%}\r\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\r\n      {%- set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" -%}\r\n      {%- set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) -%}\r\n      {%- do adapter.drop_relation(backup_relation) -%}\r\n\r\n      {%- do adapter.rename_relation(target_relation, backup_relation) -%}\r\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\r\n      {%- do to_drop.append(backup_relation) -%}\r\n  {%- else -%}\r\n\r\n      {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n      {%- do run_query(create_table_as(True, tmp_relation, sql)) -%}\r\n      {%- do adapter.expand_target_column_types(\r\n             from_relation=tmp_relation,\r\n             to_relation=target_relation) -%}\r\n      {%- set build_sql = dbtvault.incremental_pit_replace(tmp_relation, target_relation) -%}\r\n{%- endif -%}\r\n\r\n  {%- call statement(\"main\") -%}\r\n      {{ build_sql }}\r\n  {%- endcall -%}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  -- `COMMIT` happens here\r\n  {%- do adapter.commit() -%}\r\n\r\n  {%- for rel in to_drop -%}\r\n      {%- do adapter.drop_relation(rel) -%}\r\n  {%- endfor -%}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbtvault.incremental_pit_replace", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6586742, "supported_languages": ["sql"]}, "macro.dbtvault.is_any_incremental": {"name": "is_any_incremental", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\mat_is_checks.sql", "original_file_path": "macros\\materialisations\\mat_is_checks.sql", "unique_id": "macro.dbtvault.is_any_incremental", "macro_sql": "{%- macro is_any_incremental() -%}\r\n    {%- if dbtvault.is_vault_insert_by_period() or dbtvault.is_vault_insert_by_rank() or dbtvault.is_pit_incremental() or dbtvault.is_bridge_incremental() or is_incremental() -%}\r\n        {%- do return(true) -%}\r\n    {%- else -%}\r\n        {%- do return(false) -%}\r\n    {%- endif -%}\r\n{%- endmacro -%}\r\n\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.is_vault_insert_by_period", "macro.dbtvault.is_vault_insert_by_rank", "macro.dbtvault.is_pit_incremental", "macro.dbtvault.is_bridge_incremental", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.6586742, "supported_languages": null}, "macro.dbtvault.is_vault_insert_by_period": {"name": "is_vault_insert_by_period", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\mat_is_checks.sql", "original_file_path": "macros\\materialisations\\mat_is_checks.sql", "unique_id": "macro.dbtvault.is_vault_insert_by_period", "macro_sql": "{% macro is_vault_insert_by_period() %}\r\n    {% if not execute %}\r\n        {{ return(False) }}\r\n    {% else %}\r\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\r\n\r\n            {{ return(relation is not none\r\n                      and relation.type == 'table'\r\n                      and model.config.materialized == 'vault_insert_by_period'\r\n                      and not should_full_refresh()) }}\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.666706, "supported_languages": null}, "macro.dbtvault.is_vault_insert_by_rank": {"name": "is_vault_insert_by_rank", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\mat_is_checks.sql", "original_file_path": "macros\\materialisations\\mat_is_checks.sql", "unique_id": "macro.dbtvault.is_vault_insert_by_rank", "macro_sql": "{% macro is_vault_insert_by_rank() %}\r\n    {#-- do not run introspective queries in parsing #}\r\n    {% if not execute %}\r\n        {{ return(False) }}\r\n    {% else %}\r\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\r\n\r\n            {{ return(relation is not none\r\n                      and relation.type == 'table'\r\n                      and model.config.materialized == 'vault_insert_by_rank'\r\n                      and not should_full_refresh()) }}\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.666706, "supported_languages": null}, "macro.dbtvault.is_bridge_incremental": {"name": "is_bridge_incremental", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\mat_is_checks.sql", "original_file_path": "macros\\materialisations\\mat_is_checks.sql", "unique_id": "macro.dbtvault.is_bridge_incremental", "macro_sql": "{% macro is_bridge_incremental() %}\r\n    {#-- do not run introspective queries in parsing #}\r\n    {% if not execute %}\r\n        {{ return(False) }}\r\n    {% else %}\r\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\r\n\r\n            {{ return(relation is not none\r\n                      and relation.type == 'table'\r\n                      and model.config.materialized == 'bridge_incremental'\r\n                      and not should_full_refresh()) }}\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.666706, "supported_languages": null}, "macro.dbtvault.is_pit_incremental": {"name": "is_pit_incremental", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\mat_is_checks.sql", "original_file_path": "macros\\materialisations\\mat_is_checks.sql", "unique_id": "macro.dbtvault.is_pit_incremental", "macro_sql": "{% macro is_pit_incremental() %}\r\n    {#-- do not run introspective queries in parsing #}\r\n    {% if not execute %}\r\n        {{ return(False) }}\r\n    {% else %}\r\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\r\n\r\n            {{ return(relation is not none\r\n                      and relation.type == 'table'\r\n                      and model.config.materialized == 'pit_incremental'\r\n                      and not should_full_refresh()) }}\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.666706, "supported_languages": null}, "macro.dbtvault.check_placeholder": {"name": "check_placeholder", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\shared_helpers.sql", "original_file_path": "macros\\materialisations\\shared_helpers.sql", "unique_id": "macro.dbtvault.check_placeholder", "macro_sql": "{%- macro check_placeholder(model_sql, placeholder='__PERIOD_FILTER__') -%}\r\n\r\n    {%- if model_sql.find(placeholder) == -1 -%}\r\n    {%- set error_message -%}\r\n    Model '{{ model.unique_id }}' does not include the required string '{{ placeholder }}' in its sql\r\n        {%- endset -%}\r\n        {{- exceptions.raise_compiler_error(error_message) -}}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.666706, "supported_languages": null}, "macro.dbtvault.materialization_vault_insert_by_period_default": {"name": "materialization_vault_insert_by_period_default", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\vault_insert_by_period_materialization.sql", "original_file_path": "macros\\materialisations\\vault_insert_by_period_materialization.sql", "unique_id": "macro.dbtvault.materialization_vault_insert_by_period_default", "macro_sql": "{% materialization vault_insert_by_period, default -%}\r\n\r\n    {% if target.type == \"postgres\" and execute %}\r\n        {{ exceptions.raise_compiler_error(\"The vault_insert_by_period materialisation is currently unavailable on Postgres.\") }}\r\n    {% endif %}\r\n\r\n    {%- set full_refresh_mode = (should_full_refresh()) -%}\r\n\r\n    {% if target.type == \"sqlserver\" %}\r\n        {%- set target_relation = this.incorporate(type='table') -%}\r\n    {%  else %}\r\n        {%- set target_relation = this -%}\r\n    {% endif %}\r\n    {%- set existing_relation = load_relation(this) -%}\r\n    {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n\r\n    {%- set timestamp_field = dbtvault.escape_column_names(config.require('timestamp_field')) -%}\r\n    {%- set date_source_models = config.get('date_source_models', default=none) -%}\r\n\r\n    {%- set start_stop_dates = dbtvault.get_start_stop_dates(timestamp_field, date_source_models) | as_native -%}\r\n\r\n    {%- set period = config.get('period', default='day') -%}\r\n    {%- set to_drop = [] -%}\r\n\r\n    {%- do dbtvault.check_placeholder(sql) -%}\r\n\r\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n    -- `BEGIN` happens here:\r\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n    {% if existing_relation is none %}\r\n\r\n        {% set filtered_sql = dbtvault.replace_placeholder_with_period_filter(sql, timestamp_field,\r\n                                                                       start_stop_dates.start_date,\r\n                                                                       start_stop_dates.stop_date,\r\n                                                                       0, period) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n        {% do to_drop.append(tmp_relation) %}\r\n\r\n    {% elif existing_relation.is_view %}\r\n\r\n        {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table (vault_insert_by_period).\") }}\r\n        {% do adapter.drop_relation(existing_relation) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n\r\n        {% set filtered_sql = dbtvault.replace_placeholder_with_period_filter(sql, timestamp_field,\r\n                                                                       start_stop_dates.start_date,\r\n                                                                       start_stop_dates.stop_date,\r\n                                                                       0, period) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n\r\n    {% elif full_refresh_mode %}\r\n        {% set filtered_sql = dbtvault.replace_placeholder_with_period_filter(sql, timestamp_field,\r\n                                                                       start_stop_dates.start_date,\r\n                                                                       start_stop_dates.stop_date,\r\n                                                                       0, period) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n    {% else %}\r\n        {% set period_boundaries = dbtvault.get_period_boundaries(target_relation,\r\n                                                                  timestamp_field,\r\n                                                                  start_stop_dates.start_date,\r\n                                                                  start_stop_dates.stop_date,\r\n                                                                  period) %}\r\n\r\n        {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\r\n        {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\r\n        {%- set loop_vars = {'sum_rows_inserted': 0} -%}\r\n\r\n        {% for i in range(period_boundaries.num_periods) -%}\r\n\r\n            {%- set iteration_number = i + 1 -%}\r\n\r\n            {%- set period_of_load = dbtvault.get_period_of_load(period, i, period_boundaries.start_timestamp) -%}\r\n\r\n            {{ dbt_utils.log_info(\"Running for {} {} of {} ({}) [{}]\".format(period, iteration_number, period_boundaries.num_periods, period_of_load, model.unique_id)) }}\r\n\r\n            {% set tmp_relation = make_temp_relation(target_relation) %}\r\n\r\n            {% set tmp_table_sql = dbtvault.get_period_filter_sql(target_cols_csv, sql, timestamp_field, period,\r\n                                                                  period_boundaries.start_timestamp,\r\n                                                                  period_boundaries.stop_timestamp, i) %}\r\n\r\n\r\n\r\n            {# This call statement drops and then creates a temporary table #}\r\n            {# but MSSQL will fail to drop any temporary table created by a previous loop iteration #}\r\n            {# See MSSQL note and drop code below #}\r\n\r\n            {# [ ] TODO check dbt postgres implementation for a possible fix #}\r\n            {% call statement() -%}\r\n                {{ create_table_as(True, tmp_relation, tmp_table_sql) }}\r\n            {%- endcall %}\r\n\r\n            {{ adapter.expand_target_column_types(from_relation=tmp_relation,\r\n                                                  to_relation=target_relation) }}\r\n\r\n            {%- set insert_query_name = 'main-' ~ i -%}\r\n            {% call statement(insert_query_name, fetch_result=True) -%}\r\n                INSERT INTO {{ target_relation }} ({{ target_cols_csv }})\r\n                (\r\n                    SELECT {{ target_cols_csv }}\r\n                    FROM {{ tmp_relation.include(schema=True) }}\r\n                );\r\n            {%- endcall %}\r\n\r\n            {% set result = load_result(insert_query_name) %}\r\n\r\n            {% if 'response' in result.keys() %} {# added in v0.19.0 #}\r\n                {%- if not result['response']['rows_affected'] %}\r\n                    {% if target.type == \"databricks\" and result['data'] | length > 0 %}\r\n                        {% set rows_inserted = result['data'][0][1] | int %}\r\n                    {% else %}\r\n                        {% set rows_inserted = 0 %}\r\n                    {% endif %}\r\n                {%- else %}\r\n                    {% set rows_inserted = result['response']['rows_affected'] %}\r\n                {%- endif %}\r\n            {% else %} {# older versions #}\r\n                {% set rows_inserted = result['status'].split(\" \")[2] | int %}\r\n            {% endif %}\r\n\r\n            {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\r\n            {%- do loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %}\r\n\r\n            {{ dbt_utils.log_info(\"Ran for {} {} of {} ({}); {} records inserted [{}]\".format(period, iteration_number,\r\n                                                                                              period_boundaries.num_periods,\r\n                                                                                              period_of_load, rows_inserted,\r\n                                                                                              model.unique_id)) }}\r\n\r\n            {# In databricks and sqlserver a temporary view/table can only be dropped by #}\r\n            {# the connection or session that created it so drop it now before the commit below closes this session #}                                                                            model.unique_id)) }}\r\n            {% if target.type in ['databricks', 'sqlserver'] %}\r\n                {{ dbtvault.drop_temporary_special(tmp_relation) }}\r\n            {% else %}\r\n                {% do to_drop.append(tmp_relation) %}\r\n            {% endif %}\r\n\r\n            {% do adapter.commit() %}\r\n\r\n        {% endfor %}\r\n\r\n        {% call noop_statement('main', \"INSERT {}\".format(loop_vars['sum_rows_inserted']) ) -%}\r\n            {{ tmp_table_sql }}\r\n        {%- endcall %}\r\n\r\n    {% endif %}\r\n\r\n    {% if build_sql is defined %}\r\n        {% call statement(\"main\", fetch_result=True) %}\r\n            {{ build_sql }}\r\n        {% endcall %}\r\n\r\n        {% set result = load_result('main') %}\r\n\r\n        {% if 'response' in result.keys() %} {# added in v0.19.0 #}\r\n            {%- if not result['response']['rows_affected'] %}\r\n                {% if target.type == \"databricks\" and result['data'] | length > 0 %}\r\n                    {% set rows_inserted = result['data'][0][1] | int %}\r\n                {% else %}\r\n                    {% set rows_inserted = 0 %}\r\n                {% endif %}\r\n            {%- else %}\r\n                {% set rows_inserted = result['response']['rows_affected'] %}\r\n            {%- endif %}\r\n        {% else %} {# older versions #}\r\n            {% set rows_inserted = result['status'].split(\" \")[2] | int %}\r\n        {% endif %}\r\n\r\n        {% call noop_statement('main', \"BASE LOAD {}\".format(rows_inserted)) -%}\r\n            {{ build_sql }}\r\n        {%- endcall %}\r\n\r\n        -- `COMMIT` happens here\r\n        {% do adapter.commit() %}\r\n    {% endif %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n    {% for rel in to_drop %}\r\n        {% if rel.type is not none %}\r\n            {% do adapter.drop_relation(rel) %}\r\n        {% endif %}\r\n    {% endfor %}\r\n\r\n    {% set target_relation = target_relation.incorporate(type='table') %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n    {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbtvault.escape_column_names", "macro.dbtvault.get_start_stop_dates", "macro.dbtvault.check_placeholder", "macro.dbt.run_hooks", "macro.dbtvault.replace_placeholder_with_period_filter", "macro.dbt.create_table_as", "macro.dbtvault.get_period_boundaries", "macro.dbtvault.get_period_of_load", "macro.dbt_utils.log_info", "macro.dbtvault.get_period_filter_sql", "macro.dbt.statement", "macro.dbtvault.drop_temporary_special", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.698706, "supported_languages": ["sql"]}, "macro.dbtvault.materialization_vault_insert_by_rank_default": {"name": "materialization_vault_insert_by_rank_default", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\vault_insert_by_rank_materialization.sql", "original_file_path": "macros\\materialisations\\vault_insert_by_rank_materialization.sql", "unique_id": "macro.dbtvault.materialization_vault_insert_by_rank_default", "macro_sql": "{% materialization vault_insert_by_rank, default -%}\r\n\r\n    {% if target.type == \"postgres\" and execute %}\r\n        {{ exceptions.raise_compiler_error(\"The vault_insert_by_rank materialisation is currently unavailable on Postgres.\") }}\r\n    {% endif %}\r\n\r\n    {%- set full_refresh_mode = (should_full_refresh()) -%}\r\n\r\n    {% if target.type == \"sqlserver\" %}\r\n        {%- set target_relation = this.incorporate(type='table') -%}\r\n    {%  else %}\r\n        {%- set target_relation = this -%}\r\n    {% endif %}\r\n    {%- set existing_relation = load_relation(this) -%}\r\n    {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n\r\n    {%- set rank_column = dbtvault.escape_column_names(config.require('rank_column')) -%}\r\n    {%- set rank_source_models = config.require('rank_source_models') -%}\r\n\r\n    {%- set min_max_ranks = dbtvault.get_min_max_ranks(rank_column, rank_source_models) | as_native -%}\r\n\r\n    {%- set to_drop = [] -%}\r\n\r\n    {%- do dbtvault.check_placeholder(sql, \"__RANK_FILTER__\") -%}\r\n\r\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n    -- `BEGIN` happens here:\r\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n    {% if existing_relation is none %}\r\n\r\n        {% set filtered_sql = dbtvault.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n\r\n        {% do to_drop.append(tmp_relation) %}\r\n\r\n    {% elif existing_relation.is_view %}\r\n\r\n        {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table (vault_insert_by_rank).\") }}\r\n        {% do adapter.drop_relation(existing_relation) %}\r\n\r\n        {% set filtered_sql = dbtvault.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n\r\n    {% elif full_refresh_mode %}\r\n        {% set filtered_sql = dbtvault.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n    {% else %}\r\n\r\n        {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\r\n        {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\r\n        {%- set loop_vars = {'sum_rows_inserted': 0} -%}\r\n\r\n        {% for i in range(min_max_ranks.max_rank | int ) -%}\r\n\r\n            {%- set iteration_number = i + 1 -%}\r\n\r\n            {%- set filtered_sql = dbtvault.replace_placeholder_with_rank_filter(sql, rank_column, iteration_number) -%}\r\n\r\n            {{ dbt_utils.log_info(\"Running for {} {} of {} on column '{}' [{}]\".format('rank', iteration_number, min_max_ranks.max_rank, rank_column, model.unique_id)) }}\r\n\r\n            {% set tmp_relation = make_temp_relation(target_relation) %}\r\n\r\n            {# This call statement drops and then creates a temporary table #}\r\n            {# but MSSQL will fail to drop any temporary table created by a previous loop iteration #}\r\n            {# See MSSQL note and drop code below #}\r\n            {% call statement() -%}\r\n                {{ create_table_as(True, tmp_relation, filtered_sql) }}\r\n            {%- endcall %}\r\n\r\n            {{ adapter.expand_target_column_types(from_relation=tmp_relation,\r\n                                                  to_relation=target_relation) }}\r\n\r\n            {%- set insert_query_name = 'main-' ~ i -%}\r\n            {% call statement(insert_query_name, fetch_result=True) -%}\r\n                INSERT INTO {{ target_relation }} ({{ target_cols_csv }})\r\n                (\r\n                    SELECT {{ target_cols_csv }}\r\n                    FROM {{ tmp_relation.include(schema=True) }}\r\n                );\r\n            {%- endcall %}\r\n\r\n            {% set result = load_result(insert_query_name) %}\r\n            {% if 'response' in result.keys() %} {# added in v0.19.0 #}\r\n                {# Investigate for Databricks #}\r\n                {%- if result['response']['rows_affected'] == None %}\r\n                    {% set rows_inserted = 0 %}\r\n                {%- else %}\r\n                    {% set rows_inserted = result['response']['rows_affected'] %}\r\n                {%- endif %}\r\n\r\n            {% else %} {# older versions #}\r\n                {% set rows_inserted = result['status'].split(\" \")[2] | int %}\r\n            {% endif %}\r\n\r\n            {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\r\n            {%- do loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %}\r\n\r\n            {{ dbt_utils.log_info(\"Ran for {} {} of {}; {} records inserted [{}]\".format('rank', iteration_number,\r\n                                                                                          min_max_ranks.max_rank,\r\n                                                                                          rows_inserted,\r\n                                                                                          model.unique_id)) }}\r\n\r\n            {# In databricks and sqlserver a temporary view/table can only be dropped by #}\r\n            {# the connection or session that created it so drop it now before the commit below closes this session #}                                                                            model.unique_id)) }}\r\n            {% if target.type in ['databricks', 'sqlserver'] %}\r\n                {{ dbtvault.drop_temporary_special(tmp_relation) }}\r\n            {% else %}\r\n                {% do to_drop.append(tmp_relation) %}\r\n            {% endif %}\r\n\r\n            {% do adapter.commit() %}\r\n\r\n        {% endfor %}\r\n        {% call noop_statement('main', \"INSERT {}\".format(loop_vars['sum_rows_inserted']) ) -%}\r\n            {{ filtered_sql }}\r\n        {%- endcall %}\r\n\r\n    {% endif %}\r\n\r\n    {% if build_sql is defined %}\r\n        {% call statement(\"main\", fetch_result=True) %}\r\n            {{ build_sql }}\r\n        {% endcall %}\r\n\r\n        {% set result = load_result('main') %}\r\n\r\n        {% if 'response' in result.keys() %} {# added in v0.19.0 #}\r\n            {% set rows_inserted = result['response']['rows_affected'] %}\r\n        {% else %} {# older versions #}\r\n            {% set rows_inserted = result['status'].split(\" \")[2] | int %}\r\n        {% endif %}\r\n\r\n        {% call noop_statement('main', \"BASE LOAD {}\".format(rows_inserted)) -%}\r\n            {{ build_sql }}\r\n        {%- endcall %}\r\n\r\n        -- `COMMIT` happens here\r\n        {% do adapter.commit() %}\r\n    {% endif %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n    {% for rel in to_drop %}\r\n        {% if rel.type is not none %}\r\n            {% do adapter.drop_relation(rel) %}\r\n        {% endif %}\r\n    {% endfor %}\r\n\r\n    {% set target_relation = target_relation.incorporate(type='table') %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n    {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbtvault.escape_column_names", "macro.dbtvault.get_min_max_ranks", "macro.dbtvault.check_placeholder", "macro.dbt.run_hooks", "macro.dbtvault.replace_placeholder_with_rank_filter", "macro.dbt.create_table_as", "macro.dbt_utils.log_info", "macro.dbt.statement", "macro.dbtvault.drop_temporary_special", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.714593, "supported_languages": ["sql"]}, "macro.dbtvault.get_period_boundaries": {"name": "get_period_boundaries", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "unique_id": "macro.dbtvault.get_period_boundaries", "macro_sql": "{%- macro get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n    {% set macro = adapter.dispatch('get_period_boundaries',\r\n                                    'dbtvault')(target_relation=target_relation,\r\n                                                timestamp_field=timestamp_field,\r\n                                                start_date=start_date,\r\n                                                stop_date=stop_date,\r\n                                                period=period) %}\r\n\r\n    {% do return(macro) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7307105, "supported_languages": null}, "macro.dbtvault.default__get_period_boundaries": {"name": "default__get_period_boundaries", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "unique_id": "macro.dbtvault.default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')::TIMESTAMP\".format(stop_date | lower) -%}\r\n\r\n    {% set period_boundary_sql -%}\r\n        WITH period_data AS (\r\n            SELECT\r\n                COALESCE(MAX({{ timestamp_field }}), '{{ start_date }}')::TIMESTAMP AS start_timestamp,\r\n                COALESCE({{ dbt_utils.dateadd('millisecond', 86399999, from_date_or_timestamp) }},\r\n                         {{ dbtvault.current_timestamp() }} ) AS stop_timestamp\r\n            FROM {{ target_relation }}\r\n        )\r\n        SELECT\r\n            start_timestamp,\r\n            stop_timestamp,\r\n            {{ dbt_utils.datediff('start_timestamp',\r\n                                  'stop_timestamp',\r\n                                  period) }} + 1 AS num_periods\r\n        FROM period_data\r\n    {%- endset %}\r\n\r\n    {% set period_boundaries_dict = dbtvault.get_query_results_as_dict(period_boundary_sql) %}\r\n\r\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\r\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\r\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\r\n\r\n    {% do return(period_boundaries) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbtvault.current_timestamp", "macro.dbt_utils.datediff", "macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7307105, "supported_languages": null}, "macro.dbtvault.bigquery__get_period_boundaries": {"name": "bigquery__get_period_boundaries", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "unique_id": "macro.dbtvault.bigquery__get_period_boundaries", "macro_sql": "{% macro bigquery__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')\".format(stop_date | lower) -%}\r\n\r\n    {% set period_boundary_sql -%}\r\n        with data as (\r\n            select\r\n                COALESCE(CAST(MAX({{ timestamp_field }}) AS DATETIME), CAST('{{ start_date }}' AS DATETIME)) as START_TIMESTAMP,\r\n                COALESCE({{ dbt_utils.dateadd('millisecond', 86399999, from_date_or_timestamp) }},\r\n                         CAST(CURRENT_TIMESTAMP() AS DATETIME)) as STOP_TIMESTAMP\r\n            from {{ target_relation }}\r\n        )\r\n        select\r\n            START_TIMESTAMP,\r\n            STOP_TIMESTAMP,\r\n            {{ dbt_utils.datediff('start_timestamp', 'stop_timestamp', period) }} + 1 as NUM_PERIODS\r\n        from data\r\n    {%- endset %}\r\n\r\n\r\n    {% set period_boundaries_dict = dbtvault.get_query_results_as_dict(period_boundary_sql) %}\r\n\r\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\r\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\r\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\r\n\r\n    {% do return(period_boundaries) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff", "macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7307105, "supported_languages": null}, "macro.dbtvault.sqlserver__get_period_boundaries": {"name": "sqlserver__get_period_boundaries", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "unique_id": "macro.dbtvault.sqlserver__get_period_boundaries", "macro_sql": "{% macro sqlserver__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\r\n    {% set start_date = start_date[0:27] %}\r\n    {% set stop_date = stop_date[0:27] %}\r\n    {%- set from_date_or_timestamp = \"CAST(NULLIF('{}','none') AS DATETIME2)\".format(stop_date | lower) %}\r\n\r\n    {% set period_boundary_sql -%}\r\n        WITH period_data AS (\r\n            SELECT\r\n                CAST(COALESCE(MAX({{ timestamp_field }}), CAST('{{ start_date }}' AS DATETIME2)) AS DATETIME2) AS start_timestamp,\r\n                COALESCE({{ dbt_utils.dateadd('millisecond', 86399999, from_date_or_timestamp) }},\r\n                         {{ dbtvault.current_timestamp() }} ) AS stop_timestamp\r\n            FROM {{ target_relation }}\r\n        )\r\n        SELECT\r\n            start_timestamp,\r\n            stop_timestamp,\r\n            {{ dbt_utils.datediff('start_timestamp', 'stop_timestamp', period) }} + 1 AS num_periods\r\n        FROM period_data\r\n    {%- endset %}\r\n\r\n    {% set period_boundaries_dict = dbtvault.get_query_results_as_dict(period_boundary_sql) %}\r\n\r\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\r\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\r\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\r\n\r\n    {% do return(period_boundaries) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbtvault.current_timestamp", "macro.dbt_utils.datediff", "macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7387218, "supported_languages": null}, "macro.dbtvault.databricks__get_period_boundaries": {"name": "databricks__get_period_boundaries", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "unique_id": "macro.dbtvault.databricks__get_period_boundaries", "macro_sql": "{% macro databricks__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')::TIMESTAMP\".format(stop_date | lower) -%}\r\n\r\n    {% set period_boundary_sql -%}\r\n\r\n        WITH period_data AS (\r\n            SELECT\r\n                COALESCE(MAX({{ timestamp_field }}), CAST('{{ start_date }}' AS TIMESTAMP)) AS start_timestamp,\r\n                COALESCE({{ dbt_utils.dateadd('millisecond', 86399999, from_date_or_timestamp) }},\r\n                         {{ dbtvault.current_timestamp() }}) AS stop_timestamp\r\n            FROM {{ target_relation }}\r\n        )\r\n        SELECT\r\n            IF(stop_timestamp < start_timestamp, stop_timestamp, start_timestamp) AS start_timestamp,\r\n            stop_timestamp,\r\n            {{ dbt_utils.datediff('start_timestamp', 'stop_timestamp', period) }} + 1 AS num_periods\r\n\r\n        FROM period_data\r\n    {%- endset %}\r\n\r\n    {% set period_boundaries_dict = dbtvault.get_query_results_as_dict(period_boundary_sql) %}\r\n\r\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\r\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\r\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\r\n\r\n    {% do return(period_boundaries) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbtvault.current_timestamp", "macro.dbt_utils.datediff", "macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7387218, "supported_languages": null}, "macro.dbtvault.postgres__get_period_boundaries": {"name": "postgres__get_period_boundaries", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "unique_id": "macro.dbtvault.postgres__get_period_boundaries", "macro_sql": "{% macro postgres__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n    {% set period_boundary_sql -%}\r\n        WITH period_data AS (\r\n            SELECT\r\n                COALESCE(MAX({{ timestamp_field }}), '{{ start_date }}')::TIMESTAMP AS start_timestamp,\r\n                COALESCE({{ dbt_utils.dateadd('millisecond', 86399999, \"NULLIF('\" ~ stop_date | lower ~ \"','none')::TIMESTAMP\") }},\r\n                         {{ dbtvault.current_timestamp() }} ) AS stop_timestamp\r\n            FROM {{ target_relation }}\r\n        )\r\n        SELECT\r\n            start_timestamp,\r\n            stop_timestamp,\r\n            {{ dbt_utils.datediff('start_timestamp',\r\n                                  'stop_timestamp',\r\n                                  period) }} + 1 AS num_periods\r\n        FROM period_data\r\n    {%- endset %}\r\n\r\n    {% set period_boundaries_dict = dbtvault.get_query_results_as_dict(period_boundary_sql) %}\r\n\r\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\r\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\r\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\r\n\r\n    {% do return(period_boundaries) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbtvault.current_timestamp", "macro.dbt_utils.datediff", "macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7387218, "supported_languages": null}, "macro.dbtvault.get_period_filter_sql": {"name": "get_period_filter_sql", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "unique_id": "macro.dbtvault.get_period_filter_sql", "macro_sql": "{%- macro get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n\r\n    {% set macro = adapter.dispatch('get_period_filter_sql',\r\n                                    'dbtvault')(target_cols_csv=target_cols_csv,\r\n                                                base_sql=base_sql,\r\n                                                timestamp_field=timestamp_field,\r\n                                                period=period,\r\n                                                start_timestamp=start_timestamp,\r\n                                                stop_timestamp=stop_timestamp,\r\n                                                offset=offset) %}\r\n    {% do return(macro) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__get_period_filter_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7467022, "supported_languages": null}, "macro.dbtvault.default__get_period_filter_sql": {"name": "default__get_period_filter_sql", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "unique_id": "macro.dbtvault.default__get_period_filter_sql", "macro_sql": "{% macro default__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n\r\n    {%- set filtered_sql = {'sql': base_sql} -%}\r\n\r\n    {%- do filtered_sql.update({'sql': dbtvault.replace_placeholder_with_period_filter(filtered_sql.sql,\r\n                                                                                       timestamp_field,\r\n                                                                                       start_timestamp,\r\n                                                                                       stop_timestamp,\r\n                                                                                       offset, period)}) -%}\r\n    select {{ target_cols_csv }} from ({{ filtered_sql.sql }})\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7467022, "supported_languages": null}, "macro.dbtvault.sqlserver__get_period_filter_sql": {"name": "sqlserver__get_period_filter_sql", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "unique_id": "macro.dbtvault.sqlserver__get_period_filter_sql", "macro_sql": "{% macro sqlserver__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n\r\n    {%- set filtered_sql = {'sql': base_sql} -%}\r\n\r\n    {%- do filtered_sql.update({'sql': dbtvault.replace_placeholder_with_period_filter(filtered_sql.sql,\r\n                                                                                       timestamp_field,\r\n                                                                                       start_timestamp,\r\n                                                                                       stop_timestamp,\r\n                                                                                       offset, period)}) -%}\r\n    {# MSSQL does not allow CTEs in a subquery #}\r\n    {{ filtered_sql.sql }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7467022, "supported_languages": null}, "macro.dbtvault.postgres__get_period_filter_sql": {"name": "postgres__get_period_filter_sql", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "unique_id": "macro.dbtvault.postgres__get_period_filter_sql", "macro_sql": "{% macro postgres__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n\r\n    {%- set filtered_sql = {'sql': base_sql} -%}\r\n\r\n    {%- do filtered_sql.update({'sql': dbtvault.replace_placeholder_with_period_filter(filtered_sql.sql,\r\n                                                                                       timestamp_field,\r\n                                                                                       start_timestamp,\r\n                                                                                       stop_timestamp,\r\n                                                                                       offset, period)}) -%}\r\n    select {{ target_cols_csv }} from ({{ filtered_sql.sql }})\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7467022, "supported_languages": null}, "macro.dbtvault.get_period_of_load": {"name": "get_period_of_load", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "unique_id": "macro.dbtvault.get_period_of_load", "macro_sql": "{%- macro get_period_of_load(period, offset, start_timestamp) -%}\r\n\r\n    {% set macro = adapter.dispatch('get_period_of_load',\r\n                                    'dbtvault')(period=period,\r\n                                                offset=offset,\r\n                                                start_timestamp=start_timestamp) %}\r\n\r\n    {% do return(macro) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__get_period_of_load"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7467022, "supported_languages": null}, "macro.dbtvault.default__get_period_of_load": {"name": "default__get_period_of_load", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "unique_id": "macro.dbtvault.default__get_period_of_load", "macro_sql": "\r\n\r\n\r\n{%- macro default__get_period_of_load(period, offset, start_timestamp) -%}\r\n\r\n    {% set period_of_load_sql -%}\r\n        SELECT DATE_TRUNC('{{ period }}', DATEADD({{ period }}, {{ offset }}, TO_DATE('{{ start_timestamp }}'))) AS period_of_load\r\n    {%- endset %}\r\n\r\n    {% set period_of_load_dict = dbtvault.get_query_results_as_dict(period_of_load_sql) %}\r\n\r\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\r\n\r\n    {% do return(period_of_load) %}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7467022, "supported_languages": null}, "macro.dbtvault.bigquery__get_period_of_load": {"name": "bigquery__get_period_of_load", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "unique_id": "macro.dbtvault.bigquery__get_period_of_load", "macro_sql": "{%- macro bigquery__get_period_of_load(period, offset, start_timestamp) -%}\r\n\r\n    {% set period_of_load_sql -%}\r\n        SELECT DATE_TRUNC(DATE_ADD( DATE('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), {{ period }}  ) AS PERIOD_OF_LOAD\r\n    {%- endset %}\r\n\r\n    {% set period_of_load_dict = dbtvault.get_query_results_as_dict(period_of_load_sql) %}\r\n\r\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\r\n\r\n    {% do return(period_of_load) %}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7547057, "supported_languages": null}, "macro.dbtvault.sqlserver__get_period_of_load": {"name": "sqlserver__get_period_of_load", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "unique_id": "macro.dbtvault.sqlserver__get_period_of_load", "macro_sql": "{%- macro sqlserver__get_period_of_load(period, offset, start_timestamp) -%}\r\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\r\n    {% set start_timestamp_mssql = start_timestamp[0:23] %}\r\n\r\n    {% set period_of_load_sql -%}\r\n        SELECT DATEADD({{ period }}, DATEDIFF({{period}}, 0, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2))), 0) AS period_of_load\r\n    {%- endset %}\r\n\r\n    {% set period_of_load_dict = dbtvault.get_query_results_as_dict(period_of_load_sql) %}\r\n\r\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\r\n\r\n    {% do return(period_of_load) %}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7547057, "supported_languages": null}, "macro.dbtvault.databricks__get_period_of_load": {"name": "databricks__get_period_of_load", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "unique_id": "macro.dbtvault.databricks__get_period_of_load", "macro_sql": "{%- macro databricks__get_period_of_load(period, offset, start_timestamp) -%}\r\n    {% do return(dbtvault.default__get_period_of_load(period=period, offset=offset, start_timestamp=start_timestamp)) %}\r\n{%- endmacro -%}\r\n\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.default__get_period_of_load"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7547057, "supported_languages": null}, "macro.dbtvault.postgres__get_period_of_load": {"name": "postgres__get_period_of_load", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "unique_id": "macro.dbtvault.postgres__get_period_of_load", "macro_sql": "{%- macro postgres__get_period_of_load(period, offset, start_timestamp) -%}\r\n    {# Postgres uses different DateTime arithmetic #}\r\n    {% set period_of_load_sql -%}\r\n        SELECT DATE_TRUNC('{{ period }}',\r\n               TO_TIMESTAMP('{{ start_timestamp }}', 'YYYY-MM-DD HH24:MI:SS') + interval '{{ offset }} {{ period }}'\r\n        ) AS period_of_load\r\n    {%- endset %}\r\n\r\n    {% set period_of_load_dict = dbtvault.get_query_results_as_dict(period_of_load_sql) %}\r\n\r\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\r\n\r\n    {% do return(period_of_load) %}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7547057, "supported_languages": null}, "macro.dbtvault.get_start_stop_dates": {"name": "get_start_stop_dates", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\get_start_stop_dates.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_start_stop_dates.sql", "unique_id": "macro.dbtvault.get_start_stop_dates", "macro_sql": "{% macro get_start_stop_dates(timestamp_field, date_source_models) %}\r\n\r\n    {% if config.get('start_date', default=none) is not none %}\r\n\r\n        {%- set start_date = config.get('start_date') -%}\r\n        {%- set stop_date = config.get('stop_date', default=none) -%}\r\n\r\n        {% do return({'start_date': start_date,'stop_date': stop_date}) %}\r\n\r\n    {% elif date_source_models is not none %}\r\n\r\n        {% if date_source_models is string %}\r\n            {% set date_source_models = [date_source_models] %}\r\n        {% endif %}\r\n        {% set query_sql %}\r\n            WITH stage AS (\r\n            {% for source_model in date_source_models %}\r\n                SELECT {{ timestamp_field }} FROM {{ ref(source_model) }}\r\n                {% if not loop.last %} UNION ALL {% endif %}\r\n            {% endfor %})\r\n\r\n            SELECT MIN({{ timestamp_field }}) AS MIN, MAX({{ timestamp_field }}) AS MAX\r\n            FROM stage\r\n        {% endset %}\r\n\r\n        {% set min_max_dict = dbtvault.get_query_results_as_dict(query_sql) %}\r\n\r\n        {% set start_date = min_max_dict['MIN'][0] | string %}\r\n        {% set stop_date = min_max_dict['MAX'][0] | string %}\r\n        {% set min_max_dates = {\"start_date\": start_date, \"stop_date\": stop_date} %}\r\n\r\n        {% do return(min_max_dates) %}\r\n\r\n    {% else %}\r\n        {%- if execute -%}\r\n            {{ exceptions.raise_compiler_error(\"Invalid 'vault_insert_by_period' configuration. Must provide 'start_date' and 'stop_date', just 'stop_date', and/or 'date_source_models' options.\") }}\r\n        {%- endif -%}\r\n    {% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.762701, "supported_languages": null}, "macro.dbtvault.replace_placeholder_with_period_filter": {"name": "replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "unique_id": "macro.dbtvault.replace_placeholder_with_period_filter", "macro_sql": "{%- macro replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) -%}\r\n\r\n    {% set macro = adapter.dispatch('replace_placeholder_with_period_filter',\r\n                                    'dbtvault')(core_sql=core_sql,\r\n                                                timestamp_field=timestamp_field,\r\n                                                start_timestamp=start_timestamp,\r\n                                                stop_timestamp=stop_timestamp,\r\n                                                offset=offset,\r\n                                                period=period) %}\r\n    {% do return(macro) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.762701, "supported_languages": null}, "macro.dbtvault.default__replace_placeholder_with_period_filter": {"name": "default__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "unique_id": "macro.dbtvault.default__replace_placeholder_with_period_filter", "macro_sql": "{% macro default__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\r\n\r\n    {%- set period_filter -%}\r\n        (TO_DATE({{ timestamp_field }})\r\n        >= DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}') + INTERVAL '{{ offset }} {{ period }}') AND\r\n             TO_DATE({{ timestamp_field }}) < DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}') + INTERVAL '{{ offset }} {{ period }}' + INTERVAL '1 {{ period }}'))\r\n      AND (TO_DATE({{ timestamp_field }}) >= TO_DATE('{{ start_timestamp }}'))\r\n    {%- endset -%}\r\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.762701, "supported_languages": null}, "macro.dbtvault.bigquery__replace_placeholder_with_period_filter": {"name": "bigquery__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "unique_id": "macro.dbtvault.bigquery__replace_placeholder_with_period_filter", "macro_sql": "{% macro bigquery__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\r\n\r\n    {%- set period_filter -%}\r\n            (DATE({{ timestamp_field }}) >= DATE_TRUNC(DATE_ADD( DATE('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), {{ period }} ) AND\r\n             DATE({{ timestamp_field }}) < DATE_TRUNC(DATE_ADD(DATE_ADD( DATE('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), INTERVAL 1 {{ period }}), {{ period }} )\r\n      AND DATE({{ timestamp_field }}) >= DATE('{{ start_timestamp }}'))\r\n    {%- endset -%}\r\n\r\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.762701, "supported_languages": null}, "macro.dbtvault.sqlserver__replace_placeholder_with_period_filter": {"name": "sqlserver__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "unique_id": "macro.dbtvault.sqlserver__replace_placeholder_with_period_filter", "macro_sql": "{% macro sqlserver__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\r\n\r\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\r\n    {% set start_timestamp_mssql = start_timestamp[0:27] %}\r\n\r\n    {%- set period_filter -%}\r\n            (CAST({{ timestamp_field }} AS DATE) >= DATEADD({{ period }}, DATEDIFF({{ period }}, 0, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2))), 0) AND\r\n             CAST({{ timestamp_field }} AS DATE) < DATEADD({{ period }}, 1, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2)))\r\n      AND (CAST({{ timestamp_field }} AS DATE) >= CAST('{{ start_timestamp_mssql }}' AS DATE)))\r\n    {%- endset -%}\r\n\r\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.770702, "supported_languages": null}, "macro.dbtvault.postgres__replace_placeholder_with_period_filter": {"name": "postgres__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "unique_id": "macro.dbtvault.postgres__replace_placeholder_with_period_filter", "macro_sql": "{% macro postgres__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\r\n\r\n    {%- set period_filter -%}\r\n        {{ timestamp_field }}::DATE >= DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}', 'YYYY-MM-DD') + INTERVAL '{{ offset }} {{ period }}')\r\n        AND {{ timestamp_field }}::DATE < DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}','YYYY-MM-DD') + INTERVAL '{{ offset }} {{ period }}' + INTERVAL '1 {{ period }}')\r\n        AND {{ timestamp_field }}::DATE >= TO_DATE('{{ start_timestamp }}','YYYY-MM-DD')\r\n    {%- endset -%}\r\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.770702, "supported_languages": null}, "macro.dbtvault.get_min_max_ranks": {"name": "get_min_max_ranks", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\rank_mat_helpers\\get_min_max_ranks.sql", "original_file_path": "macros\\materialisations\\rank_mat_helpers\\get_min_max_ranks.sql", "unique_id": "macro.dbtvault.get_min_max_ranks", "macro_sql": "{% macro get_min_max_ranks(rank_column, rank_source_models) %}\r\n\r\n    {% if rank_source_models is not none %}\r\n\r\n        {% if rank_source_models is string %}\r\n            {% set rank_source_models = [rank_source_models] %}\r\n        {% endif %}\r\n\r\n        {% set query_sql %}\r\n            WITH stage AS (\r\n            {% for source_model in rank_source_models %}\r\n                SELECT {{ rank_column }} FROM {{ ref(source_model) }}\r\n                {% if not loop.last %} UNION ALL {% endif %}\r\n            {% endfor %})\r\n\r\n            SELECT MIN({{ rank_column }}) AS MIN, MAX({{ rank_column }}) AS MAX\r\n            FROM stage\r\n        {% endset %}\r\n\r\n        {% set min_max_dict = dbtvault.get_query_results_as_dict(query_sql) %}\r\n\r\n        {% set min_rank = min_max_dict['MIN'][0] | string %}\r\n        {% set max_rank = min_max_dict['MAX'][0] | string %}\r\n        {% set min_max_ranks = {\"min_rank\": min_rank, \"max_rank\": max_rank} %}\r\n\r\n        {% do return(min_max_ranks) %}\r\n\r\n    {% else %}\r\n        {%- if execute -%}\r\n            {{ exceptions.raise_compiler_error(\"Invalid 'vault_insert_by_rank' configuration. Must provide 'rank_column', and 'rank_source_models' options.\") }}\r\n        {%- endif -%}\r\n    {% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.770702, "supported_languages": null}, "macro.dbtvault.replace_placeholder_with_rank_filter": {"name": "replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "original_file_path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "unique_id": "macro.dbtvault.replace_placeholder_with_rank_filter", "macro_sql": "{%- macro replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) -%}\r\n\r\n    {% set macro = adapter.dispatch('replace_placeholder_with_rank_filter',\r\n                                    'dbtvault')(core_sql=core_sql,\r\n                                                rank_column=rank_column,\r\n                                                rank_iteration=rank_iteration) %}\r\n    {% do return(macro) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__replace_placeholder_with_rank_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.770702, "supported_languages": null}, "macro.dbtvault.default__replace_placeholder_with_rank_filter": {"name": "default__replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "original_file_path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "unique_id": "macro.dbtvault.default__replace_placeholder_with_rank_filter", "macro_sql": "{% macro default__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\r\n\r\n    {%- set rank_filter -%}\r\n    {{ rank_column }}:: INTEGER = {{ rank_iteration }}::INTEGER\r\n    {%- endset -%}\r\n\r\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.778705, "supported_languages": null}, "macro.dbtvault.sqlserver__replace_placeholder_with_rank_filter": {"name": "sqlserver__replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "original_file_path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "unique_id": "macro.dbtvault.sqlserver__replace_placeholder_with_rank_filter", "macro_sql": "{% macro sqlserver__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\r\n\r\n    {%- set rank_filter -%}\r\n        CAST({{ rank_column }} AS INT) = CAST({{ rank_iteration }} AS INT)\r\n    {%- endset -%}\r\n\r\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.778705, "supported_languages": null}, "macro.dbtvault.bigquery__replace_placeholder_with_rank_filter": {"name": "bigquery__replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "original_file_path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "unique_id": "macro.dbtvault.bigquery__replace_placeholder_with_rank_filter", "macro_sql": "{% macro bigquery__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\r\n    {%- set rank_filter -%}\r\n        CAST({{ rank_column }} AS INTEGER) = CAST({{ rank_iteration }} AS INTEGER)\r\n    {%- endset -%}\r\n\r\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.778705, "supported_languages": null}, "macro.dbtvault.derive_columns": {"name": "derive_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\staging\\derive_columns.sql", "original_file_path": "macros\\staging\\derive_columns.sql", "unique_id": "macro.dbtvault.derive_columns", "macro_sql": "{%- macro derive_columns(source_relation=none, columns=none) -%}\r\n\r\n    {{- adapter.dispatch('derive_columns', 'dbtvault')(source_relation=source_relation, columns=columns) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__derive_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.778705, "supported_languages": null}, "macro.dbtvault.default__derive_columns": {"name": "default__derive_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\staging\\derive_columns.sql", "original_file_path": "macros\\staging\\derive_columns.sql", "unique_id": "macro.dbtvault.default__derive_columns", "macro_sql": "\r\n\r\n{%- macro default__derive_columns(source_relation=none, columns=none) -%}\r\n\r\n{%- set exclude_columns = [] -%}\r\n{%- set include_columns = [] -%}\r\n{%- set src_columns = [] -%}\r\n{%- set der_columns = [] -%}\r\n\r\n{%- set source_cols = dbtvault.source_columns(source_relation=source_relation) -%}\r\n\r\n{%- if columns is mapping and columns is not none -%}\r\n\r\n    {#- Add aliases of derived columns to excludes and full SQL to includes -#}\r\n    {%- for derived_column in columns -%}\r\n        {% set column_config = columns[derived_column] %}\r\n\r\n        {%- if dbtvault.is_list(column_config) -%}\r\n            {%- set column_list = [] -%}\r\n\r\n            {%- for concat_component in column_config -%}\r\n                {%- set column_str = dbtvault.as_constant(concat_component) -%}\r\n                {%- do column_list.append(column_str) -%}\r\n            {%- endfor -%}\r\n\r\n            {%- set concat = dbtvault.concat_ws(column_list, \"||\") -%}\r\n            {%- set concat_string = concat ~ \" AS \" ~ dbtvault.escape_column_names(derived_column) -%}\r\n\r\n            {%- do der_columns.append(concat_string) -%}\r\n        {%- else -%}\r\n            {%- if column_config is mapping and column_config -%}\r\n                {%- set column_escape = column_config['escape'] -%}\r\n\r\n                {%- if dbtvault.is_list(column_config['source_column']) -%}\r\n                    {%- set column_list = [] -%}\r\n\r\n                    {%- for concat_component in column_config['source_column'] -%}\r\n                        {%- set column_str = dbtvault.as_constant(concat_component) -%}\r\n                        {%- if column_escape is true %}\r\n                            {%- set column_str = dbtvault.escape_column_names(column_str) -%}\r\n                        {% endif %}\r\n                        {%- do column_list.append(column_str) -%}\r\n                    {%- endfor -%}\r\n\r\n                    {%- set concat = dbtvault.concat_ws(column_list, \"||\") -%}\r\n                    {%- set concat_string = concat ~ \" AS \" ~ dbtvault.escape_column_names(derived_column) -%}\r\n\r\n                    {%- do der_columns.append(concat_string) -%}\r\n                {%- else -%}\r\n                    {%- set column_str = dbtvault.as_constant(column_config['source_column']) -%}\r\n                    {%- if column_escape is true -%}\r\n                        {%- do der_columns.append(dbtvault.escape_column_names(column_str) ~ \" AS \" ~ dbtvault.escape_column_names(derived_column)) -%}\r\n                    {%- else -%}\r\n                        {%- do der_columns.append(column_str ~ \" AS \" ~ dbtvault.escape_column_names(derived_column)) -%}\r\n                    {%- endif -%}\r\n                {%- endif -%}\r\n            {%- else -%}\r\n                {%- set column_str = dbtvault.as_constant(column_config) -%}\r\n                {%- do der_columns.append(column_str ~ \" AS \" ~ dbtvault.escape_column_names(derived_column)) -%}\r\n            {%- endif -%}\r\n        {%- endif -%}\r\n\r\n        {%- do exclude_columns.append(derived_column) -%}\r\n\r\n    {%- endfor -%}\r\n\r\n    {#- Add all columns from source_model relation -#}\r\n    {%- if source_relation is defined and source_relation is not none -%}\r\n\r\n        {%- for col in source_cols -%}\r\n            {%- if col | lower not in exclude_columns | map('lower') | list -%}\r\n                {%- do src_columns.append(dbtvault.escape_column_names(col)) -%}\r\n            {%- endif -%}\r\n        {%- endfor -%}\r\n\r\n    {%- endif -%}\r\n\r\n    {#- Makes sure the columns are appended in a logical order. Source columns then derived columns -#}\r\n    {%- set include_columns = src_columns + der_columns -%}\r\n\r\n    {#- Print out all columns in includes -#}\r\n    {%- for col in include_columns -%}\r\n        {{- col | indent(4) -}}{{ \",\\n\" if not loop.last }}\r\n    {%- endfor -%}\r\n\r\n{%- else -%}\r\n\r\n{%- if execute -%}\r\n{{ exceptions.raise_compiler_error(\"Invalid column configuration:\r\nexpected format, either: {'source_relation': Relation, 'columns': {column_name: column_value}}\r\nor: {'source_relation': Relation, 'columns': {column_name: {'source_column': column_value, 'escape': true / false}}}\r\ngot: {'source_relation': \" ~ source_relation ~ \", 'columns': \" ~ columns ~ \"}\") }}\r\n{%- endif %}\r\n\r\n{%- endif %}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.source_columns", "macro.dbtvault.is_list", "macro.dbtvault.as_constant", "macro.dbtvault.concat_ws", "macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7866998, "supported_languages": null}, "macro.dbtvault.hash_columns": {"name": "hash_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\staging\\hash_columns.sql", "original_file_path": "macros\\staging\\hash_columns.sql", "unique_id": "macro.dbtvault.hash_columns", "macro_sql": "{%- macro hash_columns(columns=none) -%}\r\n\r\n    {{- adapter.dispatch('hash_columns', 'dbtvault')(columns=columns) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__hash_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7866998, "supported_languages": null}, "macro.dbtvault.default__hash_columns": {"name": "default__hash_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\staging\\hash_columns.sql", "original_file_path": "macros\\staging\\hash_columns.sql", "unique_id": "macro.dbtvault.default__hash_columns", "macro_sql": "\r\n\r\n{%- macro default__hash_columns(columns=none) -%}\r\n\r\n{%- if columns is mapping and columns is not none -%}\r\n\r\n    {%- for col in columns -%}\r\n\r\n        {% if columns[col] is mapping and columns[col].is_hashdiff -%}\r\n\r\n            {{- dbtvault.hash(columns=columns[col]['columns'], \r\n                              alias=col, \r\n                              is_hashdiff=columns[col]['is_hashdiff']) -}}\r\n\r\n        {%- elif columns[col] is not mapping -%}\r\n\r\n            {{- dbtvault.hash(columns=columns[col],\r\n                              alias=col,\r\n                              is_hashdiff=false) -}}\r\n        \r\n        {%- elif columns[col] is mapping and not columns[col].is_hashdiff -%}\r\n\r\n            {%- if execute -%}\r\n                {%- do exceptions.warn(\"[\" ~ this ~ \"] Warning: You provided a list of columns under a 'columns' key, but did not provide the 'is_hashdiff' flag. Use list syntax for PKs.\") -%}\r\n            {% endif %}\r\n\r\n            {{- dbtvault.hash(columns=columns[col]['columns'], alias=col) -}}\r\n\r\n        {%- endif -%}\r\n\r\n        {{- \",\\n\" if not loop.last -}}\r\n    {%- endfor -%}\r\n\r\n{%- endif %}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7947059, "supported_languages": null}, "macro.dbtvault.null_columns": {"name": "null_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "unique_id": "macro.dbtvault.null_columns", "macro_sql": "{%- macro null_columns(source_relation=none, columns=none) -%}\r\n\r\n    {{- adapter.dispatch('null_columns', 'dbtvault')(source_relation=source_relation, columns=columns) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__null_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.7947059, "supported_languages": null}, "macro.dbtvault.default__null_columns": {"name": "default__null_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "unique_id": "macro.dbtvault.default__null_columns", "macro_sql": "\r\n\r\n{%- macro default__null_columns(source_relation=none, columns=none) -%}\r\n\r\n{%- if columns is mapping and columns is not none -%}\r\n\r\n    {%- set ns = namespace() -%}\r\n\r\n    {%- for col in columns -%}\r\n        {%- if col.lower() == 'required' -%}\r\n            {% if dbtvault.is_something(columns[col]) %}\r\n                {%- if columns[col] is string -%}\r\n                    {%- set ns.required = [columns[col]] -%}\r\n                {%- elif dbtvault.is_list(columns[col]) -%}\r\n                    {%- set ns.required = columns[col] -%}\r\n                {%- endif -%}\r\n            {%- endif -%}\r\n        {%- endif -%}\r\n        {%- if col.lower() == 'optional' -%}\r\n            {% if dbtvault.is_something(columns[col]) %}\r\n                {%- if columns[col] is string -%}\r\n                    {%- set ns.optional = [columns[col]] -%}\r\n                {%- elif dbtvault.is_list(columns[col]) -%}\r\n                    {%- set ns.optional = columns[col] -%}\r\n                {%- endif -%}\r\n            {%- endif -%}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n\r\n    {%- set required_value = var('null_key_required', '-1') -%}\r\n    {%- set optional_value = var('null_key_optional', '-2') -%}\r\n\r\n    {%- if dbtvault.is_something(ns.required) -%}\r\n        {%- filter indent(width=0) -%}\r\n        {%- for col_name in ns.required -%}\r\n            {{ dbtvault.null_column_sql(col_name, required_value) }}{{ \",\\n\" if not loop.last }}{{ \",\\n\" if loop.last and dbtvault.is_something(ns.optional) else \"\" }}\r\n        {%- endfor -%}\r\n        {%- endfilter -%}\r\n    {%- endif -%}\r\n\r\n    {%- if dbtvault.is_something(ns.optional) -%}\r\n        {%- filter indent(width=0) -%}\r\n        {%- for col_name in ns.optional -%}\r\n            {{ dbtvault.null_column_sql(col_name, optional_value) }}{{ \",\\n\" if not loop.last else \"\\n\" }}\r\n        {%- endfor -%}\r\n        {%- endfilter -%}\r\n    {%- endif -%}\r\n\r\n{%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.is_something", "macro.dbtvault.is_list", "macro.dbtvault.null_column_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8027015, "supported_languages": null}, "macro.dbtvault.null_column_sql": {"name": "null_column_sql", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "unique_id": "macro.dbtvault.null_column_sql", "macro_sql": "{%- macro null_column_sql(col_name, default_value) -%}\r\n\r\n    {{- adapter.dispatch('null_column_sql', 'dbtvault')(col_name=col_name, default_value=default_value) -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.default__null_column_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8027015, "supported_languages": null}, "macro.dbtvault.default__null_column_sql": {"name": "default__null_column_sql", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "unique_id": "macro.dbtvault.default__null_column_sql", "macro_sql": "{%- macro default__null_column_sql(col_name, default_value) -%}\r\n\r\n    {%- set col_name_esc = dbtvault.escape_column_names(col_name) -%}\r\n    {%- set col_name_orig_esc = dbtvault.escape_column_names(col_name ~ \"_ORIGINAL\") -%}\r\n    {{ col_name_esc }} AS {{ col_name_orig_esc }},\r\n    IFNULL({{ col_name_esc }}, '{{ default_value }}') AS {{ col_name_esc }}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8027015, "supported_languages": null}, "macro.dbtvault.sqlserver__null_column_sql": {"name": "sqlserver__null_column_sql", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "unique_id": "macro.dbtvault.sqlserver__null_column_sql", "macro_sql": "{%- macro sqlserver__null_column_sql(col_name, default_value) -%}\r\n\r\n    {%- set col_name_esc = dbtvault.escape_column_names(col_name) -%}\r\n    {%- set col_name_orig_esc = dbtvault.escape_column_names(col_name ~ \"_ORIGINAL\") -%}\r\n    {{ col_name_esc }} AS {{ col_name_orig_esc }},\r\n    ISNULL({{ col_name_esc }}, '{{ default_value }}') AS {{ col_name_esc }}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8027015, "supported_languages": null}, "macro.dbtvault.postgres__null_column_sql": {"name": "postgres__null_column_sql", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "unique_id": "macro.dbtvault.postgres__null_column_sql", "macro_sql": "{%- macro postgres__null_column_sql(col_name, default_value) -%}\r\n\r\n    {%- set col_name_esc = dbtvault.escape_column_names(col_name) -%}\r\n    {%- set col_name_orig_esc = dbtvault.escape_column_names(col_name ~ \"_ORIGINAL\") -%}\r\n    {{ col_name_esc }} AS {{ col_name_orig_esc }},\r\n    COALESCE({{ col_name_esc }}, '{{ default_value }}') AS {{ col_name_esc }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8027015, "supported_languages": null}, "macro.dbtvault.rank_columns": {"name": "rank_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\staging\\rank_columns.sql", "original_file_path": "macros\\staging\\rank_columns.sql", "unique_id": "macro.dbtvault.rank_columns", "macro_sql": "{%- macro rank_columns(columns=none) -%}\r\n\r\n    {{- adapter.dispatch('rank_columns', 'dbtvault')(columns=columns) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__rank_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8114395, "supported_languages": null}, "macro.dbtvault.default__rank_columns": {"name": "default__rank_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\staging\\rank_columns.sql", "original_file_path": "macros\\staging\\rank_columns.sql", "unique_id": "macro.dbtvault.default__rank_columns", "macro_sql": "\r\n\r\n{%- macro default__rank_columns(columns=none) -%}\r\n\r\n{%- if columns is mapping and columns is not none -%}\r\n\r\n    {%- for col in columns -%}\r\n\r\n        {%- if columns[col] is mapping and columns[col].partition_by and columns[col].order_by -%}\r\n\r\n            {%- set order_by = columns[col].order_by -%}\r\n            {%- set partition_by = columns[col].partition_by -%}\r\n            {%- set dense_rank = columns[col].dense_rank -%}\r\n\r\n            {%- if dbtvault.is_nothing(dense_rank) %}\r\n                {%- set rank_type = \"RANK()\" -%}\r\n            {%- elif dense_rank is true -%}\r\n                {%- set rank_type = \"DENSE_RANK()\" -%}\r\n            {%- else -%}\r\n                {%- if execute -%}\r\n                    {%- do exceptions.raise_compiler_error('If dense_rank is provided, it must be true or false, not {}'.format(dense_rank)) -%}\r\n                {% endif %}\r\n            {%- endif -%}\r\n\r\n            {%- if dbtvault.is_list(order_by) -%}\r\n\r\n                {%- set order_by_str_lst = [] -%}\r\n\r\n                {% for order_by_col in order_by %}\r\n\r\n                    {%- if order_by_col is mapping %}\r\n                        {%- set column_name, direction = order_by_col.items()|first -%}\r\n                        {%- set order_by_str = \"{} {}\".format(dbtvault.escape_column_names(column_name), direction) | trim -%}\r\n                    {%- else -%}\r\n                        {%- set order_by_str = dbtvault.escape_column_names(order_by_col) -%}\r\n                    {%- endif -%}\r\n\r\n                    {%- do order_by_str_lst.append(order_by_str) -%}\r\n                {%- endfor -%}\r\n\r\n                {%- set order_by_str = order_by_str_lst | join(\", \") -%}\r\n\r\n            {%- else -%}\r\n\r\n                {%- if order_by is mapping %}\r\n                    {%- set column_name, direction = order_by.items()|first -%}\r\n                {%- else -%}\r\n                    {%- set column_name = order_by -%}\r\n                    {%- set direction = '' -%}\r\n                {%- endif -%}\r\n\r\n                {%- set order_by_str = \"{} {}\".format(dbtvault.escape_column_names(column_name), direction) | trim -%}\r\n            {%- endif -%}\r\n\r\n            {%- if dbtvault.is_list(partition_by) -%}\r\n                {%- set partition_by_str = dbtvault.escape_column_names(partition_by) | join(\", \") -%}\r\n            {%- else -%}\r\n                {%- set partition_by_str = dbtvault.escape_column_names(partition_by) -%}\r\n            {%- endif -%}\r\n\r\n            {{- \"{} OVER (PARTITION BY {} ORDER BY {}) AS {}\".format(rank_type, partition_by_str, order_by_str, dbtvault.escape_column_names(col)) | indent(4) -}}\r\n\r\n        {%- endif -%}\r\n\r\n        {{- \",\\n\" if not loop.last -}}\r\n    {%- endfor -%}\r\n\r\n{%- endif %}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.is_nothing", "macro.dbtvault.is_list", "macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.819404, "supported_languages": null}, "macro.dbtvault.source_columns": {"name": "source_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\staging\\source_columns.sql", "original_file_path": "macros\\staging\\source_columns.sql", "unique_id": "macro.dbtvault.source_columns", "macro_sql": "{%- macro source_columns(source_relation=none) -%}\r\n\r\n    {%- if source_relation -%}\r\n        {%- set source_model_cols = adapter.get_columns_in_relation(source_relation) -%}\r\n\r\n        {%- set column_list = [] -%}\r\n\r\n        {%- for source_col in source_model_cols -%}\r\n            {%- do column_list.append(source_col.column) -%}\r\n        {%- endfor -%}\r\n\r\n        {%- do return(column_list) -%}\r\n    {%- endif %}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.819404, "supported_languages": null}, "macro.dbtvault.stage": {"name": "stage", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\staging\\stage.sql", "original_file_path": "macros\\staging\\stage.sql", "unique_id": "macro.dbtvault.stage", "macro_sql": "{%- macro stage(include_source_columns=none, source_model=none, hashed_columns=none, derived_columns=none, null_columns=none, ranked_columns=none) -%}\r\n\r\n    {%- if include_source_columns is none -%}\r\n        {%- set include_source_columns = true -%}\r\n    {%- endif -%}\r\n\r\n    {{- dbtvault.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('stage', 'dbtvault')(include_source_columns=include_source_columns,\r\n                                              source_model=source_model,\r\n                                              hashed_columns=hashed_columns,\r\n                                              derived_columns=derived_columns,\r\n                                              null_columns=null_columns,\r\n                                              ranked_columns=ranked_columns\r\n                                              ) -}}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__stage"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8272145, "supported_languages": null}, "macro.dbtvault.default__stage": {"name": "default__stage", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\staging\\stage.sql", "original_file_path": "macros\\staging\\stage.sql", "unique_id": "macro.dbtvault.default__stage", "macro_sql": "{%- macro default__stage(include_source_columns, source_model, hashed_columns, derived_columns, null_columns, ranked_columns) -%}\r\n\r\n{% if (source_model is none) and execute %}\r\n\r\n    {%- set error_message -%}\r\n    Staging error: Missing source_model configuration. A source model name must be provided.\r\n    e.g.\r\n    [REF STYLE]\r\n    source_model: model_name\r\n    OR\r\n    [SOURCES STYLE]\r\n    source_model:\r\n        source_name: source_table_name\r\n    {%- endset -%}\r\n\r\n    {{- exceptions.raise_compiler_error(error_message) -}}\r\n{%- endif -%}\r\n\r\n{#- Check for source format or ref format and create\r\nrelation object from source_model -#}\r\n{% if source_model is mapping and source_model is not none -%}\r\n\r\n    {%- set source_name = source_model | first -%}\r\n    {%- set source_table_name = source_model[source_name] -%}\r\n\r\n    {%- set source_relation = source(source_name, source_table_name) -%}\r\n    {%- set all_source_columns = dbtvault.source_columns(source_relation=source_relation) -%}\r\n{%- elif source_model is not mapping and source_model is not none -%}\r\n\r\n    {%- set source_relation = ref(source_model) -%}\r\n    {%- set all_source_columns = dbtvault.source_columns(source_relation=source_relation) -%}\r\n{%- else -%}\r\n\r\n    {%- set all_source_columns = [] -%}\r\n{%- endif -%}\r\n\r\n{%- set derived_column_names = dbtvault.extract_column_names(derived_columns) | map('upper') | list -%}\r\n{%- set null_column_names = dbtvault.extract_null_column_names(null_columns) | map('upper') | list -%}\r\n{%- set hashed_column_names = dbtvault.extract_column_names(hashed_columns) | map('upper') | list -%}\r\n{%- set ranked_column_names = dbtvault.extract_column_names(ranked_columns) | map('upper') | list -%}\r\n{%- set exclude_column_names = derived_column_names + null_column_names + hashed_column_names | map('upper') | list -%}\r\n{%- set source_and_derived_column_names = (all_source_columns + derived_column_names) | map('upper') | unique | list -%}\r\n\r\n{%- set source_columns_to_select = dbtvault.process_columns_to_select(all_source_columns, exclude_column_names) -%}\r\n{%- set derived_columns_to_select = dbtvault.process_columns_to_select(source_and_derived_column_names, null_column_names + hashed_column_names) | unique | list -%}\r\n{%- set derived_and_null_columns_to_select = dbtvault.process_columns_to_select(source_and_derived_column_names + null_column_names, hashed_column_names) | unique | list -%}\r\n{%- set final_columns_to_select = [] -%}\r\n\r\n{#- Include source columns in final column selection if true -#}\r\n{%- if include_source_columns -%}\r\n    {%- if dbtvault.is_nothing(derived_columns)\r\n           and dbtvault.is_nothing(null_columns)\r\n           and dbtvault.is_nothing(hashed_columns)\r\n           and dbtvault.is_nothing(ranked_columns) -%}\r\n        {%- set final_columns_to_select = final_columns_to_select + all_source_columns -%}\r\n    {%- else -%}\r\n        {#- Only include non-overriden columns if not just source columns -#}\r\n        {%- set final_columns_to_select = final_columns_to_select + source_columns_to_select -%}\r\n    {%- endif -%}\r\n{%- endif %}\r\n\r\nWITH source_data AS (\r\n\r\n    SELECT\r\n\r\n    {{- \"\\n\\n    \" ~ dbtvault.print_list(dbtvault.escape_column_names(all_source_columns)) if all_source_columns else \" *\" }}\r\n\r\n    FROM {{ source_relation }}\r\n    {%- set last_cte = \"source_data\" %}\r\n)\r\n\r\n{%- if dbtvault.is_something(derived_columns) -%},\r\n\r\nderived_columns AS (\r\n\r\n    SELECT\r\n\r\n    {{ dbtvault.derive_columns(source_relation=source_relation, columns=derived_columns) | indent(4) }}\r\n\r\n    FROM {{ last_cte }}\r\n    {%- set last_cte = \"derived_columns\" -%}\r\n    {%- set final_columns_to_select = final_columns_to_select + derived_column_names %}\r\n)\r\n{%- endif -%}\r\n\r\n{% if dbtvault.is_something(null_columns) -%},\r\n\r\nnull_columns AS (\r\n\r\n    SELECT\r\n\r\n    {{ dbtvault.print_list(dbtvault.escape_column_names(derived_columns_to_select)) }}{{\",\" if dbtvault.is_something(derived_columns_to_select) else \"\"}}\r\n\r\n    {{ dbtvault.null_columns(source_relation=none, columns=null_columns) | indent(4) }}\r\n\r\n    FROM {{ last_cte }}\r\n    {%- set last_cte = \"null_columns\" -%}\r\n    {%- set final_columns_to_select = final_columns_to_select + null_column_names %}\r\n)\r\n{%- endif -%}\r\n\r\n\r\n{% if dbtvault.is_something(hashed_columns) -%},\r\n\r\nhashed_columns AS (\r\n\r\n    SELECT\r\n\r\n    {{ dbtvault.print_list(dbtvault.escape_column_names(derived_and_null_columns_to_select)) }},\r\n\r\n    {% set processed_hash_columns = dbtvault.process_hash_column_excludes(hashed_columns, all_source_columns) -%}\r\n    {{- dbtvault.hash_columns(columns=processed_hash_columns) | indent(4) }}\r\n\r\n    FROM {{ last_cte }}\r\n    {%- set last_cte = \"hashed_columns\" -%}\r\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\r\n)\r\n{%- endif -%}\r\n\r\n{% if dbtvault.is_something(ranked_columns) -%},\r\n\r\nranked_columns AS (\r\n\r\n    SELECT *,\r\n\r\n    {{ dbtvault.rank_columns(columns=ranked_columns) | indent(4) if dbtvault.is_something(ranked_columns) }}\r\n\r\n    FROM {{ last_cte }}\r\n    {%- set last_cte = \"ranked_columns\" -%}\r\n    {%- set final_columns_to_select = final_columns_to_select + ranked_column_names %}\r\n)\r\n{%- endif -%}\r\n\r\n,\r\n\r\ncolumns_to_select AS (\r\n\r\n    SELECT\r\n\r\n    {{ dbtvault.print_list(dbtvault.escape_column_names(final_columns_to_select | unique | list)) }}\r\n\r\n    FROM {{ last_cte }}\r\n)\r\n\r\nSELECT * FROM columns_to_select\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.source_columns", "macro.dbtvault.extract_column_names", "macro.dbtvault.extract_null_column_names", "macro.dbtvault.process_columns_to_select", "macro.dbtvault.is_nothing", "macro.dbtvault.print_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.is_something", "macro.dbtvault.derive_columns", "macro.dbtvault.null_columns", "macro.dbtvault.process_hash_column_excludes", "macro.dbtvault.hash_columns", "macro.dbtvault.rank_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8351717, "supported_languages": null}, "macro.dbtvault.as_of_date_window": {"name": "as_of_date_window", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\as_of_date_window.sql", "original_file_path": "macros\\supporting\\as_of_date_window.sql", "unique_id": "macro.dbtvault.as_of_date_window", "macro_sql": "{%- macro as_of_date_window(src_pk, src_ldts, stage_tables_ldts, source_model) -%}\r\n\r\nlast_safe_load_datetime AS (\r\n    SELECT MIN(LOAD_DATETIME) AS LAST_SAFE_LOAD_DATETIME\r\n    FROM (\r\n\r\n        {% for stg in stage_tables_ldts -%}\r\n            {%- set stage_ldts = stage_tables_ldts[stg] -%}\r\n            SELECT MIN({{ stage_ldts }}) AS LOAD_DATETIME FROM {{ ref(stg) }}\r\n            {% if not loop.last %} UNION ALL {% endif %}\r\n        {% endfor -%}\r\n\r\n    ) AS l\r\n),\r\n\r\nas_of_grain_old_entries AS (\r\n    SELECT DISTINCT AS_OF_DATE\r\n    FROM {{ this }}\r\n),\r\n\r\nas_of_grain_lost_entries AS (\r\n    SELECT a.AS_OF_DATE\r\n    FROM as_of_grain_old_entries AS a\r\n    LEFT OUTER JOIN as_of_dates AS b\r\n        ON a.AS_OF_DATE = b.AS_OF_DATE\r\n    WHERE b.AS_OF_DATE IS NULL\r\n),\r\n\r\nas_of_grain_new_entries AS (\r\n    SELECT a.AS_OF_DATE\r\n    FROM as_of_dates AS a\r\n    LEFT OUTER JOIN as_of_grain_old_entries AS b\r\n        ON a.AS_OF_DATE = b.AS_OF_DATE\r\n    WHERE b.AS_OF_DATE IS NULL\r\n),\r\n\r\nmin_date AS (\r\n    SELECT MIN(AS_OF_DATE) AS MIN_DATE\r\n    FROM as_of_dates\r\n),\r\n\r\nbackfill_as_of AS (\r\n    SELECT AS_OF_DATE\r\n    FROM as_of_dates AS a\r\n\r\n    {% if target.type == \"bigquery\" -%}\r\n    INNER JOIN last_safe_load_datetime as l\r\n    ON a.AS_OF_DATE < l.LAST_SAFE_LOAD_DATETIME\r\n    {% else %}\r\n    WHERE a.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\r\n    {%- endif %}\r\n),\r\n\r\nnew_rows_pks AS (\r\n    SELECT {{ dbtvault.prefix([src_pk], 'h') }}\r\n    FROM {{ source_model }} AS h\r\n\r\n    {% if target.type == \"bigquery\" -%}\r\n    INNER JOIN last_safe_load_datetime as l\r\n    ON h.{{ src_ldts }} >= l.LAST_SAFE_LOAD_DATETIME\r\n    {% else %}\r\n    WHERE h.{{ src_ldts }} >= (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\r\n    {%- endif %}\r\n),\r\n\r\nnew_rows_as_of AS (\r\n    SELECT AS_OF_DATE\r\n    FROM as_of_dates AS a\r\n    {% if target.type == \"bigquery\" -%}\r\n    INNER JOIN last_safe_load_datetime as l\r\n    ON a.AS_OF_DATE >= l.LAST_SAFE_LOAD_DATETIME\r\n    UNION DISTINCT\r\n    {% else %}\r\n    WHERE a.AS_OF_DATE >= (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\r\n    UNION\r\n    {%- endif %}\r\n    SELECT as_of_date\r\n    FROM as_of_grain_new_entries\r\n),\r\n\r\noverlap_pks AS (\r\n    SELECT a.*\r\n    FROM {{ this }} AS a\r\n    INNER JOIN {{ source_model }} as b\r\n        ON {{ dbtvault.multikey(src_pk, prefix=['a','b'], condition='=') }}\r\n    {% if target.type == \"bigquery\" -%}\r\n    INNER JOIN min_date\r\n    ON 1 = 1\r\n    INNER JOIN last_safe_load_datetime\r\n    ON 1 = 1\r\n\tLEFT OUTER JOIN as_of_grain_lost_entries\r\n\tON a.AS_OF_DATE = as_of_grain_lost_entries.AS_OF_DATE\r\n    WHERE a.AS_OF_DATE >= min_date.MIN_DATE\r\n        AND a.AS_OF_DATE < last_safe_load_datetime.LAST_SAFE_LOAD_DATETIME\r\n\t\tAND as_of_grain_lost_entries.AS_OF_DATE IS NULL\r\n    {% else %}\r\n    WHERE a.AS_OF_DATE >= (SELECT MIN_DATE FROM min_date)\r\n        AND a.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\r\n        AND a.AS_OF_DATE NOT IN (SELECT AS_OF_DATE FROM as_of_grain_lost_entries)\r\n    {%- endif %}\r\n),\r\n\r\noverlap_as_of AS (\r\n    SELECT p.AS_OF_DATE\r\n    FROM as_of_dates AS p\r\n    {% if target.type == \"bigquery\" -%}\r\n    INNER JOIN min_date\r\n    ON 1 = 1\r\n    INNER JOIN last_safe_load_datetime\r\n    ON 1 = 1\r\n\tLEFT OUTER JOIN as_of_grain_lost_entries\r\n\tON p.AS_OF_DATE = as_of_grain_lost_entries.AS_OF_DATE\r\n    WHERE p.AS_OF_DATE >= min_date.MIN_DATE\r\n        AND p.AS_OF_DATE < last_safe_load_datetime.LAST_SAFE_LOAD_DATETIME\r\n\t\tAND as_of_grain_lost_entries.AS_OF_DATE IS NULL\r\n    {% else %}\r\n    WHERE p.AS_OF_DATE >= (SELECT MIN_DATE FROM min_date)\r\n        AND p.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\r\n        AND p.AS_OF_DATE NOT IN (SELECT AS_OF_DATE FROM as_of_grain_lost_entries)\r\n    {% endif %}\r\n)\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.prefix", "macro.dbtvault.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8432934, "supported_languages": null}, "macro.dbtvault.bridge_overlap_and_new_rows": {"name": "bridge_overlap_and_new_rows", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\bridge_shared.sql", "original_file_path": "macros\\supporting\\bridge_shared.sql", "unique_id": "macro.dbtvault.bridge_overlap_and_new_rows", "macro_sql": "{%- macro bridge_overlap_and_new_rows(src_pk, bridge_walk, source_model, new_as_of_dates_cte) -%}\r\n\r\nSELECT\r\n    {{ dbtvault.prefix([src_pk], 'a') }},\r\n    b.AS_OF_DATE,\r\n    {%- for bridge_step in bridge_walk.keys() -%}\r\n        {%- set link_table = bridge_walk[bridge_step]['link_table'] -%}\r\n        {%- set eff_sat_table = bridge_walk[bridge_step]['eff_sat_table'] -%}\r\n\r\n        {%- set link_pk = dbtvault.escape_column_names(bridge_walk[bridge_step]['link_pk']) -%}\r\n\r\n        {%- set bridge_link_pk = dbtvault.escape_column_names(bridge_walk[bridge_step]['bridge_link_pk']) -%}\r\n        {%- set bridge_end_date = dbtvault.escape_column_names(bridge_walk[bridge_step]['bridge_end_date']) -%}\r\n        {%- set bridge_load_date = dbtvault.escape_column_names(bridge_walk[bridge_step]['bridge_load_date']) -%}\r\n\r\n        {%- set eff_sat_end_date = dbtvault.escape_column_names(bridge_walk[bridge_step]['eff_sat_end_date']) -%}\r\n        {%- set eff_sat_load_date = dbtvault.escape_column_names(bridge_walk[bridge_step]['eff_sat_load_date']) %}\r\n\r\n        {{- '\\n   ' }} {{ link_table | lower }}.{{ link_pk }} AS {{ bridge_link_pk }},\r\n        {{- '\\n   ' }} {{ eff_sat_table | lower }}.{{ eff_sat_end_date }} AS {{ bridge_end_date }},\r\n        {{- '\\n   ' }} {{ eff_sat_table | lower }}.{{ eff_sat_load_date }} AS {{ bridge_load_date }}\r\n\r\n        {%- if not loop.last %}, {%- endif -%}\r\n\r\n    {% endfor -%}\r\n\r\n    FROM {{ source_model }} AS a\r\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\r\n        ON (1=1)\r\n\r\n    {%- set loop_vars = namespace(last_link = '', last_link_fk = '') %}\r\n    {%- for bridge_step in bridge_walk.keys() -%}\r\n\r\n        {%- set current_link = bridge_walk[bridge_step]['link_table'] -%}\r\n        {%- set current_eff_sat = bridge_walk[bridge_step]['eff_sat_table'] -%}\r\n\r\n        {%- set link_pk = dbtvault.escape_column_names(bridge_walk[bridge_step]['link_pk']) -%}\r\n        {%- set link_fk1 = dbtvault.escape_column_names(bridge_walk[bridge_step]['link_fk1']) -%}\r\n        {%- set link_fk2 = dbtvault.escape_column_names(bridge_walk[bridge_step]['link_fk2']) -%}\r\n\r\n        {%- set eff_sat_pk = dbtvault.escape_column_names(bridge_walk[bridge_step]['eff_sat_pk']) -%}\r\n        {%- set eff_sat_load_date = dbtvault.escape_column_names(bridge_walk[bridge_step]['eff_sat_load_date']) -%}\r\n\r\n    {%- if loop.first %}\r\n    LEFT JOIN {{ ref(current_link) }} AS {{ current_link | lower }}\r\n        ON {{ dbtvault.multikey(src_pk, prefix=['a', current_link | lower], condition='=') }}\r\n    {%- else %}\r\n    LEFT JOIN {{ ref(current_link) }} AS {{ current_link | lower }}\r\n        ON {{ loop_vars.last_link }}.{{ loop_vars.last_link_fk2 }} = {{ current_link | lower }}.{{ link_fk1 }}\r\n    {%- endif %}\r\n    INNER JOIN {{ ref(current_eff_sat) }} AS {{ current_eff_sat | lower }}\r\n        ON {{ current_eff_sat | lower }}.{{ eff_sat_pk }} = {{ current_link | lower }}.{{ link_pk }}\r\n        AND {{ current_eff_sat | lower }}.{{ eff_sat_load_date }} <= b.AS_OF_DATE\r\n        {%- set loop_vars.last_link = current_link | lower -%}\r\n        {%- set loop_vars.last_link_fk2 = link_fk2 -%}\r\n    {% endfor %}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.prefix", "macro.dbtvault.escape_column_names", "macro.dbtvault.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8513308, "supported_languages": null}, "macro.dbtvault.cast_binary": {"name": "cast_binary", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\cast_binary.sql", "original_file_path": "macros\\supporting\\cast_binary.sql", "unique_id": "macro.dbtvault.cast_binary", "macro_sql": "{%- macro cast_binary(column_str, alias=none) -%}\r\n    {{ return(adapter.dispatch('cast_binary', 'dbtvault')(column_str=column_str, alias=alias)) }}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.default__cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8595133, "supported_languages": null}, "macro.dbtvault.default__cast_binary": {"name": "default__cast_binary", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\cast_binary.sql", "original_file_path": "macros\\supporting\\cast_binary.sql", "unique_id": "macro.dbtvault.default__cast_binary", "macro_sql": "{%- macro default__cast_binary(column_str, alias=none) -%}\r\n\r\n    CAST('{{ column_str }}' AS {{ dbtvault.type_binary() }}) {% if alias %} AS {{ alias }} {%- endif %}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.type_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8595133, "supported_languages": null}, "macro.dbtvault.sqlserver__cast_binary": {"name": "sqlserver__cast_binary", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\cast_binary.sql", "original_file_path": "macros\\supporting\\cast_binary.sql", "unique_id": "macro.dbtvault.sqlserver__cast_binary", "macro_sql": "{%- macro sqlserver__cast_binary(column_str, alias=none) -%}\r\n\r\n    CONVERT({{ dbtvault.type_binary() }}, '{{ column_str }}', 2) {% if alias %} AS {{ alias }} {%- endif %}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.type_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8595133, "supported_languages": null}, "macro.dbtvault.bigquery__cast_binary": {"name": "bigquery__cast_binary", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\cast_binary.sql", "original_file_path": "macros\\supporting\\cast_binary.sql", "unique_id": "macro.dbtvault.bigquery__cast_binary", "macro_sql": "{%- macro bigquery__cast_binary(column_str, alias=none) -%}\r\n\r\n    {{ dbtvault.default__cast_binary(column_str=column_str, alias=alias) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8595133, "supported_languages": null}, "macro.dbtvault.cast_date": {"name": "cast_date", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\cast_date.sql", "original_file_path": "macros\\supporting\\cast_date.sql", "unique_id": "macro.dbtvault.cast_date", "macro_sql": "{%- macro cast_date(column_str, as_string=false, datetime=false, alias=none) -%}\r\n    {{ return(adapter.dispatch('cast_date', 'dbtvault')(column_str=column_str, as_string=as_string, datetime=datetime, alias=alias)) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.snowflake__cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8595133, "supported_languages": null}, "macro.dbtvault.snowflake__cast_date": {"name": "snowflake__cast_date", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\cast_date.sql", "original_file_path": "macros\\supporting\\cast_date.sql", "unique_id": "macro.dbtvault.snowflake__cast_date", "macro_sql": "{%- macro snowflake__cast_date(column_str, as_string=false, datetime=false, alias=none) -%}\r\n\r\n    {%- if datetime -%}\r\n        {%- if not as_string -%}\r\n            TO_DATETIME({{ column_str }})\r\n        {%- else -%}\r\n            TO_DATETIME('{{ column_str }}')\r\n        {%- endif -%}\r\n    {%- else -%}\r\n        {%- if not as_string -%}\r\n            TO_DATE({{ column_str }})\r\n        {%- else -%}\r\n            TO_DATE('{{ column_str }}')\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n    {%- if alias %} AS {{ alias }} {%- endif %}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8595133, "supported_languages": null}, "macro.dbtvault.sqlserver__cast_date": {"name": "sqlserver__cast_date", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\cast_date.sql", "original_file_path": "macros\\supporting\\cast_date.sql", "unique_id": "macro.dbtvault.sqlserver__cast_date", "macro_sql": "{%- macro sqlserver__cast_date(column_str, as_string=false, datetime=false, alias=none) -%}\r\n\r\n    {%- if datetime -%}\r\n        {%- if not as_string -%}\r\n            CONVERT(DATETIME2, {{ column_str }})\r\n        {%- else -%}\r\n            CONVERT(DATETIME2, '{{ column_str }}')\r\n        {%- endif -%}\r\n    {%- else -%}\r\n        {%- if not as_string -%}\r\n            CONVERT(DATE, {{ column_str }})\r\n        {%- else -%}\r\n            CONVERT(DATE, '{{ column_str }}')\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n    {%- if alias %} AS {{ alias }} {%- endif %}\r\n\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8674562, "supported_languages": null}, "macro.dbtvault.bigquery__cast_date": {"name": "bigquery__cast_date", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\cast_date.sql", "original_file_path": "macros\\supporting\\cast_date.sql", "unique_id": "macro.dbtvault.bigquery__cast_date", "macro_sql": "{%- macro bigquery__cast_date(column_str, as_string=false, datetime=false, alias=none) -%}\r\n\r\n    {%- if datetime -%}\r\n        {%- if not as_string -%}\r\n            CAST(PARSE_DATETIME('%F %H:%M:%E6S', {{ column_str }}))\r\n        {%- else -%}\r\n            CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ column_str }}'))\r\n        {%- endif -%}\r\n    {%- else -%}\r\n        {%- if not as_string -%}\r\n            DATE({{ column_str }})\r\n        {%- else -%}\r\n            DATE('{{ column_str }}')\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n    {%- if alias %} AS {{ alias }} {%- endif %}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8674562, "supported_languages": null}, "macro.dbtvault.databricks__cast_date": {"name": "databricks__cast_date", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\cast_date.sql", "original_file_path": "macros\\supporting\\cast_date.sql", "unique_id": "macro.dbtvault.databricks__cast_date", "macro_sql": "{%- macro databricks__cast_date(column_str, as_string=false, datetime=false, alias=none) -%}\r\n\r\n    {{ dbtvault.snowflake__cast_date(column_str=column_str, as_string=as_string, datetime=datetime, alias=alias)}}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.snowflake__cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8674562, "supported_languages": null}, "macro.dbtvault.postgres__cast_date": {"name": "postgres__cast_date", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\cast_date.sql", "original_file_path": "macros\\supporting\\cast_date.sql", "unique_id": "macro.dbtvault.postgres__cast_date", "macro_sql": "{%- macro postgres__cast_date(column_str, as_string=false, datetime=false, alias=none) -%}\r\n\r\n    {{ dbtvault.snowflake__cast_date(column_str=column_str, as_string=as_string, datetime=datetime, alias=alias)}}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.snowflake__cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8674562, "supported_languages": null}, "macro.dbtvault.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\current_timestamp.sql", "original_file_path": "macros\\supporting\\current_timestamp.sql", "unique_id": "macro.dbtvault.current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\r\n  {{ return(adapter.dispatch('current_timestamp', 'dbtvault')()) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8674562, "supported_languages": null}, "macro.dbtvault.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\current_timestamp.sql", "original_file_path": "macros\\supporting\\current_timestamp.sql", "unique_id": "macro.dbtvault.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\r\n    {{ dbt_utils.current_timestamp() }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8674562, "supported_languages": null}, "macro.dbtvault.sqlserver__current_timestamp": {"name": "sqlserver__current_timestamp", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\current_timestamp.sql", "original_file_path": "macros\\supporting\\current_timestamp.sql", "unique_id": "macro.dbtvault.sqlserver__current_timestamp", "macro_sql": "{% macro sqlserver__current_timestamp() %}\r\n    sysdatetime()\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8674562, "supported_languages": null}, "macro.dbtvault.current_timestamp_in_utc": {"name": "current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\current_timestamp.sql", "original_file_path": "macros\\supporting\\current_timestamp.sql", "unique_id": "macro.dbtvault.current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\r\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbtvault')()) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8674562, "supported_languages": null}, "macro.dbtvault.default__current_timestamp_in_utc": {"name": "default__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\current_timestamp.sql", "original_file_path": "macros\\supporting\\current_timestamp.sql", "unique_id": "macro.dbtvault.default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\r\n    {{ dbt_utils.current_timestamp_in_utc() }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8674562, "supported_languages": null}, "macro.dbtvault.sqlserver__current_timestamp_in_utc": {"name": "sqlserver__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\current_timestamp.sql", "original_file_path": "macros\\supporting\\current_timestamp.sql", "unique_id": "macro.dbtvault.sqlserver__current_timestamp_in_utc", "macro_sql": "{% macro sqlserver__current_timestamp_in_utc() %}\r\n    sysutcdatetime()\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8674562, "supported_languages": null}, "macro.dbtvault.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\datatypes.sql", "original_file_path": "macros\\supporting\\datatypes.sql", "unique_id": "macro.dbtvault.type_timestamp", "macro_sql": "{%- macro type_timestamp() -%}\r\n  {{- return(adapter.dispatch('type_timestamp', 'dbtvault')()) -}}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8674562, "supported_languages": null}, "macro.dbtvault.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\datatypes.sql", "original_file_path": "macros\\supporting\\datatypes.sql", "unique_id": "macro.dbtvault.default__type_timestamp", "macro_sql": "{%- macro default__type_timestamp() -%}\r\n    TIMESTAMP_NTZ\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8674562, "supported_languages": null}, "macro.dbtvault.sqlserver__type_timestamp": {"name": "sqlserver__type_timestamp", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\datatypes.sql", "original_file_path": "macros\\supporting\\datatypes.sql", "unique_id": "macro.dbtvault.sqlserver__type_timestamp", "macro_sql": "{%- macro sqlserver__type_timestamp() -%}\r\n    DATETIME2\r\n{%- endmacro -%}\r\n\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8674562, "supported_languages": null}, "macro.dbtvault.type_binary": {"name": "type_binary", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\datatypes.sql", "original_file_path": "macros\\supporting\\datatypes.sql", "unique_id": "macro.dbtvault.type_binary", "macro_sql": "{%- macro type_binary() -%}\r\n  {{- return(adapter.dispatch('type_binary', 'dbtvault')()) -}}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.default__type_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8674562, "supported_languages": null}, "macro.dbtvault.default__type_binary": {"name": "default__type_binary", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\datatypes.sql", "original_file_path": "macros\\supporting\\datatypes.sql", "unique_id": "macro.dbtvault.default__type_binary", "macro_sql": "{%- macro default__type_binary() -%}\r\n    {%- if var('hash') == 'MD5' -%}\r\n    BINARY(16)\r\n    {%- elif var('hash') == 'SHA' -%}\r\n    BINARY(32)\r\n    {%- endif -%}\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8674562, "supported_languages": null}, "macro.dbtvault.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\get_query_results_as_dict.sql", "original_file_path": "macros\\supporting\\get_query_results_as_dict.sql", "unique_id": "macro.dbtvault.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\r\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbtvault')(query)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8674562, "supported_languages": null}, "macro.dbtvault.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\get_query_results_as_dict.sql", "original_file_path": "macros\\supporting\\get_query_results_as_dict.sql", "unique_id": "macro.dbtvault.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\r\n    {%- set query_results = dbt_utils.get_query_results_as_dict(query) -%}\r\n    {%- set query_results_processed = {} -%}\r\n\r\n    {% for k, v in query_results.items() %}\r\n        {% do query_results_processed.update({k.upper(): v}) %}\r\n    {% endfor %}\r\n\r\n    {{ return(query_results_processed) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8757286, "supported_languages": null}, "macro.dbtvault.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "unique_id": "macro.dbtvault.hash", "macro_sql": "{%- macro hash(columns=none, alias=none, is_hashdiff=false) -%}\r\n\r\n    {%- if is_hashdiff is none -%}\r\n        {%- set is_hashdiff = false -%}\r\n    {%- endif -%}\r\n\r\n    {{- adapter.dispatch('hash', 'dbtvault')(columns=columns, alias=alias, is_hashdiff=is_hashdiff) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8871346, "supported_languages": null}, "macro.dbtvault.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "unique_id": "macro.dbtvault.default__hash", "macro_sql": "\r\n\r\n{%- macro default__hash(columns, alias, is_hashdiff) -%}\r\n\r\n{%- set hash = var('hash', 'MD5') -%}\r\n{%- set concat_string = var('concat_string', '||') -%}\r\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\r\n\r\n{#- Select hashing algorithm -#}\r\n{%- if hash == 'MD5' -%}\r\n    {%- set hash_alg = 'MD5_BINARY' -%}\r\n    {%- set hash_size = 16 -%}\r\n{%- elif hash == 'SHA' -%}\r\n    {%- set hash_alg = 'SHA2_BINARY' -%}\r\n    {%- set hash_size = 32 -%}\r\n{%- else -%}\r\n    {%- set hash_alg = 'MD5_BINARY' -%}\r\n    {%- set hash_size = 16 -%}\r\n{%- endif -%}\r\n\r\n{%- set standardise = \"NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS VARCHAR))), '')\" %}\r\n\r\n{#- Alpha sort columns before hashing if a hashdiff -#}\r\n{%- if is_hashdiff and dbtvault.is_list(columns) -%}\r\n    {%- set columns = columns|sort -%}\r\n{%- endif -%}\r\n\r\n{#- If single column to hash -#}\r\n{%- if columns is string -%}\r\n    {%- set column_str = dbtvault.as_constant(columns) -%}\r\n    {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n    {{- \"CAST(({}({})) AS BINARY({})) AS {}\".format(hash_alg, standardise | replace('[EXPRESSION]', escaped_column_str), hash_size, dbtvault.escape_column_names(alias)) | indent(4) -}}\r\n\r\n{#- Else a list of columns to hash -#}\r\n{%- else -%}\r\n    {%- set all_null = [] -%}\r\n\r\n    {%- if is_hashdiff -%}\r\n        {{- \"CAST({}(CONCAT_WS('{}',\".format(hash_alg, concat_string) | indent(4) -}}\r\n    {%- else -%}\r\n        {{- \"CAST({}(NULLIF(CONCAT_WS('{}',\".format(hash_alg, concat_string) | indent(4) -}}\r\n    {%- endif -%}\r\n\r\n    {%- for column in columns -%}\r\n\r\n        {%- do all_null.append(null_placeholder_string) -%}\r\n\r\n        {%- set column_str = dbtvault.as_constant(column) -%}\r\n        {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n        {{- \"\\nIFNULL({}, '{}')\".format(standardise | replace('[EXPRESSION]', escaped_column_str), null_placeholder_string) | indent(4) -}}\r\n        {{- \",\" if not loop.last -}}\r\n\r\n        {%- if loop.last -%}\r\n\r\n            {% if is_hashdiff %}\r\n                {{- \"\\n)) AS BINARY({})) AS {}\".format(hash_size, dbtvault.escape_column_names(alias)) -}}\r\n            {%- else -%}\r\n                {{- \"\\n), '{}')) AS BINARY({})) AS {}\".format(all_null | join(\"\"), hash_size, dbtvault.escape_column_names(alias)) -}}\r\n            {%- endif -%}\r\n        {%- else -%}\r\n\r\n            {%- do all_null.append(concat_string) -%}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- endfor -%}\r\n\r\n{%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.as_constant", "macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8871346, "supported_languages": null}, "macro.dbtvault.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "unique_id": "macro.dbtvault.bigquery__hash", "macro_sql": "{%- macro bigquery__hash(columns, alias, is_hashdiff) -%}\r\n\r\n{%- set hash = var('hash', 'MD5') -%}\r\n{%- set concat_string = var('concat_string', '||') -%}\r\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\r\n\r\n{#- Select hashing algorithm -#}\r\n\r\n{%- if hash == 'MD5' -%}\r\n    {%- set hash_alg = 'MD5' -%}\r\n{%- elif hash == 'SHA' -%}\r\n    {%- set hash_alg = 'SHA256' -%}\r\n{%- endif -%}\r\n\r\n{%- set standardise = \"NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS STRING))), '')\" %}\r\n\r\n{#- Alpha sort columns before hashing if a hashdiff -#}\r\n{%- if is_hashdiff and dbtvault.is_list(columns) -%}\r\n    {%- set columns = columns|sort -%}\r\n{%- endif -%}\r\n\r\n{#- If single column to hash -#}\r\n{%- if columns is string -%}\r\n    {%- set column_str = dbtvault.as_constant(columns) -%}\r\n    {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n    {{- \"CAST(UPPER(TO_HEX({}({}))) AS STRING) AS {}\".format(hash_alg, standardise | replace('[EXPRESSION]', escaped_column_str), dbtvault.escape_column_names(alias)) | indent(4) -}}\r\n\r\n{#- Else a list of columns to hash -#}\r\n{%- else -%}\r\n {%- set all_null = [] -%}\r\n    {%- if is_hashdiff -%}\r\n        {{- \"UPPER(TO_HEX({}(CONCAT(\".format(hash_alg) | indent(4) -}}\r\n\r\n    {%- else -%}\r\n        {{- \"UPPER(TO_HEX({}(NULLIF(CONCAT(\".format(hash_alg) | indent(4) -}}\r\n    {%- endif -%}\r\n\r\n    {%- for column in columns -%}\r\n\r\n        {%- do all_null.append(null_placeholder_string) -%}\r\n\r\n        {%- set column_str = dbtvault.as_constant(column) -%}\r\n        {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n        {{- \"\\nIFNULL({}, '{}')\".format(standardise | replace('[EXPRESSION]', escaped_column_str), null_placeholder_string) | indent(4) -}}\r\n        {{- \",'{}',\".format(concat_string) if not loop.last -}}\r\n        {%- if loop.last -%}\r\n\r\n            {% if is_hashdiff %}\r\n                {{- \"\\n)))) AS {}\".format(dbtvault.escape_column_names(alias)) -}}\r\n            {%- else -%}\r\n                {{- \"\\n), '{}')))) AS {}\".format(all_null | join(\"\"), dbtvault.escape_column_names(alias)) -}}\r\n            {%- endif -%}\r\n        {%- else -%}\r\n\r\n            {%- do all_null.append(concat_string) -%}\r\n        {%- endif -%}\r\n\r\n    {%- endfor -%}\r\n\r\n{%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.as_constant", "macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8973515, "supported_languages": null}, "macro.dbtvault.sqlserver__hash": {"name": "sqlserver__hash", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "unique_id": "macro.dbtvault.sqlserver__hash", "macro_sql": "{%- macro sqlserver__hash(columns, alias, is_hashdiff) -%}\r\n\r\n{%- set hash = var('hash', 'MD5') -%}\r\n{%- set concat_string = var('concat_string', '||') -%}\r\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\r\n\r\n{% if dbtvault.is_list(columns) and columns | length == 1 %}\r\n    {%- set columns = columns[0] -%}\r\n{% endif %}\r\n\r\n\r\n{#- Select hashing algorithm -#}\r\n{%- if hash == 'MD5' -%}\r\n    {%- set hash_alg = 'MD5' -%}\r\n    {%- set hash_size = 16 -%}\r\n{%- elif hash == 'SHA' -%}\r\n    {%- set hash_alg = 'SHA2_256' -%}\r\n    {%- set hash_size = 32 -%}\r\n{%- else -%}\r\n    {%- set hash_alg = 'MD5' -%}\r\n    {%- set hash_size = 16 -%}\r\n{%- endif -%}\r\n\r\n{%- set standardise = \"NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS VARCHAR(max)))), '')\" %}\r\n\r\n{#- Alpha sort columns before hashing if a hashdiff -#}\r\n{%- if is_hashdiff and dbtvault.is_list(columns) -%}\r\n    {%- set columns = columns|sort -%}\r\n{%- endif -%}\r\n\r\n{#- If single column to hash -#}\r\n{%- if columns is string -%}\r\n    {%- set column_str = dbtvault.as_constant(columns) -%}\r\n    {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n    {{- \"CAST(HASHBYTES('{}', {}) AS BINARY({})) AS {}\".format(hash_alg, standardise | replace('[EXPRESSION]', escaped_column_str), hash_size, dbtvault.escape_column_names(alias)) | indent(4) -}}\r\n\r\n{#- Else a list of columns to hash -#}\r\n{%- else -%}\r\n    {%- set all_null = [] -%}\r\n\r\n    {%- if is_hashdiff -%}\r\n        {{- \"CAST(HASHBYTES('{}', (CONCAT_WS('{}',\".format(hash_alg, concat_string) | indent(4) -}}\r\n    {%- else -%}\r\n        {{- \"CAST(HASHBYTES('{}', (NULLIF(CONCAT_WS('{}',\".format(hash_alg, concat_string) | indent(4) -}}\r\n    {%- endif -%}\r\n\r\n    {%- for column in columns -%}\r\n\r\n        {%- do all_null.append(null_placeholder_string) -%}\r\n\r\n        {%- set column_str = dbtvault.as_constant(column) -%}\r\n        {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n        {{- \"\\nISNULL({}, '{}')\".format(standardise | replace('[EXPRESSION]', escaped_column_str), null_placeholder_string) | indent(4) -}}\r\n        {{- \",\" if not loop.last -}}\r\n\r\n        {%- if loop.last -%}\r\n\r\n            {% if is_hashdiff %}\r\n                {{- \"\\n))) AS BINARY({})) AS {}\".format(hash_size, dbtvault.escape_column_names(alias)) -}}\r\n            {%- else -%}\r\n                {{- \"\\n), '{}'))) AS BINARY({})) AS {}\".format(all_null | join(\"\"), hash_size, dbtvault.escape_column_names(alias)) -}}\r\n            {%- endif -%}\r\n        {%- else -%}\r\n\r\n            {%- do all_null.append(concat_string) -%}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- endfor -%}\r\n\r\n{%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.as_constant", "macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.8973515, "supported_languages": null}, "macro.dbtvault.postgres__hash": {"name": "postgres__hash", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "unique_id": "macro.dbtvault.postgres__hash", "macro_sql": "{%- macro postgres__hash(columns, alias, is_hashdiff) -%}\r\n\r\n{%- set hash = var('hash', 'MD5') -%}\r\n{%- set concat_string = var('concat_string', '||') -%}\r\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\r\n\r\n{#- Select hashing algorithm -#}\r\n{%- if hash == 'MD5' -%}\r\n    {%- set hash_alg = 'MD5' -%}\r\n{%- elif hash == 'SHA' -%}\r\n    {%- set hash_alg = 'SHA256' -%}\r\n{%- else -%}\r\n    {%- set hash_alg = 'MD5' -%}\r\n{%- endif -%}\r\n\r\n{#- Select hashing expression (left and right sides) -#}\r\n{#- * MD5 is simple function call to md5(val) -#}\r\n{#- * SHA256 needs input cast to BYTEA and then its BYTEA result encoded as hex text output -#}\r\n{#-   e.g. ENCODE(SHA256(CAST(val AS BYTEA)), 'hex') -#}\r\n{#- Ref: https://www.postgresql.org/docs/11/functions-binarystring.html  -#}\r\n{%- if hash_alg == 'MD5' -%}\r\n    {%- set hash_expr_left = 'MD5(' -%}\r\n    {%- set hash_expr_right = ')' -%}\r\n{%- elif hash_alg == 'SHA256' -%}\r\n    {%- set hash_expr_left = 'ENCODE(SHA256(CAST(' -%}\r\n    {%- set hash_expr_right = \" AS BYTEA)), 'hex')\" -%}\r\n{%- endif -%}\r\n\r\n{%- set standardise = \"NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS VARCHAR))), '')\" -%}\r\n\r\n{#- Alpha sort columns before hashing if a hashdiff -#}\r\n{%- if is_hashdiff and dbtvault.is_list(columns) -%}\r\n    {%- set columns = columns|sort -%}\r\n{%- endif -%}\r\n\r\n{#- If single column to hash -#}\r\n{%- if columns is string -%}\r\n    {%- set column_str = dbtvault.as_constant(columns) -%}\r\n    {%- if dbtvault.is_expression(column_str) -%}\r\n        {%- set escaped_column_str = column_str -%}\r\n    {%- else -%}\r\n        {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n    {%- endif -%}\r\n\r\n    {{- \"CAST(UPPER({}{}{}) AS BYTEA) AS {}\".format(hash_expr_left, standardise | replace('[EXPRESSION]', escaped_column_str), hash_expr_right, dbtvault.escape_column_names(alias)) | indent(4) -}}\r\n\r\n{#- Else a list of columns to hash -#}\r\n{%- else -%}\r\n    {%- set all_null = [] -%}\r\n\r\n    {%- if is_hashdiff -%}\r\n        {{- \"CAST(UPPER({}CONCAT_WS('{}',\".format(hash_expr_left, concat_string) | indent(4) -}}\r\n    {%- else -%}\r\n        {{- \"CAST(UPPER({}NULLIF(CONCAT_WS('{}',\".format(hash_expr_left, concat_string) | indent(4) -}}\r\n    {%- endif -%}\r\n\r\n    {%- for column in columns -%}\r\n\r\n        {%- do all_null.append(null_placeholder_string) -%}\r\n\r\n        {%- set column_str = dbtvault.as_constant(column) -%}\r\n        {%- if dbtvault.is_expression(column_str) -%}\r\n            {%- set escaped_column_str = column_str -%}\r\n        {%- else -%}\r\n            {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n        {%- endif -%}\r\n\r\n        {{- \"\\nCOALESCE({}, '{}')\".format(standardise | replace('[EXPRESSION]', escaped_column_str), null_placeholder_string) | indent(4) -}}\r\n        {{- \",\" if not loop.last -}}\r\n\r\n        {%- if loop.last -%}\r\n\r\n            {% if is_hashdiff %}\r\n                {{- \"\\n){}) AS BYTEA) AS {}\".format(hash_expr_right, dbtvault.escape_column_names(alias)) -}}\r\n            {%- else -%}\r\n                {{- \"\\n), '{}'){}) AS BYTEA) AS {}\".format(all_null | join(\"\"), hash_expr_right, dbtvault.escape_column_names(alias)) -}}\r\n            {%- endif -%}\r\n        {%- else -%}\r\n\r\n            {%- do all_null.append(concat_string) -%}\r\n\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n\r\n{%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.as_constant", "macro.dbtvault.is_expression", "macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.907813, "supported_languages": null}, "macro.dbtvault.databricks__hash": {"name": "databricks__hash", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "unique_id": "macro.dbtvault.databricks__hash", "macro_sql": "{%- macro databricks__hash(columns, alias, is_hashdiff) -%}\r\n\r\n{%- set hash = var('hash', 'MD5') -%}\r\n{%- set concat_string = var('concat_string', '||') -%}\r\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\r\n\r\n{#- Select hashing algorithm -#}\r\n{%- if hash == 'MD5' -%}\r\n    {%- set hash_alg = 'MD5' -%}\r\n{%- elif hash == 'SHA' -%}\r\n    {%- set hash_alg = 'SHA2' -%}\r\n    {%- set bit_length = 256 -%}\r\n{%- else -%}\r\n    {%- set hash_alg = 'MD5' -%}\r\n{%- endif -%}\r\n\r\n{%- set standardise = \"NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS STRING))), '')\" %}\r\n\r\n{#- Alpha sort columns before hashing if a hashdiff -#}\r\n{%- if is_hashdiff and dbtvault.is_list(columns) -%}\r\n    {%- set columns = columns|sort -%}\r\n{%- endif -%}\r\n\r\n{#- If single column to hash -#}\r\n{%- if columns is string -%}\r\n    {%- set column_str = dbtvault.as_constant(columns) -%}\r\n    {%- if dbtvault.is_expression(column_str) -%}\r\n        {%- set escaped_column_str = column_str -%}\r\n    {%- else -%}\r\n        {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n    {%- endif -%}\r\n\r\n    {%- if hash_alg == \"MD5\" %}\r\n        {{- \"UPPER(MD5({})) AS {}\".format(standardise | replace('[EXPRESSION]', escaped_column_str), dbtvault.escape_column_names(alias)) | indent(4) -}}\r\n    {%- else %}\r\n        {{- \"UPPER(SHA2({}, {})) AS {}\".format(standardise | replace('[EXPRESSION]', escaped_column_str), bit_length, dbtvault.escape_column_names(alias)) | indent(4) -}}\r\n    {%- endif %}\r\n\r\n{#- Else a list of columns to hash -#}\r\n{%- else -%}\r\n    {%- set all_null = [] -%}\r\n\r\n    {%- if is_hashdiff -%}\r\n        {%- if hash_alg == \"MD5\" %}\r\n            {{- \"UPPER(MD5(CONCAT_WS('{}',\".format(concat_string) | indent(4) -}}\r\n        {%- else %}\r\n            {{- \"UPPER(SHA2(CONCAT_WS('{}',\".format(concat_string) | indent(4) -}}\r\n        {%- endif %}\r\n\r\n    {%- else -%}\r\n        {%- if hash_alg == \"MD5\" %}\r\n            {{- \"UPPER(MD5(NULLIF(CONCAT_WS('{}',\".format(concat_string) | indent(4) -}}\r\n        {%- else %}\r\n            {{- \"UPPER(SHA2(NULLIF(CONCAT_WS('{}',\".format(concat_string) | indent(4) -}}\r\n        {%- endif %}\r\n    {%- endif -%}\r\n\r\n    {%- for column in columns -%}\r\n\r\n        {%- do all_null.append(null_placeholder_string) -%}\r\n\r\n        {%- set column_str = dbtvault.as_constant(column) -%}\r\n        {%- if dbtvault.is_expression(column_str) -%}\r\n            {%- set escaped_column_str = column_str -%}\r\n        {%- else -%}\r\n            {%- set escaped_column_str = dbtvault.escape_column_names(column_str) -%}\r\n        {%- endif -%}\r\n        {{- \"\\nIFNULL({}, '{}')\".format(standardise | replace('[EXPRESSION]', escaped_column_str), null_placeholder_string) | indent(4) -}}\r\n        {{- \",\" if not loop.last -}}\r\n\r\n        {%- if loop.last -%}\r\n\r\n            {% if is_hashdiff %}\r\n                {%- if hash_alg == \"MD5\" %}\r\n                    {{- \"\\n))) AS {}\".format(dbtvault.escape_column_names(alias)) -}}\r\n                {%- else %}\r\n                    {{- \"\\n), {})) AS {}\".format(bit_length, dbtvault.escape_column_names(alias)) -}}\r\n                {%- endif %}\r\n            {%- else -%}\r\n                {%- if hash_alg == \"MD5\" %}\r\n                    {{- \"\\n), '{}'))) AS {}\".format(all_null | join(\"\"), dbtvault.escape_column_names(alias)) -}}\r\n                {%- else %}\r\n                    {{- \"\\n), '{}'), {})) AS {}\".format(all_null | join(\"\"), bit_length, dbtvault.escape_column_names(alias)) -}}\r\n                {%- endif %}\r\n\r\n            {%- endif -%}\r\n        {%- else -%}\r\n\r\n            {%- do all_null.append(concat_string) -%}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- endfor -%}\r\n\r\n{%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.as_constant", "macro.dbtvault.is_expression", "macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.907813, "supported_languages": null}, "macro.dbtvault.max_datetime": {"name": "max_datetime", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\max_datetime.sql", "original_file_path": "macros\\supporting\\max_datetime.sql", "unique_id": "macro.dbtvault.max_datetime", "macro_sql": "{%- macro max_datetime() -%}\r\n\r\n    {%- do return(adapter.dispatch('max_datetime', 'dbtvault')()) -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__max_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.915847, "supported_languages": null}, "macro.dbtvault.default__max_datetime": {"name": "default__max_datetime", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\max_datetime.sql", "original_file_path": "macros\\supporting\\max_datetime.sql", "unique_id": "macro.dbtvault.default__max_datetime", "macro_sql": "\r\n\r\n{%- macro default__max_datetime() %}\r\n\r\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.999999')) -%}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.915847, "supported_languages": null}, "macro.dbtvault.sqlserver__max_datetime": {"name": "sqlserver__max_datetime", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\max_datetime.sql", "original_file_path": "macros\\supporting\\max_datetime.sql", "unique_id": "macro.dbtvault.sqlserver__max_datetime", "macro_sql": "{%- macro sqlserver__max_datetime() -%}\r\n\r\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.9999999')) -%}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.915847, "supported_languages": null}, "macro.dbtvault.bigquery__max_datetime": {"name": "bigquery__max_datetime", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\max_datetime.sql", "original_file_path": "macros\\supporting\\max_datetime.sql", "unique_id": "macro.dbtvault.bigquery__max_datetime", "macro_sql": "{%- macro bigquery__max_datetime() -%}\r\n\r\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.999999')) -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.915847, "supported_languages": null}, "macro.dbtvault.prefix": {"name": "prefix", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\prefix.sql", "original_file_path": "macros\\supporting\\prefix.sql", "unique_id": "macro.dbtvault.prefix", "macro_sql": "{%- macro prefix(columns, prefix_str, alias_target) -%}\r\n\r\n    {{- adapter.dispatch('prefix', 'dbtvault')(columns=columns,\r\n                                               prefix_str=prefix_str,\r\n                                               alias_target=alias_target) -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.default__prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.9180288, "supported_languages": null}, "macro.dbtvault.default__prefix": {"name": "default__prefix", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\supporting\\prefix.sql", "original_file_path": "macros\\supporting\\prefix.sql", "unique_id": "macro.dbtvault.default__prefix", "macro_sql": "{%- macro default__prefix(columns=none, prefix_str=none, alias_target='source') -%}\r\n\r\n    {%- if columns and prefix_str -%}\r\n\r\n        {%- for col in columns -%}\r\n\r\n            {%- if col is mapping -%}\r\n\r\n                {%- if alias_target == 'source' -%}\r\n\r\n                    {{- dbtvault.prefix([col['source_column']], prefix_str) -}}\r\n\r\n                {%- elif alias_target == 'target' -%}\r\n\r\n                    {{- dbtvault.prefix([col['alias']], prefix_str) -}}\r\n\r\n                {%- else -%}\r\n\r\n                    {{- dbtvault.prefix([col['source_column']], prefix_str) -}}\r\n\r\n                {%- endif -%}\r\n\r\n                {%- if not loop.last -%} , {% endif %}\r\n\r\n            {%- else -%}\r\n\r\n                {%- if col is iterable and col is not string -%}\r\n\r\n                    {{- dbtvault.prefix(col, prefix_str) -}}\r\n\r\n                {%- elif col is not none -%}\r\n\r\n                    {{- prefix_str}}.{{col.strip() -}}\r\n                {% else %}\r\n\r\n                    {%- if execute -%}\r\n                        {{- exceptions.raise_compiler_error(\"Unexpected or missing configuration for '\" ~ this ~ \"' Unable to prefix columns.\") -}}\r\n                    {%- endif -%}\r\n                {%- endif -%}\r\n\r\n                {{- ', ' if not loop.last -}}\r\n\r\n            {%- endif -%}\r\n\r\n        {%- endfor -%}\r\n\r\n    {%- else -%}\r\n\r\n        {%- if execute -%}\r\n            {{- exceptions.raise_compiler_error(\"Invalid parameters provided to prefix macro. Expected: (columns [list/string], prefix_str [string]) got: (\" ~ columns ~ \", \" ~ prefix_str ~ \")\") -}}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.9180288, "supported_languages": null}, "macro.dbtvault.bigquery__bridge": {"name": "bigquery__bridge", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\bigquery\\bridge.sql", "original_file_path": "macros\\tables\\bigquery\\bridge.sql", "unique_id": "macro.dbtvault.bigquery__bridge", "macro_sql": "{%- macro bigquery__bridge(src_pk, as_of_dates_table, bridge_walk, stage_tables_ldts, src_extra_columns, src_ldts, source_model) -%}\r\n\r\n{{ dbtvault.default__bridge(src_pk=src_pk,\r\n                            as_of_dates_table=as_of_dates_table,\r\n                            bridge_walk=bridge_walk,\r\n                            stage_tables_ldts=stage_tables_ldts,\r\n                            src_extra_columns=src_extra_columns,\r\n                            src_ldts=src_ldts,\r\n                            source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.9180288, "supported_languages": null}, "macro.dbtvault.bigquery__eff_sat": {"name": "bigquery__eff_sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\bigquery\\eff_sat.sql", "original_file_path": "macros\\tables\\bigquery\\eff_sat.sql", "unique_id": "macro.dbtvault.bigquery__eff_sat", "macro_sql": "{%- macro bigquery__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source]) -%}\r\n{%- set fk_cols = dbtvault.expand_column_list(columns=[src_dfk, src_sfk]) -%}\r\n{%- set dfk_cols = dbtvault.expand_column_list(columns=[src_dfk]) -%}\r\n{%- set is_auto_end_dating = config.get('is_auto_end_dating', default=false) %}\r\n\r\n{%- set max_datetime = dbtvault.max_datetime() %}\r\n\r\nWITH source_data AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='source') }}\r\n    FROM {{ ref(source_model) }} AS a\r\n    WHERE {{ dbtvault.multikey(src_dfk, prefix='a', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(src_sfk, prefix='a', condition='IS NOT NULL') }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{%- if dbtvault.is_any_incremental() %}\r\n\r\n{# Selecting the most recent records for each link hashkey -#}\r\nlatest_records_unranked AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'b') }},\r\n           ROW_NUMBER() OVER (\r\n                PARTITION BY {{ dbtvault.prefix([src_pk], 'b') }}\r\n                ORDER BY b.{{ src_ldts }} DESC\r\n           ) AS row_num\r\n    FROM {{ this }} AS b\r\n),\r\n\r\nlatest_records AS (\r\n    SELECT *\r\n    FROM latest_records_unranked\r\n    WHERE row_num = 1\r\n),\r\n\r\n{# Selecting the open records of the most recent records for each link hashkey -#}\r\nlatest_open AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'c') }}\r\n    FROM latest_records AS c\r\n    WHERE DATE(c.{{ src_end_date }}) = CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ max_datetime }}') AS DATE)\r\n),\r\n\r\n{# Selecting the closed records of the most recent records for each link hashkey -#}\r\nlatest_closed AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'd') }}\r\n    FROM latest_records AS d\r\n    WHERE DATE(d.{{ src_end_date }}) != CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ max_datetime }}') AS DATE)\r\n),\r\n\r\n{# Identifying the completely new link relationships to be opened in eff sat -#}\r\nnew_open_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'f') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'f') }},\r\n        {% if dbtvault.is_something(src_extra_columns) %}\r\n            {{ dbtvault.prefix([src_extra_columns], 'f') }},\r\n        {% endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        f.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        f.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        f.{{ src_end_date }} AS {{ src_end_date }},\r\n        f.{{ src_eff }} AS {{ src_eff }},\r\n        f.{{ src_ldts }},\r\n        f.{{ src_source }}\r\n    FROM source_data AS f\r\n    LEFT JOIN latest_records AS lr\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['f','lr'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='lr', condition='IS NULL') }}\r\n),\r\n\r\n{# Identifying the currently closed link relationships to be reopened in eff sat -#}\r\nnew_reopened_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lc') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'lc') }},\r\n        {% if dbtvault.is_something(src_extra_columns) %}\r\n            {{ dbtvault.prefix([src_extra_columns], 'g') }},\r\n        {% endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        g.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        g.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        g.{{ src_end_date }} AS {{ src_end_date }},\r\n        g.{{ src_eff }} AS {{ src_eff }},\r\n        g.{{ src_ldts }},\r\n        g.{{ src_source }}\r\n    FROM source_data AS g\r\n    INNER JOIN latest_closed AS lc\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['g','lc'], condition='=') }}\r\n    WHERE CAST((g.{{ src_end_date }}) AS DATE) = CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ max_datetime }}') AS DATE)\r\n),\r\n\r\n{%- if is_auto_end_dating %}\r\n\r\n{# Creating the closing records -#}\r\n{# Identifying the currently open relationships that need to be closed due to change in SFK(s) -#}\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lo') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'lo') }},\r\n        {% if dbtvault.is_something(src_extra_columns) %}\r\n            {{ dbtvault.prefix([src_extra_columns], 'h') }},\r\n        {% endif -%}\r\n        lo.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_eff }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    INNER JOIN latest_open AS lo\r\n    ON {{ dbtvault.multikey(src_dfk, prefix=['lo', 'h'], condition='=') }}\r\n    WHERE ({{ dbtvault.multikey(src_sfk, prefix=['lo', 'h'], condition='<>', operator='OR') }})\r\n),\r\n\r\n{#- else if (not) is_auto_end_dating -#}\r\n{% else %}\r\n\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lo') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'lo') }},\r\n        {% if dbtvault.is_something(src_extra_columns) %}\r\n            {{ dbtvault.prefix([src_extra_columns], 'h') }},\r\n        {% endif -%}\r\n        h.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_end_date }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    LEFT JOIN Latest_open AS lo\r\n    ON lo.{{ src_pk }} = h.{{ src_pk }}\r\n    LEFT JOIN latest_closed AS lc\r\n    ON lc.{{ src_pk }} = h.{{ src_pk }}\r\n    WHERE CAST((h.{{ src_end_date }}) AS DATE) != CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ max_datetime }}') AS DATE)\r\n    AND lo.{{ src_pk }} IS NOT NULL\r\n    AND lc.{{ src_pk }} IS NULL\r\n),\r\n\r\n{#- end if is_auto_end_dating -#}\r\n{%- endif %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT * FROM new_open_records\r\n    UNION DISTINCT\r\n    SELECT * FROM new_reopened_records\r\n    UNION DISTINCT\r\n    SELECT * FROM new_closed_records\r\n)\r\n\r\n{#- else if not dbtvault.is_any_incremental() -#}\r\n{%- else %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'i') }}\r\n    FROM source_data AS i\r\n)\r\n\r\n{#- end if not dbtvault.is_any_incremental() -#}\r\n{%- endif %}\r\n\r\nSELECT *\r\nFROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.max_datetime", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all", "macro.dbtvault.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.9340389, "supported_languages": null}, "macro.dbtvault.bigquery__hub": {"name": "bigquery__hub", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\bigquery\\hub.sql", "original_file_path": "macros\\tables\\bigquery\\hub.sql", "unique_id": "macro.dbtvault.bigquery__hub", "macro_sql": "{%- macro bigquery__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif %}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\n    row_rank_{{ source_number }} AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\r\n           ) AS row_number\r\n    FROM {{ ref(src) }} AS rr\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    QUALIFY row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),\r\n\r\n{% endfor -%}\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- endif -%}\r\n{%- if stage_count > 1 %}\r\n\r\n    row_rank_union AS (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    QUALIFY row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.9421415, "supported_languages": null}, "macro.dbtvault.bigquery__link": {"name": "bigquery__link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\bigquery\\link.sql", "original_file_path": "macros\\tables\\bigquery\\link.sql", "unique_id": "macro.dbtvault.bigquery__link", "macro_sql": "{%- macro bigquery__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\r\n{%- set fk_cols = dbtvault.expand_column_list([src_fk]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif %}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n        ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\r\n        ) AS row_number\r\n    FROM {{ ref (src) }} AS rr\r\n    {%- if stage_count == 1 %}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition ='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, prefix='rr', condition ='IS NOT NULL') }}\r\n    QUALIFY row_number = 1\r\n    {%- endif %}\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n    ),\r\n\r\n{% endfor -%}\r\n\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{% endif %}\r\n{%- if stage_count > 1 %}\r\n\r\nrow_rank_union AS (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\r\n    QUALIFY row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.9502552, "supported_languages": null}, "macro.dbtvault.bigquery__ma_sat": {"name": "bigquery__ma_sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\bigquery\\ma_sat.sql", "original_file_path": "macros\\tables\\bigquery\\ma_sat.sql", "unique_id": "macro.dbtvault.bigquery__ma_sat", "macro_sql": "{%- macro bigquery__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) %}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_cdk, src_payload, src_extra_columns, src_hashdiff, src_eff, src_ldts, src_source]) -%}\r\n{%- set rank_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\r\n{%- set cdk_cols = dbtvault.expand_column_list(columns=[src_cdk]) -%}\r\n{%- set cols_for_latest = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif -%}\r\n\r\n{# Select unique source records -#}\r\nWITH source_data AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols_with_rank, 's', alias_target='source') }}\r\n    {%- else %}\r\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols, 's', alias_target='source') }}\r\n    {%- endif %}\r\n    FROM {{ ref(source_model) }} AS s\r\n    WHERE {{ dbtvault.multikey([src_pk], prefix='s', condition='IS NOT NULL') }}\r\n    {%- for child_key in src_cdk %}\r\n        AND {{ dbtvault.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\r\n    {%- endfor %}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n        AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n        AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{# if any_incremental -#}\r\n{% if dbtvault.is_any_incremental() %}\r\n\r\nsource_data_with_count AS (\r\n    SELECT a.*,\r\n           b.source_count\r\n    FROM source_data a\r\n    INNER JOIN (\r\n        SELECT {{ dbtvault.prefix([src_pk], 't') }},\r\n            COUNT(*) AS source_count\r\n        FROM (SELECT DISTINCT {{ dbtvault.prefix([src_pk], 's') }}, {{ dbtvault.prefix([src_hashdiff], 's', alias_target='source') }}, {{ dbtvault.prefix(cdk_cols, 's') }} FROM source_data AS s) AS t\r\n        GROUP BY {{ dbtvault.prefix([src_pk], 't') }}\r\n    ) AS b\r\n    ON {{ dbtvault.multikey([src_pk], prefix=['a','b'], condition='=') }}\r\n),\r\n\r\n{# Select latest records from satellite, restricted to PKs in source data -#}\r\nlatest_records AS (\r\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'mas', alias_target='target') }},\r\n           mas.latest_rank,\r\n           DENSE_RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'mas') }}\r\n                              ORDER BY {{ dbtvault.prefix([src_hashdiff], 'mas', alias_target='target') }},\r\n                                       {{ dbtvault.prefix([src_cdk], 'mas') }} ASC\r\n           ) AS check_rank\r\n    FROM (\r\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'inner_mas', alias_target='target') }},\r\n           RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'inner_mas') }}\r\n                        ORDER BY {{ dbtvault.prefix([src_ldts], 'inner_mas') }} DESC\r\n           ) AS latest_rank\r\n    FROM {{ this }} AS inner_mas\r\n    INNER JOIN (SELECT DISTINCT {{ dbtvault.prefix([src_pk], 's') }} FROM source_data as s ) AS spk\r\n        ON {{ dbtvault.multikey([src_pk], prefix=['inner_mas', 'spk'], condition='=') }}\r\n    ) AS mas\r\n    WHERE latest_rank = 1\r\n),\r\n\r\n{# Select summary details for each group of latest records -#}\r\nlatest_group_details AS (\r\n    SELECT {{ dbtvault.prefix([src_pk], 'lr') }},\r\n           {{ dbtvault.prefix([src_ldts], 'lr') }},\r\n           MAX(lr.check_rank) AS latest_count\r\n    FROM latest_records AS lr\r\n    GROUP BY {{ dbtvault.prefix([src_pk], 'lr') }}, {{ dbtvault.prefix([src_ldts], 'lr') }}\r\n),\r\n\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n\r\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\r\nrecords_to_insert AS (\r\n{% if not dbtvault.is_any_incremental() %}\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'source_data') }}\r\n    FROM source_data\r\n{%- endif %}\r\n\r\n{# if any_incremental -#}\r\n{% if dbtvault.is_any_incremental() %}\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'source_data_with_count') }}\r\n    FROM source_data_with_count\r\n    WHERE EXISTS (\r\n        SELECT 1\r\n        FROM source_data_with_count AS stage\r\n        WHERE NOT EXISTS (\r\n            SELECT 1\r\n            FROM (\r\n                SELECT {{ dbtvault.prefix(cols_for_latest, 'lr', alias_target='target') }},\r\n                       lg.latest_count\r\n                FROM latest_records AS lr\r\n                INNER JOIN latest_group_details AS lg\r\n                    ON {{ dbtvault.multikey([src_pk], prefix=['lr', 'lg'], condition='=') }}\r\n                    AND {{ dbtvault.prefix([src_ldts], 'lr') }} = {{ dbtvault.prefix([src_ldts], 'lg') }}\r\n            ) AS active_records\r\n            WHERE {{ dbtvault.multikey([src_pk], prefix=['stage', 'active_records'], condition='=') }}\r\n                AND {{ dbtvault.prefix([src_hashdiff], 'stage') }} = {{ dbtvault.prefix([src_hashdiff], 'active_records', alias_target='target') }}\r\n{# In order to maintain the parallel with the standard satellite, we don''t allow for groups of records to be updated if the ldts is the only difference #}\r\n{#        AND {{ dbtvault.prefix([src_ldts], 'stage') }} = {{ dbtvault.prefix([src_ldts], 'active_records') }} #}\r\n                AND {{ dbtvault.multikey(src_cdk, prefix=['stage', 'active_records'], condition='=') }}\r\n                AND stage.source_count = active_records.latest_count\r\n        )\r\n        AND {{ dbtvault.multikey([src_pk], prefix=['source_data_with_count', 'stage'], condition='=') }}\r\n    )\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.9664245, "supported_languages": null}, "macro.dbtvault.bigquery__pit": {"name": "bigquery__pit", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\bigquery\\pit.sql", "original_file_path": "macros\\tables\\bigquery\\pit.sql", "unique_id": "macro.dbtvault.bigquery__pit", "macro_sql": "{%- macro bigquery__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) %}\r\n\r\n{#- Acquiring the source relation for the AS_OF table -#}\r\n{%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\r\n    {%- set source_name = as_of_dates_table | first -%}\r\n    {%- set source_table_name = as_of_dates_table[source_name] -%}\r\n    {%- set as_of_table_relation = source(source_name, source_table_name) -%}\r\n{%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\r\n    {%- set as_of_table_relation = ref(as_of_dates_table) -%}\r\n{%- endif -%}\r\n\r\n{#- Setting ghost values to replace NULLS -#}\r\n{%- set ghost_pk = '0x0000000000000000' -%}\r\n{%- set ghost_date = '1900-01-01 00:00:00.000000' %}\r\n\r\n{%- if dbtvault.is_any_incremental() -%}\r\n    {%- set new_as_of_dates_cte = 'new_rows_as_of' -%}\r\n{%- else -%}\r\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\r\n{%- endif %}\r\n\r\nWITH as_of_dates AS (\r\n    SELECT * FROM {{ as_of_table_relation }}\r\n),\r\n\r\n{%- if dbtvault.is_any_incremental() %}\r\n\r\n{{ dbtvault.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\r\n\r\nbackfill_rows_as_of_dates AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        b.AS_OF_DATE\r\n    FROM new_rows_pks AS a\r\n    INNER JOIN backfill_as_of AS b\r\n        ON (1=1 )\r\n),\r\n\r\nbackfill AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        a.AS_OF_DATE,\r\n    {%- for sat_name in satellites -%}\r\n        {%- set sat_key_name = (satellites[sat_name]['pk'].keys() | list )[0] | upper -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] | upper -%}\r\n        {%- set sat_name = sat_name | upper %}\r\n        '{{ ghost_pk }}' AS {{ dbtvault.escape_column_names( sat_name ~ '_' ~ sat_key_name ) }},\r\n        PARSE_DATETIME('%F %H:%M:%E6S', '{{ ghost_date }}') AS {{ dbtvault.escape_column_names( sat_name ~ '_' ~ sat_ldts_name ) }}\r\n        {{- ',' if not loop.last -}}\r\n    {%- endfor %}\r\n    FROM backfill_rows_as_of_dates AS a\r\n\r\n    {% for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_pk = dbtvault.escape_column_names(satellites[sat_name]['pk'][sat_pk_name]) -%}\r\n        {%- set sat_ldts = dbtvault.escape_column_names(satellites[sat_name]['ldts'][sat_ldts_name]) -%}\r\n        LEFT JOIN {{ ref(sat_name) }} AS {{ dbtvault.escape_column_names( sat_name | lower ~ '_src' ) }}\r\n        {{ \"ON\" | indent(4) }} a.{{ src_pk }} = {{ dbtvault.escape_column_names( sat_name | lower ~ '_src' ) }}.{{ sat_pk }}\r\n        {{ \"AND\" | indent(4) }} {{ dbtvault.escape_column_names( sat_name | lower ~ '_src' ) }}.{{ sat_ldts }} <= a.AS_OF_DATE\r\n    {% endfor -%}\r\n\r\n    GROUP BY\r\n        {{ dbtvault.prefix([src_pk], 'a') }}, a.AS_OF_DATE\r\n    ORDER BY (1)\r\n),\r\n{%- endif %}\r\n\r\nnew_rows_as_of_dates AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        b.AS_OF_DATE\r\n    FROM {{ ref(source_model) }} AS a\r\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\r\n    ON (1=1)\r\n),\r\n\r\nnew_rows AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        a.AS_OF_DATE,\r\n    {%- for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_pk = dbtvault.escape_column_names(satellites[sat_name]['pk'][sat_pk_name]) -%}\r\n        {%- set sat_ldts = dbtvault.escape_column_names(satellites[sat_name]['ldts'][sat_ldts_name]) %}\r\n        COALESCE(MAX({{ dbtvault.escape_column_names( sat_name | lower ~ '_src' ) }}.{{ sat_pk }}),\r\n        '{{ ghost_pk }}') AS {{ sat_name | upper }}_{{ sat_pk_name | upper }},\r\n        COALESCE(MAX({{ dbtvault.escape_column_names( sat_name | lower ~ '_src' ) }}.{{ sat_ldts }}),\r\n        PARSE_DATETIME('%F %H:%M:%E6S', '{{ ghost_date }}')) AS {{ sat_name | upper }}_{{ sat_ldts_name | upper }}\r\n        {{- \",\" if not loop.last }}\r\n    {%- endfor %}\r\n    FROM new_rows_as_of_dates AS a\r\n\r\n\r\n    {% for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_pk = dbtvault.escape_column_names(satellites[sat_name]['pk'][sat_pk_name]) -%}\r\n        {%- set sat_ldts = dbtvault.escape_column_names(satellites[sat_name]['ldts'][sat_ldts_name]) -%}\r\n        LEFT JOIN {{ ref(sat_name) }} AS {{ dbtvault.escape_column_names( sat_name | lower ~ '_src' ) }}\r\n        {{ \"ON\" | indent(4) }} a.{{ src_pk }} = {{ dbtvault.escape_column_names( sat_name | lower ~ '_src' ) }}.{{ sat_pk }}\r\n        {{ \"AND\" | indent(4) }} {{ dbtvault.escape_column_names( sat_name | lower ~ '_src' ) }}.{{ sat_ldts }} <= a.AS_OF_DATE\r\n    {% endfor -%}\r\n\r\n    GROUP BY\r\n        {{ dbtvault.prefix([src_pk], 'a') }}, a.AS_OF_DATE\r\n    ORDER BY (1)\r\n),\r\n\r\npit AS (\r\n    SELECT * FROM new_rows\r\n{%- if dbtvault.is_any_incremental() %}\r\n    UNION ALL\r\n    SELECT * FROM overlap_pks\r\n    UNION ALL\r\n    SELECT * FROM backfill\r\n{%- endif %}\r\n)\r\n\r\nSELECT DISTINCT * FROM pit\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.is_any_incremental", "macro.dbtvault.as_of_date_window", "macro.dbtvault.prefix", "macro.dbtvault.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.9826458, "supported_languages": null}, "macro.dbtvault.bigquery__sat": {"name": "bigquery__sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\bigquery\\sat.sql", "original_file_path": "macros\\tables\\bigquery\\sat.sql", "unique_id": "macro.dbtvault.bigquery__sat", "macro_sql": "{%- macro bigquery__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{ dbtvault.default__sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                             src_payload=src_payload,\r\n                             src_extra_columns=src_extra_columns,\r\n                             src_eff=src_eff, src_ldts=src_ldts,\r\n                             src_source=src_source, source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.9826458, "supported_languages": null}, "macro.dbtvault.bigquery__t_link": {"name": "bigquery__t_link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\bigquery\\t_link.sql", "original_file_path": "macros\\tables\\bigquery\\t_link.sql", "unique_id": "macro.dbtvault.bigquery__t_link", "macro_sql": "{%- macro bigquery__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{{ dbtvault.default__t_link(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\r\n                            src_extra_columns=src_extra_columns,\r\n                            src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\r\n                            source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.990549, "supported_languages": null}, "macro.dbtvault.bigquery__xts": {"name": "bigquery__xts", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\bigquery\\xts.sql", "original_file_path": "macros\\tables\\bigquery\\xts.sql", "unique_id": "macro.dbtvault.bigquery__xts", "macro_sql": "{%- macro bigquery__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{{ dbtvault.default__xts(src_pk=src_pk,\r\n                         src_satellite=src_satellite,\r\n                         src_extra_columns=src_extra_columns,\r\n                         src_ldts=src_ldts,\r\n                         src_source=src_source,\r\n                         source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.990549, "supported_languages": null}, "macro.dbtvault.databricks__hub": {"name": "databricks__hub", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\databricks\\hub.sql", "original_file_path": "macros\\tables\\databricks\\hub.sql", "unique_id": "macro.dbtvault.databricks__hub", "macro_sql": "{%- macro databricks__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{{ dbtvault.default__hub(src_pk=src_pk,\r\n                         src_nk=src_nk,\r\n                         src_extra_columns=src_extra_columns,\r\n                         src_ldts=src_ldts,\r\n                         src_source=src_source,\r\n                         source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__hub"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.990549, "supported_languages": null}, "macro.dbtvault.databricks__link": {"name": "databricks__link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\databricks\\link.sql", "original_file_path": "macros\\tables\\databricks\\link.sql", "unique_id": "macro.dbtvault.databricks__link", "macro_sql": "{%- macro databricks__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{{ dbtvault.default__link(src_pk=src_pk,\r\n                          src_fk=src_fk,\r\n                          src_extra_columns=src_extra_columns,\r\n                          src_ldts=src_ldts,\r\n                          src_source=src_source,\r\n                          source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.990549, "supported_languages": null}, "macro.dbtvault.databricks__sat": {"name": "databricks__sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\databricks\\sat.sql", "original_file_path": "macros\\tables\\databricks\\sat.sql", "unique_id": "macro.dbtvault.databricks__sat", "macro_sql": "{%- macro databricks__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{{ dbtvault.default__sat(src_pk=src_pk,\r\n                         src_hashdiff=src_hashdiff,\r\n                         src_payload=src_payload,\r\n                         src_extra_columns=src_extra_columns,\r\n                         src_eff=src_eff,\r\n                         src_ldts=src_ldts,\r\n                         src_source=src_source,\r\n                         source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.990549, "supported_languages": null}, "macro.dbtvault.postgres__hub": {"name": "postgres__hub", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\postgres\\hub.sql", "original_file_path": "macros\\tables\\postgres\\hub.sql", "unique_id": "macro.dbtvault.postgres__hub", "macro_sql": "{%- macro postgres__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif -%}\r\n\r\n{{ dbtvault.prepend_generated_by() }}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- if not (source_model is iterable and source_model is not string) -%}\r\n    {%- set source_model = [source_model] -%}\r\n{%- endif -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n{#- PostgreSQL has DISTINCT ON which should be more performant than the\r\n    strategy used by Snowflake ROW_NUMBER() OVER( PARTITION BY ...\r\n-#}\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT DISTINCT ON ({{ dbtvault.prefix([src_pk], 'rr') }}) {{ dbtvault.prefix(source_cols_with_rank, 'rr') }}\r\n    {%- else %}\r\n    SELECT DISTINCT ON ({{ dbtvault.prefix([src_pk], 'rr') }}) {{ dbtvault.prefix(source_cols, 'rr') }}\r\n    {%- endif %}\r\n    FROM {{ ref(src) }} AS rr\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    ORDER BY {{ dbtvault.prefix([src_pk], 'rr') }}, {{ dbtvault.prefix([src_ldts], 'rr') }}\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if source_model | length > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- endif -%}\r\n{%- if source_model | length > 1 %}\r\n\r\nrow_rank_union AS (\r\n{#- PostgreSQL has DISTINCT ON which should be more performant than the\r\n    strategy used by Snowflake ROW_NUMBER() OVER( PARTITION BY ...\r\n-#}\r\n    SELECT DISTINCT ON ({{ dbtvault.prefix([src_pk], 'ru') }}) ru.*\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    ORDER BY {{ dbtvault.prefix([src_pk], 'ru') }}, {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884068.9987793, "supported_languages": null}, "macro.dbtvault.postgres__link": {"name": "postgres__link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\postgres\\link.sql", "original_file_path": "macros\\tables\\postgres\\link.sql", "unique_id": "macro.dbtvault.postgres__link", "macro_sql": "{%- macro postgres__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\r\n{%- set fk_cols = dbtvault.expand_column_list([src_fk]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif -%}\r\n\r\n{{ dbtvault.prepend_generated_by() }}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- if not (source_model is iterable and source_model is not string) -%}\r\n    {%- set source_model = [source_model] -%}\r\n{%- endif -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n  SELECT * FROM (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\r\n           ) AS row_number\r\n    FROM {{ ref(src) }} AS rr\r\n    {%- if source_model | length == 1 %}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\r\n    {%- endif %}\r\n  ) as l\r\n  WHERE row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if source_model | length > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{% endif %}\r\n{%- if source_model | length > 1 %}\r\n\r\nrow_rank_union AS (\r\n  SELECT * FROM (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\r\n  ) AS a\r\n  WHERE row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.006687, "supported_languages": null}, "macro.dbtvault.postgres__sat": {"name": "postgres__sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\postgres\\sat.sql", "original_file_path": "macros\\tables\\postgres\\sat.sql", "unique_id": "macro.dbtvault.postgres__sat", "macro_sql": "{%- macro postgres__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\r\n{%- set rank_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\r\n{%- set pk_cols = dbtvault.expand_column_list(columns=[src_pk]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif -%}\r\n\r\n{{ dbtvault.prepend_generated_by() }}\r\n\r\nWITH source_data AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'a', alias_target='source') }}\r\n    {%- else %}\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='source') }}\r\n    {%- endif %}\r\n    FROM {{ ref(source_model) }} AS a\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='a', condition='IS NOT NULL') }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    AND __PERIOD_FILTER__\r\n    {% elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    AND __RANK_FILTER__\r\n    {% endif %}\r\n),\r\n\r\n{%- if dbtvault.is_any_incremental() %}\r\n\r\nlatest_records AS (\r\n    SELECT {{ dbtvault.prefix(rank_cols, 'a', alias_target='target') }}\r\n    FROM (\r\n        SELECT {{ dbtvault.prefix(rank_cols, 'current_records', alias_target='target') }},\r\n            RANK() OVER (\r\n                PARTITION BY {{ dbtvault.prefix([src_pk], 'current_records') }}\r\n                ORDER BY {{ dbtvault.prefix([src_ldts], 'current_records') }} DESC\r\n            ) AS rank\r\n        FROM {{ this }} AS current_records\r\n            JOIN (\r\n                SELECT DISTINCT {{ dbtvault.prefix([src_pk], 'source_data') }}\r\n                FROM source_data\r\n            ) AS source_records\r\n                ON {{ dbtvault.multikey(src_pk, prefix=['current_records','source_records'], condition='=') }}\r\n    ) AS a\r\n    WHERE a.rank = 1\r\n),\r\n\r\n{%- endif %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT DISTINCT {{ dbtvault.alias_all(source_cols, 'stage') }}\r\n    FROM source_data AS stage\r\n    {%- if dbtvault.is_any_incremental() %}\r\n        LEFT JOIN latest_records\r\n            ON {{ dbtvault.multikey(src_pk, prefix=['latest_records','stage'], condition='=') }}\r\n            WHERE {{ dbtvault.prefix([src_hashdiff], 'latest_records', alias_target='target') }} != {{ dbtvault.prefix([src_hashdiff], 'stage') }}\r\n                OR {{ dbtvault.prefix([src_hashdiff], 'latest_records', alias_target='target') }} IS NULL\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.0149117, "supported_languages": null}, "macro.dbtvault.bridge": {"name": "bridge", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\bridge.sql", "original_file_path": "macros\\tables\\snowflake\\bridge.sql", "unique_id": "macro.dbtvault.bridge", "macro_sql": "{%- macro bridge(src_pk, src_extra_columns, as_of_dates_table, bridge_walk, stage_tables_ldts, src_ldts, source_model) -%}\r\n\r\n    {%- if dbtvault.is_something(src_extra_columns) and execute -%}\r\n      {%- do exceptions.warn(\"WARNING: src_extra_columns not yet available for PITs or Bridges. This parameter will be ignored.\") -%}\r\n    {%- endif -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk,\r\n                                           as_of_dates_table=as_of_dates_table,\r\n                                           bridge_walk=bridge_walk,\r\n                                           stage_tables_ldts=stage_tables_ldts,\r\n                                           src_ldts=src_ldts,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n\r\n    {{- dbtvault.prepend_generated_by() }}\r\n\r\n    {% for stg in stage_tables_ldts %}\r\n    {{- \"-- depends_on: \" ~ ref(stg) }}\r\n    {% endfor %}\r\n\r\n    {#- Acquiring the source relation for the AS_OF table -#}\r\n    {%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\r\n        {%- set source_name = as_of_dates_table | first -%}\r\n        {%- set source_table_name = as_of_dates_table[source_name] -%}\r\n        {%- set as_of_dates_table = source(source_name, source_table_name) -%}\r\n    {%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\r\n        {%- set as_of_dates_table = ref(as_of_dates_table) -%}\r\n    {%- endif %}\r\n\r\n    {{ adapter.dispatch('bridge', 'dbtvault')(src_pk=src_pk,\r\n                                              src_extra_columns=src_extra_columns,\r\n                                              src_ldts=src_ldts,\r\n                                              as_of_dates_table=as_of_dates_table,\r\n                                              bridge_walk=bridge_walk,\r\n                                              stage_tables_ldts=stage_tables_ldts,\r\n                                              source_model=source_model) -}}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.is_something", "macro.dbtvault.check_required_parameters", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.0253208, "supported_languages": null}, "macro.dbtvault.default__bridge": {"name": "default__bridge", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\bridge.sql", "original_file_path": "macros\\tables\\snowflake\\bridge.sql", "unique_id": "macro.dbtvault.default__bridge", "macro_sql": "{%- macro default__bridge(src_pk, src_extra_columns, src_ldts, as_of_dates_table, bridge_walk, stage_tables_ldts, source_model) -%}\r\n\r\n{%- set max_datetime = dbtvault.max_datetime() -%}\r\n\r\n{#- Setting the new AS_OF dates CTE name -#}\r\n{%- if dbtvault.is_any_incremental() -%}\r\n    {%- set new_as_of_dates_cte = 'new_rows_as_of'  -%}\r\n{%- else -%}\r\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\r\n{%- endif %}\r\n\r\nWITH as_of_dates AS (\r\n    SELECT *\r\n    FROM {{ as_of_dates_table }}\r\n),\r\n\r\n{%- if dbtvault.is_any_incremental() %}\r\n\r\n{{ dbtvault.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\r\n\r\noverlap AS (\r\n    {{ dbtvault.bridge_overlap_and_new_rows(src_pk, bridge_walk, 'overlap_pks', 'overlap_as_of') }}\r\n),\r\n{%- endif %}\r\n\r\nnew_rows AS (\r\n    {{ dbtvault.bridge_overlap_and_new_rows(src_pk, bridge_walk, ref(source_model), new_as_of_dates_cte) }}\r\n),\r\n\r\n{# Full data from bridge walk(s) -#}\r\nall_rows AS (\r\n    SELECT * FROM new_rows\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    UNION ALL\r\n    SELECT * FROM overlap\r\n    {%- endif %}\r\n),\r\n\r\n{# Select most recent set of relationship key(s) for each as of date -#}\r\ncandidate_rows AS (\r\n    SELECT *\r\n    FROM (\r\n        SELECT *,\r\n               ROW_NUMBER() OVER (\r\n               PARTITION BY\r\n                   AS_OF_DATE,\r\n                   {% for bridge_step in bridge_walk.keys() -%}\r\n\r\n                       {%- set bridge_link_pk = dbtvault.escape_column_names(bridge_walk[bridge_step]['bridge_link_pk']) -%}\r\n\r\n                       {{ bridge_link_pk }} {%- if not loop.last %}, {% endif -%}\r\n\r\n                   {%- endfor %}\r\n               ORDER BY\r\n                   {% for bridge_step in bridge_walk.keys() -%}\r\n\r\n                       {%- set bridge_load_date = dbtvault.escape_column_names(bridge_walk[bridge_step]['bridge_load_date']) -%}\r\n\r\n                       {{ bridge_load_date }} DESC {%- if not loop.last %}, {% endif -%}\r\n\r\n                   {%- endfor %}\r\n               ) AS ROW_NUM\r\n        FROM all_rows\r\n    ) AS a\r\n    WHERE a.ROW_NUM = 1\r\n),\r\n\r\nbridge AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'c') }},\r\n        c.AS_OF_DATE,\r\n\r\n        {% for bridge_step in bridge_walk.keys() %}\r\n\r\n        {% set bridge_link_pk = dbtvault.escape_column_names(bridge_walk[bridge_step]['bridge_link_pk']) %}\r\n        c.{{ bridge_link_pk }}\r\n        {%- if not loop.last %}, {%- endif -%}\r\n        {%- endfor -%}\r\n\r\n    FROM candidate_rows AS c\r\n\r\n{%- for bridge_step in bridge_walk.keys() -%}\r\n    {%- set bridge_end_date = dbtvault.escape_column_names(bridge_walk[bridge_step]['bridge_end_date']) %}\r\n\r\n    {% if loop.first -%} WHERE {%- else -%} AND {%- endif %} {{ dbtvault.cast_date(dbtvault.prefix([bridge_end_date], 'c')) }} = {{ dbtvault.cast_date(max_datetime, true, false) }}\r\n\r\n{% endfor -%}\r\n)\r\n\r\nSELECT * FROM bridge\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.max_datetime", "macro.dbtvault.is_any_incremental", "macro.dbtvault.as_of_date_window", "macro.dbtvault.bridge_overlap_and_new_rows", "macro.dbtvault.escape_column_names", "macro.dbtvault.prefix", "macro.dbtvault.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.0332813, "supported_languages": null}, "macro.dbtvault.eff_sat": {"name": "eff_sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\eff_sat.sql", "original_file_path": "macros\\tables\\snowflake\\eff_sat.sql", "unique_id": "macro.dbtvault.eff_sat", "macro_sql": "{%- macro eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\r\n                                           src_start_date=src_start_date, src_end_date=src_end_date,\r\n                                           src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_dfk = dbtvault.escape_column_names(src_dfk) -%}\r\n    {%- set src_sfk = dbtvault.escape_column_names(src_sfk) -%}\r\n\r\n    {%- set src_extra_columns = dbtvault.escape_column_names(src_extra_columns) -%}\r\n\r\n    {%- set src_start_date = dbtvault.escape_column_names(src_start_date) -%}\r\n    {%- set src_end_date = dbtvault.escape_column_names(src_end_date) -%}\r\n    {%- set src_eff = dbtvault.escape_column_names(src_eff) -%}\r\n\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n    {%- set src_source = dbtvault.escape_column_names(src_source) -%}\r\n\r\n    {{ dbtvault.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('eff_sat', 'dbtvault')(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\r\n                                               src_extra_columns=src_extra_columns,\r\n                                               src_start_date=src_start_date, src_end_date=src_end_date,\r\n                                               src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\r\n                                               source_model=source_model) -}}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__eff_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.0412815, "supported_languages": null}, "macro.dbtvault.default__eff_sat": {"name": "default__eff_sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\eff_sat.sql", "original_file_path": "macros\\tables\\snowflake\\eff_sat.sql", "unique_id": "macro.dbtvault.default__eff_sat", "macro_sql": "{%- macro default__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source]) -%}\r\n{%- set fk_cols = dbtvault.expand_column_list(columns=[src_dfk, src_sfk]) -%}\r\n{%- set dfk_cols = dbtvault.expand_column_list(columns=[src_dfk]) -%}\r\n{%- set is_auto_end_dating = config.get('is_auto_end_dating', default=false) %}\r\n\r\n{%- set max_datetime = dbtvault.max_datetime() %}\r\n\r\nWITH source_data AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='source') }}\r\n    FROM {{ ref(source_model) }} AS a\r\n    WHERE {{ dbtvault.multikey(src_dfk, prefix='a', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(src_sfk, prefix='a', condition='IS NOT NULL') }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{%- if dbtvault.is_any_incremental() %}\r\n\r\n{# Selecting the most recent records for each link hashkey -#}\r\nlatest_records AS (\r\n    SELECT * FROM (\r\n        SELECT {{ dbtvault.alias_all(source_cols, 'b') }},\r\n               ROW_NUMBER() OVER (\r\n                    PARTITION BY {{ dbtvault.prefix([src_pk], 'b') }}\r\n                    ORDER BY b.{{ src_ldts }} DESC\r\n               ) AS row_num\r\n        FROM {{ this }} AS b\r\n    ) AS inner\r\n    WHERE row_num = 1\r\n),\r\n\r\n{# Selecting the open records of the most recent records for each link hashkey -#}\r\nlatest_open AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'c') }}\r\n    FROM latest_records AS c\r\n    WHERE TO_DATE(c.{{ src_end_date }}) = TO_DATE('{{ max_datetime }}')\r\n),\r\n\r\n{# Selecting the closed records of the most recent records for each link hashkey -#}\r\nlatest_closed AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'd') }}\r\n    FROM latest_records AS d\r\n    WHERE TO_DATE(d.{{ src_end_date }}) != TO_DATE('{{ max_datetime }}')\r\n),\r\n\r\n{# Identifying the completely new link relationships to be opened in eff sat -#}\r\nnew_open_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'f') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'f') }},\r\n        {% if dbtvault.is_something(src_extra_columns) %}\r\n            {{ dbtvault.prefix([src_extra_columns], 'f') }},\r\n        {% endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        f.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        f.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        f.{{ src_end_date }} AS {{ src_end_date }},\r\n        f.{{ src_eff }} AS {{ src_eff }},\r\n        f.{{ src_ldts }},\r\n        f.{{ src_source }}\r\n    FROM source_data AS f\r\n    LEFT JOIN latest_records AS lr\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['f','lr'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='lr', condition='IS NULL') }}\r\n),\r\n\r\n{# Identifying the currently closed link relationships to be reopened in eff sat -#}\r\nnew_reopened_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lc') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'lc') }},\r\n        {% if dbtvault.is_something(src_extra_columns) %}\r\n            {{ dbtvault.prefix([src_extra_columns], 'g') }},\r\n        {% endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        g.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        g.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        g.{{ src_end_date }} AS {{ src_end_date }},\r\n        g.{{ src_eff }} AS {{ src_eff }},\r\n        g.{{ src_ldts }},\r\n        g.{{ src_source }}\r\n    FROM source_data AS g\r\n    INNER JOIN latest_closed AS lc\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['g','lc'], condition='=') }}\r\n    WHERE TO_DATE(g.{{ src_end_date }}) = TO_DATE('{{ max_datetime }}')\r\n),\r\n\r\n{%- if is_auto_end_dating %}\r\n\r\n{# Creating the closing records -#}\r\n{# Identifying the currently open relationships that need to be closed due to change in SFK(s) -#}\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lo') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'lo') }},\r\n        {% if dbtvault.is_something(src_extra_columns) %}\r\n            {{ dbtvault.prefix([src_extra_columns], 'h') }},\r\n        {% endif -%}\r\n        lo.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_eff }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    INNER JOIN latest_open AS lo\r\n    ON {{ dbtvault.multikey(src_dfk, prefix=['lo', 'h'], condition='=') }}\r\n    WHERE ({{ dbtvault.multikey(src_sfk, prefix=['lo', 'h'], condition='<>', operator='OR') }})\r\n),\r\n\r\n{#- else if (not) is_auto_end_dating -#}\r\n{% else %}\r\n\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lo') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'h') }},\r\n        {% if dbtvault.is_something(src_extra_columns) %}\r\n            {{ dbtvault.prefix([src_extra_columns], 'h') }},\r\n        {% endif -%}\r\n        h.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_end_date }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    LEFT JOIN latest_open AS lo\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['lo', 'h'], condition='=') }}\r\n    LEFT JOIN latest_closed AS lc\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['lc', 'h'], condition='=') }}\r\n    WHERE TO_DATE(h.{{ src_end_date }}) != TO_DATE('{{ max_datetime }}')\r\n    AND {{ dbtvault.multikey(src_pk, prefix='lo', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(src_pk, prefix='lc', condition='IS NULL') }}\r\n),\r\n\r\n{#- end if is_auto_end_dating -#}\r\n{%- endif %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT * FROM new_open_records\r\n    UNION\r\n    SELECT * FROM new_reopened_records\r\n    UNION\r\n    SELECT * FROM new_closed_records\r\n)\r\n\r\n{#- else if not dbtvault.is_any_incremental() -#}\r\n{%- else %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'i') }}\r\n    FROM source_data AS i\r\n)\r\n\r\n{#- end if not dbtvault.is_any_incremental() -#}\r\n{%- endif %}\r\n\r\nSELECT * FROM records_to_insert\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.max_datetime", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all", "macro.dbtvault.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.0520744, "supported_languages": null}, "macro.dbtvault.hub": {"name": "hub", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\hub.sql", "original_file_path": "macros\\tables\\snowflake\\hub.sql", "unique_id": "macro.dbtvault.hub", "macro_sql": "{%- macro hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_nk=src_nk,\r\n                                           src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_nk = dbtvault.escape_column_names(src_nk) -%}\r\n    {%- set src_extra_columns = dbtvault.escape_column_names(src_extra_columns) -%}\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n    {%- set src_source = dbtvault.escape_column_names(src_source) -%}\r\n\r\n    {%- if not dbtvault.is_list(source_model) -%}\r\n        {%- set source_model = [source_model] -%}\r\n    {%- endif -%}\r\n\r\n    {{ dbtvault.log_relation_sources(this, source_model | length) }}\r\n\r\n    {{- dbtvault.prepend_generated_by() -}}\r\n\r\n    {{- adapter.dispatch('hub', 'dbtvault')(src_pk=src_pk, src_nk=src_nk,\r\n                                            src_extra_columns=src_extra_columns,\r\n                                            src_ldts=src_ldts, src_source=src_source,\r\n                                            source_model=source_model) -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.escape_column_names", "macro.dbtvault.is_list", "macro.dbtvault.log_relation_sources", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__hub"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.06001, "supported_languages": null}, "macro.dbtvault.default__hub": {"name": "default__hub", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\hub.sql", "original_file_path": "macros\\tables\\snowflake\\hub.sql", "unique_id": "macro.dbtvault.default__hub", "macro_sql": "{%- macro default__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif %}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\r\n           ) AS row_number\r\n    FROM {{ ref(src) }} AS rr\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    QUALIFY row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- endif -%}\r\n\r\n{%- if stage_count > 1 %}\r\n\r\nrow_rank_union AS (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    QUALIFY row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.0624843, "supported_languages": null}, "macro.dbtvault.link": {"name": "link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\link.sql", "original_file_path": "macros\\tables\\snowflake\\link.sql", "unique_id": "macro.dbtvault.link", "macro_sql": "{%- macro link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_fk=src_fk,\r\n                                           src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_fk = dbtvault.escape_column_names(src_fk) -%}\r\n    {%- set src_extra_columns = dbtvault.escape_column_names(src_extra_columns) -%}\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n    {%- set src_source = dbtvault.escape_column_names(src_source) -%}\r\n\r\n    {%- if not dbtvault.is_list(source_model) -%}\r\n        {%- set source_model = [source_model] -%}\r\n    {%- endif -%}\r\n\r\n    {{ dbtvault.log_relation_sources(this, source_model | length) }}\r\n\r\n    {{ dbtvault.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('link', 'dbtvault')(src_pk=src_pk, src_fk=src_fk,\r\n                                             src_extra_columns=src_extra_columns,\r\n                                             src_ldts=src_ldts, src_source=src_source,\r\n                                             source_model=source_model) -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.escape_column_names", "macro.dbtvault.is_list", "macro.dbtvault.log_relation_sources", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.0730283, "supported_languages": null}, "macro.dbtvault.default__link": {"name": "default__link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\link.sql", "original_file_path": "macros\\tables\\snowflake\\link.sql", "unique_id": "macro.dbtvault.default__link", "macro_sql": "{%- macro default__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\r\n{%- set fk_cols = dbtvault.expand_column_list([src_fk]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif %}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\r\n           ) AS row_number\r\n    FROM {{ ref(src) }} AS rr\r\n    {%- if stage_count == 1 %}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\r\n    {%- endif %}\r\n    QUALIFY row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{% endif %}\r\n{%- if stage_count > 1 %}\r\n\r\nrow_rank_union AS (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\r\n    QUALIFY row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.0809395, "supported_languages": null}, "macro.dbtvault.ma_sat": {"name": "ma_sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\ma_sat.sql", "original_file_path": "macros\\tables\\snowflake\\ma_sat.sql", "unique_id": "macro.dbtvault.ma_sat", "macro_sql": "{%- macro ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_cdk=src_cdk, src_hashdiff=src_hashdiff,\r\n                                           src_payload=src_payload, src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_cdk = dbtvault.escape_column_names(src_cdk) -%}\r\n\r\n    {%- set src_hashdiff = dbtvault.escape_column_names(src_hashdiff) -%}\r\n    {%- set src_payload = dbtvault.escape_column_names(src_payload) -%}\r\n    {%- set src_extra_columns = dbtvault.escape_column_names(src_extra_columns) -%}\r\n\r\n    {%- set src_eff = dbtvault.escape_column_names(src_eff) -%}\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n    {%- set src_source = dbtvault.escape_column_names(src_source) -%}\r\n\r\n    {{ dbtvault.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('ma_sat', 'dbtvault')(src_pk=src_pk, src_cdk=src_cdk, src_hashdiff=src_hashdiff,\r\n                                               src_payload=src_payload, src_extra_columns=src_extra_columns,\r\n                                               src_eff=src_eff, src_ldts=src_ldts,\r\n                                               src_source=src_source, source_model=source_model) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__ma_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.0834463, "supported_languages": null}, "macro.dbtvault.default__ma_sat": {"name": "default__ma_sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\ma_sat.sql", "original_file_path": "macros\\tables\\snowflake\\ma_sat.sql", "unique_id": "macro.dbtvault.default__ma_sat", "macro_sql": "\r\n\r\n{%- macro default__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_cdk, src_payload, src_extra_columns, src_hashdiff, src_eff, src_ldts, src_source]) -%}\r\n{%- set rank_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\r\n{%- set cdk_cols = dbtvault.expand_column_list(columns=[src_cdk]) -%}\r\n{%- set cols_for_latest = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif %}\r\n\r\n{# Select unique source records #}\r\nWITH source_data AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols_with_rank, 's', alias_target='source') }}\r\n    {%- else %}\r\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols, 's', alias_target='source') }}\r\n    {%- endif %}\r\n    {% if dbtvault.is_any_incremental() %}\r\n        ,COUNT(DISTINCT {{ dbtvault.prefix([src_hashdiff], 's', alias_target='source') }}, {{ dbtvault.prefix(cdk_cols, 's', alias_target='source') }})\r\n            OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 's') }}) AS source_count\r\n    {% endif %}\r\n    FROM {{ ref(source_model) }} AS s\r\n    WHERE {{ dbtvault.multikey([src_pk], prefix='s', condition='IS NOT NULL') }}\r\n    {%- for child_key in cdk_cols %}\r\n        AND {{ dbtvault.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\r\n    {%- endfor %}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n        AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n        AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{# if any_incremental -#}\r\n{% if dbtvault.is_any_incremental() %}\r\n\r\n{# Select latest records from satellite, restricted to PKs in source data -#}\r\nlatest_records AS (\r\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'mas', alias_target='target') }},\r\n           mas.latest_rank,\r\n           DENSE_RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'mas') }}\r\n                              ORDER BY {{ dbtvault.prefix([src_hashdiff], 'mas', alias_target='target') }}, {{ dbtvault.prefix(cdk_cols, 'mas') }} ASC\r\n           ) AS check_rank\r\n    FROM (\r\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'inner_mas', alias_target='target') }},\r\n           RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'inner_mas') }}\r\n                        ORDER BY {{ dbtvault.prefix([src_ldts], 'inner_mas') }} DESC\r\n           ) AS latest_rank\r\n    FROM {{ this }} AS inner_mas\r\n        INNER JOIN (\r\n            SELECT DISTINCT {{ dbtvault.prefix([src_pk], 's') }}\r\n            FROM source_data as s\r\n        ) AS spk\r\n            ON {{ dbtvault.multikey([src_pk], prefix=['inner_mas', 'spk'], condition='=') }}\r\n            QUALIFY latest_rank = 1\r\n    ) AS mas\r\n),\r\n\r\n{# Select summary details for each group of latest records -#}\r\nlatest_group_details AS (\r\n    SELECT {{ dbtvault.prefix([src_pk], 'lr') }},\r\n           {{ dbtvault.prefix([src_ldts], 'lr') }},\r\n           MAX(lr.check_rank) AS latest_count\r\n    FROM latest_records AS lr\r\n    GROUP BY {{ dbtvault.prefix([src_pk], 'lr') }}, {{ dbtvault.prefix([src_ldts], 'lr') }}\r\n),\r\n\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n\r\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'source_data') }}\r\n    FROM source_data\r\n\r\n{# if any_incremental -#}\r\n{% if dbtvault.is_any_incremental() %}\r\n    WHERE EXISTS (\r\n        SELECT 1\r\n        FROM source_data AS stage\r\n        WHERE NOT EXISTS (\r\n            SELECT 1\r\n            FROM (\r\n                SELECT {{ dbtvault.prefix(cols_for_latest, 'lr', alias_target='target') }},\r\n                lg.latest_count\r\n                FROM latest_records AS lr\r\n                INNER JOIN latest_group_details AS lg\r\n                    ON {{ dbtvault.multikey([src_pk], prefix=['lr', 'lg'], condition='=') }}\r\n                    AND {{ dbtvault.prefix([src_ldts], 'lr') }} = {{ dbtvault.prefix([src_ldts], 'lg') }}\r\n            ) AS active_records\r\n            WHERE {{ dbtvault.multikey([src_pk], prefix=['stage', 'active_records'], condition='=') }}\r\n                AND {{ dbtvault.prefix([src_hashdiff], 'stage') }} = {{ dbtvault.prefix([src_hashdiff], 'active_records', alias_target='target') }}\r\n                AND {{ dbtvault.multikey(cdk_cols, prefix=['stage', 'active_records'], condition='=') }}\r\n                AND stage.source_count = active_records.latest_count\r\n        )\r\n        AND {{ dbtvault.multikey([src_pk], prefix=['source_data', 'stage'], condition='=') }}\r\n    )\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.is_any_incremental", "macro.dbtvault.multikey", "macro.dbtvault.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.0913765, "supported_languages": null}, "macro.dbtvault.pit": {"name": "pit", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\pit.sql", "original_file_path": "macros\\tables\\snowflake\\pit.sql", "unique_id": "macro.dbtvault.pit", "macro_sql": "{%- macro pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\r\n\r\n    {%- if dbtvault.is_something(src_extra_columns) and execute -%}\r\n      {%- do exceptions.warn(\"WARNING: src_extra_columns not yet available for PITs or Bridges. This parameter will be ignored.\") -%}\r\n    {%- endif -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk,\r\n                                           as_of_dates_table=as_of_dates_table,\r\n                                           satellites=satellites,\r\n                                           stage_tables_ldts=stage_tables_ldts,\r\n                                           src_ldts=src_ldts,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n\r\n    {{- dbtvault.prepend_generated_by() }}\r\n\r\n    {%- for stg in stage_tables_ldts %}\r\n        {{ \"-- depends_on: \" ~ ref(stg) -}}\r\n    {%- endfor -%}\r\n\r\n    {{ adapter.dispatch('pit', 'dbtvault')(src_pk=src_pk,\r\n                                           src_extra_columns=src_extra_columns,\r\n                                           as_of_dates_table=as_of_dates_table,\r\n                                           satellites=satellites,\r\n                                           stage_tables_ldts=stage_tables_ldts,\r\n                                           src_ldts=src_ldts,\r\n                                           source_model=source_model) -}}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.is_something", "macro.dbtvault.check_required_parameters", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__pit"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.1075096, "supported_languages": null}, "macro.dbtvault.default__pit": {"name": "default__pit", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\pit.sql", "original_file_path": "macros\\tables\\snowflake\\pit.sql", "unique_id": "macro.dbtvault.default__pit", "macro_sql": "{%- macro default__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\r\n\r\n{#- Acquiring the source relation for the AS_OF table -#}\r\n{%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\r\n    {%- set source_name = as_of_dates_table | first -%}\r\n    {%- set source_table_name = as_of_dates_table[source_name] -%}\r\n    {%- set as_of_table_relation = source(source_name, source_table_name) -%}\r\n{%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\r\n    {%- set as_of_table_relation = ref(as_of_dates_table) -%}\r\n{%- endif -%}\r\n\r\n{#- Setting ghost values to replace NULLS -#}\r\n{%- set ghost_pk = '0000000000000000' -%}\r\n{%- set ghost_date = '1900-01-01 00:00:00.000' %}\r\n\r\n{%- if dbtvault.is_any_incremental() -%}\r\n    {%- set new_as_of_dates_cte = 'new_rows_as_of' -%}\r\n{%- else -%}\r\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\r\n{%- endif %}\r\n\r\nWITH as_of_dates AS (\r\n    SELECT * FROM {{ as_of_table_relation }}\r\n),\r\n\r\n{%- if dbtvault.is_any_incremental() %}\r\n\r\n{{ dbtvault.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\r\n\r\nbackfill_rows_as_of_dates AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        b.AS_OF_DATE\r\n    FROM new_rows_pks AS a\r\n    INNER JOIN backfill_as_of AS b\r\n        ON (1=1)\r\n),\r\n\r\nbackfill AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        a.AS_OF_DATE,\r\n\r\n    {% for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_name = sat_name %}\r\n\r\n        {% if target.type == \"sqlserver\" %}\r\n        CONVERT({{ dbtvault.type_binary() }}, '{{ ghost_pk }}', 2) AS {{ dbtvault.escape_column_names(\"{}_{}\".format(sat_name, sat_pk_name)) }},\r\n        CAST('{{ ghost_date }}' AS {{ dbtvault.type_timestamp() }}) AS {{ dbtvault.escape_column_names(\"{}_{}\".format(sat_name, sat_ldts_name)) }}\r\n        {% else %}\r\n        CAST('{{ ghost_pk }}' AS {{ dbtvault.type_binary() }}) AS {{ dbtvault.escape_column_names(\"{}_{}\".format(sat_name, sat_pk_name)) }},\r\n        CAST('{{ ghost_date }}' AS {{ dbtvault.type_timestamp() }}) AS {{ dbtvault.escape_column_names(\"{}_{}\".format(sat_name, sat_ldts_name)) }}\r\n        {% endif -%}\r\n\r\n\r\n        {{- ',' if not loop.last -}}\r\n\r\n    {%- endfor %}\r\n    FROM backfill_rows_as_of_dates AS a\r\n\r\n    {% for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_pk = dbtvault.escape_column_names(satellites[sat_name]['pk'][sat_pk_name]) -%}\r\n        {%- set sat_ldts = dbtvault.escape_column_names(satellites[sat_name]['ldts'][sat_ldts_name]) -%}\r\n\r\n        LEFT JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\r\n        ON a.{{ src_pk }} = {{ sat_name | lower ~ '_src' }}.{{ sat_pk }}\r\n        AND {{ sat_name | lower ~ '_src' }}.{{ sat_ldts }} <= a.AS_OF_DATE\r\n    {% endfor -%}\r\n\r\n    GROUP BY\r\n        {{ dbtvault.prefix([src_pk], 'a') }}, a.AS_OF_DATE\r\n),\r\n{%- endif %}\r\n\r\nnew_rows_as_of_dates AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        b.AS_OF_DATE\r\n    FROM {{ ref(source_model) }} AS a\r\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\r\n    ON (1=1)\r\n),\r\n\r\nnew_rows AS (\r\n    SELECT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        a.AS_OF_DATE,\r\n    {%- for sat_name in satellites %}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_pk = dbtvault.escape_column_names(satellites[sat_name]['pk'][sat_pk_name]) -%}\r\n        {%- set sat_ldts = dbtvault.escape_column_names(satellites[sat_name]['ldts'][sat_ldts_name]) -%}\r\n\r\n        {%- if target.type == \"sqlserver\" -%}\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\r\n                 CONVERT({{ dbtvault.type_binary() }}, '{{ ghost_pk }}', 2))\r\n        AS {{ dbtvault.escape_column_names(\"{}_{}\".format(sat_name, sat_pk_name)) }},\r\n\r\n        {%- else %}\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\r\n                 CAST('{{ ghost_pk }}' AS {{ dbtvault.type_binary() }}))\r\n        AS {{ dbtvault.escape_column_names(\"{}_{}\".format(sat_name, sat_pk_name)) }},\r\n\r\n        {%- endif %}\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\r\n                 CAST('{{ ghost_date }}' AS {{ dbtvault.type_timestamp() }}))\r\n        AS {{ dbtvault.escape_column_names(\"{}_{}\".format(sat_name, sat_ldts_name)) }}\r\n\r\n        {{- \",\" if not loop.last }}\r\n    {%- endfor %}\r\n\r\n    FROM new_rows_as_of_dates AS a\r\n\r\n    {% for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_pk = dbtvault.escape_column_names(satellites[sat_name]['pk'][sat_pk_name]) -%}\r\n        {%- set sat_ldts = dbtvault.escape_column_names(satellites[sat_name]['ldts'][sat_ldts_name]) -%}\r\n\r\n        LEFT JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src'}}\r\n        ON a.{{ src_pk }} = {{ sat_name | lower }}_src.{{ sat_pk }}\r\n        AND {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} <= a.AS_OF_DATE\r\n\r\n    {% endfor -%}\r\n\r\n    GROUP BY\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        a.AS_OF_DATE\r\n),\r\n\r\npit AS (\r\n    SELECT * FROM new_rows\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    UNION ALL\r\n    SELECT * FROM overlap_pks\r\n    UNION ALL\r\n    SELECT * FROM backfill\r\n    {% endif %}\r\n)\r\n\r\nSELECT DISTINCT * FROM pit\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.is_any_incremental", "macro.dbtvault.as_of_date_window", "macro.dbtvault.prefix", "macro.dbtvault.type_binary", "macro.dbtvault.escape_column_names", "macro.dbtvault.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.1155844, "supported_languages": null}, "macro.dbtvault.sat": {"name": "sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\sat.sql", "original_file_path": "macros\\tables\\snowflake\\sat.sql", "unique_id": "macro.dbtvault.sat", "macro_sql": "{%- macro sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_hashdiff=src_hashdiff, src_payload=src_payload,\r\n                                           src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_payload = dbtvault.process_payload_column_excludes(\r\n                      src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                      src_payload=src_payload, src_extra_columns=src_extra_columns, src_eff=src_eff,\r\n                      src_ldts=src_ldts, src_source=src_source, source_model=source_model) -%}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_hashdiff = dbtvault.escape_column_names(src_hashdiff) -%}\r\n\r\n    {%- set src_payload = dbtvault.escape_column_names(src_payload) -%}\r\n\r\n    {%- set src_extra_columns = dbtvault.escape_column_names(src_extra_columns) -%}\r\n    {%- set src_eff = dbtvault.escape_column_names(src_eff) -%}\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n    {%- set src_source = dbtvault.escape_column_names(src_source) -%}\r\n\r\n    {{ dbtvault.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('sat', 'dbtvault')(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                                           src_payload=src_payload, src_extra_columns=src_extra_columns,\r\n                                           src_eff=src_eff, src_ldts=src_ldts,\r\n                                           src_source=src_source, source_model=source_model) -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.process_payload_column_excludes", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.1236491, "supported_languages": null}, "macro.dbtvault.default__sat": {"name": "default__sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\sat.sql", "original_file_path": "macros\\tables\\snowflake\\sat.sql", "unique_id": "macro.dbtvault.default__sat", "macro_sql": "{%- macro default__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\r\n{%- set window_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\r\n{%- set pk_cols = dbtvault.expand_column_list(columns=[src_pk]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif %}\r\n\r\nWITH source_data AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'a', alias_target='source') }}\r\n    {%- else %}\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='source') }}\r\n    {%- endif %}\r\n    FROM {{ ref(source_model) }} AS a\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='a', condition='IS NOT NULL') }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    AND __PERIOD_FILTER__\r\n    {% elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    AND __RANK_FILTER__\r\n    {% endif %}\r\n),\r\n\r\n{% if dbtvault.is_any_incremental() %}\r\n\r\nlatest_records AS (\r\n    SELECT {{ dbtvault.prefix(window_cols, 'a', alias_target='target') }}\r\n    FROM (\r\n        SELECT {{ dbtvault.prefix(window_cols, 'current_records', alias_target='target') }},\r\n            RANK() OVER (\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'current_records') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'current_records') }} DESC\r\n            ) AS rank\r\n        FROM {{ this }} AS current_records\r\n            JOIN (\r\n                SELECT DISTINCT {{ dbtvault.prefix([src_pk], 'source_data') }}\r\n                FROM source_data\r\n            ) AS source_records\r\n                ON {{ dbtvault.multikey(src_pk, prefix=['current_records','source_records'], condition='=') }}\r\n    ) AS a\r\n    WHERE a.rank = 1\r\n),\r\n\r\n{%- endif -%}\r\n\r\nrecords_to_insert AS (\r\n    SELECT DISTINCT {{ dbtvault.alias_all(source_cols, 'stage') }}\r\n    FROM source_data AS stage\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN latest_records\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['latest_records','stage'], condition='=') }}\r\n        AND {{ dbtvault.prefix([src_hashdiff], 'latest_records', alias_target='target') }} = {{ dbtvault.prefix([src_hashdiff], 'stage') }}\r\n    WHERE {{ dbtvault.prefix([src_hashdiff], 'latest_records', alias_target='target') }} IS NULL\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.131779, "supported_languages": null}, "macro.dbtvault.t_link": {"name": "t_link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\t_link.sql", "original_file_path": "macros\\tables\\snowflake\\t_link.sql", "unique_id": "macro.dbtvault.t_link", "macro_sql": "{%- macro t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_fk=src_fk, src_eff=src_eff,\r\n                                           src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_fk = dbtvault.escape_column_names(src_fk) -%}\r\n    {%- set src_payload = dbtvault.escape_column_names(src_payload) -%}\r\n    {%- set src_extra_columns = dbtvault.escape_column_names(src_extra_columns) -%}\r\n    {%- set src_eff = dbtvault.escape_column_names(src_eff) -%}\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n    {%- set src_source = dbtvault.escape_column_names(src_source) -%}\r\n\r\n    {{ dbtvault.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('t_link', 'dbtvault')(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\r\n                                               src_extra_columns=src_extra_columns,\r\n                                               src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\r\n                                               source_model=source_model) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.escape_column_names", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.131779, "supported_languages": null}, "macro.dbtvault.default__t_link": {"name": "default__t_link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\t_link.sql", "original_file_path": "macros\\tables\\snowflake\\t_link.sql", "unique_id": "macro.dbtvault.default__t_link", "macro_sql": "\r\n\r\n{%- macro default__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\r\n{%- set fk_cols = dbtvault.expand_column_list([src_fk]) %}\r\n\r\nWITH stage AS (\r\n    SELECT {{ source_cols | join(', ') }}\r\n    FROM {{ ref(source_model) }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    WHERE __PERIOD_FILTER__\r\n    AND {{ dbtvault.multikey(src_pk, condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, condition='IS NOT NULL') }}\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    WHERE __RANK_FILTER__\r\n    AND {{ dbtvault.multikey(src_pk, condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, condition='IS NOT NULL') }}\r\n    {%- else %}\r\n    WHERE {{ dbtvault.multikey(src_pk, condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, condition='IS NOT NULL') }}\r\n    {%- endif %}\r\n),\r\nrecords_to_insert AS (\r\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols, 'stg') }}\r\n    FROM stage AS stg\r\n    {% if dbtvault.is_any_incremental() -%}\r\n    LEFT JOIN {{ this }} AS tgt\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['stg','tgt'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='tgt', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.multikey", "macro.dbtvault.prefix", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.1397924, "supported_languages": null}, "macro.dbtvault.xts": {"name": "xts", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\xts.sql", "original_file_path": "macros\\tables\\snowflake\\xts.sql", "unique_id": "macro.dbtvault.xts", "macro_sql": "{%- macro xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_satellite=src_satellite,\r\n                                           src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_pk = dbtvault.escape_column_names(src_pk) -%}\r\n    {%- set src_ldts = dbtvault.escape_column_names(src_ldts) -%}\r\n    {%- set src_extra_columns = dbtvault.escape_column_names(src_extra_columns) -%}\r\n    {%- set src_source = dbtvault.escape_column_names(src_source) -%}\r\n\r\n    {%- if not dbtvault.is_list(source_model) -%}\r\n        {%- set source_model = [source_model] -%}\r\n    {%- endif -%}\r\n\r\n    {{ dbtvault.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('xts', 'dbtvault')(src_pk=src_pk,\r\n                                            src_satellite=src_satellite,\r\n                                            src_extra_columns=src_extra_columns,\r\n                                            src_ldts=src_ldts,\r\n                                            src_source=src_source,\r\n                                            source_model=source_model) -}}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.escape_column_names", "macro.dbtvault.is_list", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.1478868, "supported_languages": null}, "macro.dbtvault.default__xts": {"name": "default__xts", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\snowflake\\xts.sql", "original_file_path": "macros\\tables\\snowflake\\xts.sql", "unique_id": "macro.dbtvault.default__xts", "macro_sql": "{%- macro default__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set hashdiff_escaped = dbtvault.escape_column_names('HASHDIFF') -%}\r\n{%- set satellite_name_escaped = dbtvault.escape_column_names('SATELLITE_NAME') %}\r\n{%- set satellite_count = src_satellite.keys() | list | length %}\r\n{%- set stage_count = source_model | length %}\r\n\r\n{%- if execute -%}\r\n    {%- do dbt_utils.log_info('Loading {} from {} source(s) and {} satellite(s)'.format(\"{}.{}.{}\".format(this.database, this.schema, this.identifier),\r\n                                                                                       stage_count, satellite_count)) -%}\r\n{%- endif %}\r\n\r\n{%- set ns = namespace(last_cte= \"\") %}\r\n\r\n{{ 'WITH ' }}\r\n{%- for src in source_model -%}\r\n    {%- for satellite in src_satellite.items() -%}\r\n        {%- set satellite_name = (satellite[1]['sat_name'].values() | list)[0] -%}\r\n        {%- set hashdiff = (satellite[1]['hashdiff'].values() | list)[0] %}\r\n        {%- set cte_name = \"satellite_{}_from_{}\".format(satellite_name, src) | lower %}\r\n\r\n{{ cte_name }} AS (\r\n    SELECT {{ dbtvault.prefix([src_pk], 's') }},\r\n           s.{{ dbtvault.escape_column_names(hashdiff) }} AS {{ hashdiff_escaped }},\r\n           s.{{ dbtvault.escape_column_names(satellite_name) }} AS {{ satellite_name_escaped }},\r\n           {%- if dbtvault.is_something(src_extra_columns) -%}\r\n               {{ dbtvault.prefix([src_extra_columns], 's') }},\r\n           {%- endif %}\r\n           s.{{ src_ldts }},\r\n           s.{{ src_source }}\r\n    FROM {{ ref(src) }} AS s\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='s', condition='IS NOT NULL') }}\r\n),\r\n\r\n    {%- set ns.last_cte = cte_name %}\r\n    {%- endfor %}\r\n{%- endfor %}\r\n\r\n{%- if stage_count > 1 or satellite_count > 1 %}\r\n\r\nunion_satellites AS (\r\n    {%- for src in source_model %}\r\n        {%- for satellite in src_satellite.items() %}\r\n            {%- set satellite_name = (satellite[1]['sat_name'].values() | list)[0]  %}\r\n            {%- set cte_name = \"satellite_{}_from_{}\".format(satellite_name, src) | lower %}\r\n    SELECT * FROM {{ cte_name }}\r\n            {%- if not loop.last %}\r\n    UNION ALL\r\n            {%- endif %}\r\n        {%- endfor %}\r\n        {%- if not loop.last %}\r\n    UNION ALL\r\n        {%- endif %}\r\n    {%- endfor %}\r\n),\r\n{%- set ns.last_cte = \"union_satellites\" -%}\r\n{%- endif %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'a') }},\r\n        a.{{ hashdiff_escaped }},\r\n        a.{{ satellite_name_escaped }} ,\r\n        {%- if dbtvault.is_something(src_extra_columns) -%}\r\n            {{ dbtvault.prefix([src_extra_columns], 'a') }},\r\n        {%- endif %}\r\n        a.{{ src_ldts }},\r\n        a.{{ src_source }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n        ON (\r\n            a.{{ hashdiff_escaped }} = d.{{ hashdiff_escaped }}\r\n            AND a.{{ src_ldts }} = d.{{ src_ldts }}\r\n            AND a.{{ satellite_name_escaped }} = d.{{ satellite_name_escaped }}\r\n        )\r\n    WHERE d.{{ hashdiff_escaped }} IS NULL\r\n    AND d.{{ src_ldts }} IS NULL\r\n    AND d.{{ satellite_name_escaped }} IS NULL\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.escape_column_names", "macro.dbt_utils.log_info", "macro.dbtvault.prefix", "macro.dbtvault.is_something", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.1559374, "supported_languages": null}, "macro.dbtvault.sqlserver__bridge": {"name": "sqlserver__bridge", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\sqlserver\\bridge.sql", "original_file_path": "macros\\tables\\sqlserver\\bridge.sql", "unique_id": "macro.dbtvault.sqlserver__bridge", "macro_sql": "{%- macro sqlserver__bridge(src_pk, as_of_dates_table, bridge_walk, stage_tables_ldts, src_extra_columns, src_ldts, source_model) -%}\r\n\r\n{{ dbtvault.default__bridge(src_pk=src_pk,\r\n                            as_of_dates_table=as_of_dates_table,\r\n                            bridge_walk=bridge_walk,\r\n                            stage_tables_ldts=stage_tables_ldts,\r\n                            src_extra_columns=src_extra_columns,\r\n                            src_ldts=src_ldts,\r\n                            source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.1559374, "supported_languages": null}, "macro.dbtvault.sqlserver__eff_sat": {"name": "sqlserver__eff_sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\sqlserver\\eff_sat.sql", "original_file_path": "macros\\tables\\sqlserver\\eff_sat.sql", "unique_id": "macro.dbtvault.sqlserver__eff_sat", "macro_sql": "{%- macro sqlserver__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source]) -%}\r\n{%- set fk_cols = dbtvault.expand_column_list(columns=[src_dfk, src_sfk]) -%}\r\n{%- set dfk_cols = dbtvault.expand_column_list(columns=[src_dfk]) -%}\r\n{%- set is_auto_end_dating = config.get('is_auto_end_dating', default=false) %}\r\n\r\n{%- set max_datetime = dbtvault.max_datetime() %}\r\n\r\nWITH source_data AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='source') }}\r\n    FROM {{ ref(source_model) }} AS a\r\n    WHERE {{ dbtvault.multikey(src_dfk, prefix='a', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(src_sfk, prefix='a', condition='IS NOT NULL') }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{%- if dbtvault.is_any_incremental() %}\r\n\r\n{# Selecting the most recent records for each link hashkey -#}\r\nlatest_records AS (\r\n    SELECT *\r\n    FROM\r\n    (\r\n        SELECT {{ dbtvault.alias_all(source_cols, 'b') }},\r\n               ROW_NUMBER() OVER (\r\n                    PARTITION BY {{ dbtvault.prefix([src_pk], 'b') }}\r\n                    ORDER BY b.{{ src_ldts }} DESC\r\n               ) AS row_num\r\n        FROM {{ this }} AS b\r\n    ) l\r\n    WHERE l.row_num = 1\r\n),\r\n\r\n{# Selecting the open records of the most recent records for each link hashkey -#}\r\nlatest_open AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'c') }}\r\n    FROM latest_records AS c\r\n    WHERE CONVERT(DATE, c.{{ src_end_date }}) = CONVERT(DATE, '{{ max_datetime }}')\r\n),\r\n\r\n{# Selecting the closed records of the most recent records for each link hashkey -#}\r\nlatest_closed AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'd') }}\r\n    FROM latest_records AS d\r\n    WHERE CONVERT(DATE, d.{{ src_end_date }}) != CONVERT(DATE, '{{ max_datetime }}')\r\n),\r\n\r\n{# Identifying the completely new link relationships to be opened in eff sat -#}\r\nnew_open_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'f') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'f') }},\r\n        {%- if dbtvault.is_something(src_extra_columns) -%}\r\n        {{ dbtvault.prefix([src_extra_columns], 'f') }},\r\n        {%- endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        f.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        f.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        f.{{ src_end_date }} AS {{ src_end_date }},\r\n        f.{{ src_eff }} AS {{ src_eff }},\r\n        f.{{ src_ldts }},\r\n        f.{{ src_source }}\r\n    FROM source_data AS f\r\n    LEFT JOIN latest_records AS lr\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['f','lr'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='lr', condition='IS NULL') }}\r\n),\r\n\r\n{# Identifying the currently closed link relationships to be reopened in eff sat -#}\r\nnew_reopened_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lc') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'lc') }},\r\n        {%- if dbtvault.is_something(src_extra_columns) -%}\r\n        {{ dbtvault.prefix([src_extra_columns], 'g') }},\r\n        {%- endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        g.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        g.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        g.{{ src_end_date }} AS {{ src_end_date }},\r\n        g.{{ src_eff }} AS {{ src_eff }},\r\n        g.{{ src_ldts }},\r\n        g.{{ src_source }}\r\n    FROM source_data AS g\r\n    INNER JOIN latest_closed AS lc\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['g','lc'], condition='=') }}\r\n    WHERE CAST((g.{{ src_end_date }}) AS DATE) = CAST(('{{ max_datetime }}') AS DATE)\r\n),\r\n\r\n{%- if is_auto_end_dating %}\r\n\r\n{# Creating the closing records -#}\r\n{# Identifying the currently open relationships that need to be closed due to change in SFK(s) -#}\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lo') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'lo') }},\r\n        {%- if dbtvault.is_something(src_extra_columns) -%}\r\n        {{ dbtvault.prefix([src_extra_columns], 'h') }},\r\n        {%- endif -%}\r\n        lo.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_eff }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    INNER JOIN latest_open AS lo\r\n    ON {{ dbtvault.multikey(src_dfk, prefix=['lo', 'h'], condition='=') }}\r\n    WHERE ({{ dbtvault.multikey(src_sfk, prefix=['lo', 'h'], condition='<>', operator='OR') }})\r\n),\r\n\r\n{#- else if (not) is_auto_end_dating -#}\r\n{% else %}\r\n\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ dbtvault.prefix([src_pk], 'lo') }},\r\n        {{ dbtvault.alias_all(fk_cols, 'lo') }},\r\n        {%- if dbtvault.is_something(src_extra_columns) -%}\r\n        {{ dbtvault.prefix([src_extra_columns], 'h') }},\r\n        {%- endif -%}\r\n        h.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_end_date }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    LEFT JOIN Latest_open AS lo\r\n    ON lo.{{ src_pk }} = h.{{ src_pk }}\r\n    LEFT JOIN latest_closed AS lc\r\n    ON lc.{{ src_pk }} = h.{{ src_pk }}\r\n    WHERE CAST((h.{{ src_end_date }}) AS DATE) != CAST(('{{ max_datetime }}') AS DATE)\r\n    AND lo.{{ src_pk }} IS NOT NULL\r\n    AND lc.{{ src_pk }} IS NULL\r\n),\r\n\r\n{#- end if is_auto_end_dating -#}\r\n{%- endif %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT * FROM new_open_records\r\n    UNION\r\n    SELECT * FROM new_reopened_records\r\n    UNION\r\n    SELECT * FROM new_closed_records\r\n)\r\n\r\n{#- else if not dbtvault.is_any_incremental() -#}\r\n{%- else %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'i') }}\r\n    FROM source_data AS i\r\n)\r\n\r\n{#- end if not dbtvault.is_any_incremental() -#}\r\n{%- endif %}\r\n\r\nSELECT * FROM records_to_insert\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.max_datetime", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all", "macro.dbtvault.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.172097, "supported_languages": null}, "macro.dbtvault.sqlserver__hub": {"name": "sqlserver__hub", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\sqlserver\\hub.sql", "original_file_path": "macros\\tables\\sqlserver\\hub.sql", "unique_id": "macro.dbtvault.sqlserver__hub", "macro_sql": "{%- macro sqlserver__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif %}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ source_cols_with_rank | join(', ') }}\r\n    {%- else %}\r\n    SELECT {{ source_cols | join(', ') }}\r\n    {%- endif %}\r\n    FROM (\r\n        {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n        SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\r\n        {%- else %}\r\n        SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\r\n        {%- endif %}\r\n               ROW_NUMBER() OVER(\r\n                   PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\r\n                   ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\r\n               ) AS row_number\r\n        FROM {{ ref(src) }} AS rr\r\n        WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    ) h\r\n    WHERE h.row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- endif -%}\r\n\r\n{%- if stage_count > 1 %}\r\n\r\nrow_rank_union AS (\r\n    SELECT *\r\n    FROM (\r\n        SELECT ru.*,\r\n               ROW_NUMBER() OVER(\r\n                   PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\r\n                   ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\r\n               ) AS row_rank_number\r\n        FROM {{ ns.last_cte }} AS ru\r\n        WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    ) h\r\n    WHERE h.row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.1801724, "supported_languages": null}, "macro.dbtvault.sqlserver__link": {"name": "sqlserver__link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\sqlserver\\link.sql", "original_file_path": "macros\\tables\\sqlserver\\link.sql", "unique_id": "macro.dbtvault.sqlserver__link", "macro_sql": "{%- macro sqlserver__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\r\n{%- set fk_cols = dbtvault.expand_column_list([src_fk]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + dbtvault.escape_column_names([config.get('rank_column')]) -%}\r\n{%- endif -%}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n    SELECT *\r\n    FROM\r\n    (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\r\n           ) AS row_number\r\n    FROM {{ ref(src) }} AS rr\r\n    {%- if stage_count == 1 %}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\r\n    {%- endif %}\r\n    ) l\r\n    WHERE l.row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{% endif %}\r\n{%- if stage_count > 1 %}\r\n\r\nrow_rank_union AS (\r\n    SELECT *\r\n    FROM\r\n    (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    AND {{ dbtvault.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\r\n    ) r\r\n    WHERE r.row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if dbtvault.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.escape_column_names", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.1882255, "supported_languages": null}, "macro.dbtvault.sqlserver__ma_sat": {"name": "sqlserver__ma_sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\sqlserver\\ma_sat.sql", "original_file_path": "macros\\tables\\sqlserver\\ma_sat.sql", "unique_id": "macro.dbtvault.sqlserver__ma_sat", "macro_sql": "{%- macro sqlserver__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\r\n{%- set rank_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\r\n{%- set cdk_cols = dbtvault.expand_column_list(columns=[src_cdk]) -%}\r\n{%- set cols_for_latest = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif -%}\r\n\r\n{# Select unique source records -#}\r\nWITH source_data AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols_with_rank, 's', alias_target='source') }}\r\n    {%- else %}\r\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols, 's', alias_target='source') }}\r\n    {%- endif %}\r\n    FROM {{ ref(source_model) }} AS s\r\n    WHERE {{ dbtvault.multikey([src_pk], prefix='s', condition='IS NOT NULL') }}\r\n    {%- for child_key in src_cdk %}\r\n        AND {{ dbtvault.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\r\n    {%- endfor %}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n        AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n        AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{# if any_incremental -#}\r\n{% if dbtvault.is_any_incremental() %}\r\n\r\nsource_data_with_count AS (\r\n    SELECT a.*\r\n        ,b.source_count\r\n    FROM source_data a\r\n    INNER JOIN\r\n    (\r\n        SELECT {{ dbtvault.prefix([src_pk], 't') }}\r\n            ,COUNT(*) AS source_count\r\n        FROM (SELECT DISTINCT {{ dbtvault.prefix([src_pk], 's') }}, {{ dbtvault.prefix([src_hashdiff], 's', alias_target='source') }}, {{ dbtvault.prefix(cdk_cols, 's') }} FROM source_data AS s) AS t\r\n        GROUP BY {{ dbtvault.prefix([src_pk], 't') }}\r\n    ) AS b\r\n    ON {{ dbtvault.multikey([src_pk], prefix=['a','b'], condition='=') }}\r\n),\r\n\r\n{# Select latest records from satellite, restricted to PKs in source data -#}\r\nlatest_records AS (\r\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'mas', alias_target='target') }}\r\n        ,mas.latest_rank\r\n        ,DENSE_RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'mas') }}\r\n            ORDER BY {{ dbtvault.prefix([src_hashdiff], 'mas', alias_target='target') }}, {{ dbtvault.prefix([src_cdk], 'mas') }} ASC) AS check_rank\r\n    FROM\r\n    (\r\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'inner_mas', alias_target='target') }}\r\n        ,RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'inner_mas') }}\r\n            ORDER BY {{ dbtvault.prefix([src_ldts], 'inner_mas') }} DESC) AS latest_rank\r\n    FROM {{ this }} AS inner_mas\r\n    INNER JOIN (SELECT DISTINCT {{ dbtvault.prefix([src_pk], 's') }} FROM source_data as s ) AS spk\r\n        ON {{ dbtvault.multikey([src_pk], prefix=['inner_mas', 'spk'], condition='=') }}\r\n    ) AS mas\r\n    WHERE latest_rank = 1\r\n),\r\n\r\n{# Select summary details for each group of latest records -#}\r\nlatest_group_details AS (\r\n    SELECT {{ dbtvault.prefix([src_pk], 'lr') }}\r\n        ,{{ dbtvault.prefix([src_ldts], 'lr') }}\r\n        ,MAX(lr.check_rank) AS latest_count\r\n    FROM latest_records AS lr\r\n    GROUP BY {{ dbtvault.prefix([src_pk], 'lr') }}, {{ dbtvault.prefix([src_ldts], 'lr') }}\r\n),\r\n\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n\r\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\r\nrecords_to_insert AS (\r\n{% if not dbtvault.is_any_incremental() %}\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'source_data') }}\r\n    FROM source_data\r\n{%- endif %}\r\n\r\n{# if any_incremental -#}\r\n{% if dbtvault.is_any_incremental() %}\r\n    SELECT {{ dbtvault.alias_all(source_cols, 'source_data_with_count') }}\r\n    FROM source_data_with_count\r\n    WHERE EXISTS (\r\n        SELECT 1\r\n        FROM source_data_with_count AS stage\r\n        WHERE NOT EXISTS (\r\n            SELECT 1\r\n            FROM (\r\n                SELECT {{ dbtvault.prefix(cols_for_latest, 'lr', alias_target='target') }}\r\n                ,lg.latest_count\r\n                FROM latest_records AS lr\r\n                INNER JOIN latest_group_details AS lg\r\n                    ON {{ dbtvault.multikey([src_pk], prefix=['lr', 'lg'], condition='=') }}\r\n                    AND {{ dbtvault.prefix([src_ldts], 'lr') }} = {{ dbtvault.prefix([src_ldts], 'lg') }}\r\n            ) AS active_records\r\n            WHERE {{ dbtvault.multikey([src_pk], prefix=['stage', 'active_records'], condition='=') }}\r\n                AND {{ dbtvault.prefix([src_hashdiff], 'stage') }} = {{ dbtvault.prefix([src_hashdiff], 'active_records', alias_target='target') }}\r\n{# In order to maintain the parallel with the standard satellite, we don''t allow for groups of records to be updated if the ldts is the only difference #}\r\n{#        AND {{ dbtvault.prefix([src_ldts], 'stage') }} = {{ dbtvault.prefix([src_ldts], 'active_records') }} #}\r\n                AND {{ dbtvault.multikey(src_cdk, prefix=['stage', 'active_records'], condition='=') }}\r\n                AND stage.source_count = active_records.latest_count\r\n        )\r\n        AND {{ dbtvault.multikey([src_pk], prefix=['source_data_with_count', 'stage'], condition='=') }}\r\n    )\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2043803, "supported_languages": null}, "macro.dbtvault.sqlserver__pit": {"name": "sqlserver__pit", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\sqlserver\\pit.sql", "original_file_path": "macros\\tables\\sqlserver\\pit.sql", "unique_id": "macro.dbtvault.sqlserver__pit", "macro_sql": "{%- macro sqlserver__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\r\n\r\n{{ dbtvault.default__pit(src_pk=src_pk,\r\n                         src_extra_columns=src_extra_columns,\r\n                         as_of_dates_table=as_of_dates_table,\r\n                         satellites=satellites,\r\n                         stage_tables_ldts=stage_tables_ldts,\r\n                         src_ldts=src_ldts,\r\n                         source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__pit"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2043803, "supported_languages": null}, "macro.dbtvault.sqlserver__sat": {"name": "sqlserver__sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\sqlserver\\sat.sql", "original_file_path": "macros\\tables\\sqlserver\\sat.sql", "unique_id": "macro.dbtvault.sqlserver__sat", "macro_sql": "{%- macro sqlserver__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{ dbtvault.default__sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                             src_payload=src_payload, src_extra_columns=src_extra_columns,\r\n                             src_eff=src_eff, src_ldts=src_ldts,\r\n                             src_source=src_source, source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2043803, "supported_languages": null}, "macro.dbtvault.sqlserver__t_link": {"name": "sqlserver__t_link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\sqlserver\\t_link.sql", "original_file_path": "macros\\tables\\sqlserver\\t_link.sql", "unique_id": "macro.dbtvault.sqlserver__t_link", "macro_sql": "{%- macro sqlserver__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{{ dbtvault.default__t_link(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\r\n                            src_extra_columns=src_extra_columns,\r\n                            src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\r\n                            source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2043803, "supported_languages": null}, "macro.dbtvault.biquery__xts": {"name": "biquery__xts", "resource_type": "macro", "package_name": "dbtvault", "path": "macros\\tables\\sqlserver\\xts.sql", "original_file_path": "macros\\tables\\sqlserver\\xts.sql", "unique_id": "macro.dbtvault.biquery__xts", "macro_sql": "{%- macro biquery__xts(src_pk, src_satellite, src_ldts, src_source, source_model) -%}\r\n\r\n{{ dbtvault.default__xts(src_pk=src_pk,\r\n                         src_satellite=src_satellite,\r\n                         src_ldts=src_ldts,\r\n                         src_source=src_source,\r\n                         source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2043803, "supported_languages": null}, "macro.dbt_utils.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "unique_id": "macro.dbt_utils.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2043803, "supported_languages": null}, "macro.dbt_utils.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "unique_id": "macro.dbt_utils.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2043803, "supported_languages": null}, "macro.dbt_utils.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "unique_id": "macro.dbt_utils.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "unique_id": "macro.dbt_utils.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "unique_id": "macro.dbt_utils.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "unique_id": "macro.dbt_utils.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "unique_id": "macro.dbt_utils.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt_utils.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt_utils.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.redshift__cast_bool_to_text": {"name": "redshift__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\concat.sql", "original_file_path": "macros\\cross_db_utils\\concat.sql", "unique_id": "macro.dbt_utils.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\concat.sql", "original_file_path": "macros\\cross_db_utils\\concat.sql", "unique_id": "macro.dbt_utils.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp": {"name": "redshift__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.current_timestamp_in_utc": {"name": "current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp_in_utc": {"name": "default__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"name": "snowflake__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"name": "postgres__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"name": "redshift__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2124922, "supported_languages": null}, "macro.dbt_utils.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.redshift__type_string": {"name": "redshift__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.postgres__type_string": {"name": "postgres__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.snowflake__type_string": {"name": "snowflake__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.bigquery__type_float": {"name": "bigquery__type_float", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.bigquery__type_numeric": {"name": "bigquery__type_numeric", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.bigquery__type_bigint": {"name": "bigquery__type_bigint", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.bigquery__type_int": {"name": "bigquery__type_int", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "unique_id": "macro.dbt_utils.bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "unique_id": "macro.dbt_utils.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "unique_id": "macro.dbt_utils.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2205172, "supported_languages": null}, "macro.dbt_utils.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "unique_id": "macro.dbt_utils.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2286623, "supported_languages": null}, "macro.dbt_utils.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "unique_id": "macro.dbt_utils.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2286623, "supported_languages": null}, "macro.dbt_utils.redshift__dateadd": {"name": "redshift__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "unique_id": "macro.dbt_utils.redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2286623, "supported_languages": null}, "macro.dbt_utils.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "unique_id": "macro.dbt_utils.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2286623, "supported_languages": null}, "macro.dbt_utils.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "unique_id": "macro.dbt_utils.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2286623, "supported_languages": null}, "macro.dbt_utils.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "unique_id": "macro.dbt_utils.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2286623, "supported_languages": null}, "macro.dbt_utils.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "unique_id": "macro.dbt_utils.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2365985, "supported_languages": null}, "macro.dbt_utils.redshift__datediff": {"name": "redshift__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "unique_id": "macro.dbt_utils.redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2365985, "supported_languages": null}, "macro.dbt_utils.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "unique_id": "macro.dbt_utils.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2365985, "supported_languages": null}, "macro.dbt_utils.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "unique_id": "macro.dbt_utils.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2365985, "supported_languages": null}, "macro.dbt_utils.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "unique_id": "macro.dbt_utils.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2365985, "supported_languages": null}, "macro.dbt_utils.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "unique_id": "macro.dbt_utils.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2365985, "supported_languages": null}, "macro.dbt_utils.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "unique_id": "macro.dbt_utils.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2365985, "supported_languages": null}, "macro.dbt_utils.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2365985, "supported_languages": null}, "macro.dbt_utils.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2365985, "supported_languages": null}, "macro.dbt_utils.except": {"name": "except", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "unique_id": "macro.dbt_utils.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2365985, "supported_languages": null}, "macro.dbt_utils.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "unique_id": "macro.dbt_utils.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2365985, "supported_languages": null}, "macro.dbt_utils.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "unique_id": "macro.dbt_utils.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2365985, "supported_languages": null}, "macro.dbt_utils.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "unique_id": "macro.dbt_utils.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2365985, "supported_languages": null}, "macro.dbt_utils.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "unique_id": "macro.dbt_utils.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2365985, "supported_languages": null}, "macro.dbt_utils.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "unique_id": "macro.dbt_utils.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2365985, "supported_languages": null}, "macro.dbt_utils.identifier": {"name": "identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "unique_id": "macro.dbt_utils.identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2448044, "supported_languages": null}, "macro.dbt_utils.default__identifier": {"name": "default__identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "unique_id": "macro.dbt_utils.default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2448044, "supported_languages": null}, "macro.dbt_utils.bigquery__identifier": {"name": "bigquery__identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "unique_id": "macro.dbt_utils.bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2448044, "supported_languages": null}, "macro.dbt_utils.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "unique_id": "macro.dbt_utils.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2448044, "supported_languages": null}, "macro.dbt_utils.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "unique_id": "macro.dbt_utils.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2448044, "supported_languages": null}, "macro.dbt_utils.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "unique_id": "macro.dbt_utils.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2448044, "supported_languages": null}, "macro.dbt_utils.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "unique_id": "macro.dbt_utils.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2448044, "supported_languages": null}, "macro.dbt_utils.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "unique_id": "macro.dbt_utils.default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2448044, "supported_languages": null}, "macro.dbt_utils.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "unique_id": "macro.dbt_utils.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2448044, "supported_languages": null}, "macro.dbt_utils.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "unique_id": "macro.dbt_utils.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2448044, "supported_languages": null}, "macro.dbt_utils.redshift__last_day": {"name": "redshift__last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "unique_id": "macro.dbt_utils.redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2448044, "supported_languages": null}, "macro.dbt_utils.length": {"name": "length", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "unique_id": "macro.dbt_utils.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2448044, "supported_languages": null}, "macro.dbt_utils.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "unique_id": "macro.dbt_utils.default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2448044, "supported_languages": null}, "macro.dbt_utils.redshift__length": {"name": "redshift__length", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "unique_id": "macro.dbt_utils.redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2448044, "supported_languages": null}, "macro.dbt_utils.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "unique_id": "macro.dbt_utils.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.252803, "supported_languages": null}, "macro.dbt_utils.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "unique_id": "macro.dbt_utils.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.252803, "supported_languages": null}, "macro.dbt_utils.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "unique_id": "macro.dbt_utils.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.252803, "supported_languages": null}, "macro.dbt_utils.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "unique_id": "macro.dbt_utils.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.252803, "supported_languages": null}, "macro.dbt_utils.redshift__listagg": {"name": "redshift__listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "unique_id": "macro.dbt_utils.redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.252803, "supported_languages": null}, "macro.dbt_utils.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\literal.sql", "original_file_path": "macros\\cross_db_utils\\literal.sql", "unique_id": "macro.dbt_utils.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.252803, "supported_languages": null}, "macro.dbt_utils.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\literal.sql", "original_file_path": "macros\\cross_db_utils\\literal.sql", "unique_id": "macro.dbt_utils.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.252803, "supported_languages": null}, "macro.dbt_utils.position": {"name": "position", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "unique_id": "macro.dbt_utils.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.260871, "supported_languages": null}, "macro.dbt_utils.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "unique_id": "macro.dbt_utils.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.260871, "supported_languages": null}, "macro.dbt_utils.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "unique_id": "macro.dbt_utils.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.260871, "supported_languages": null}, "macro.dbt_utils.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\replace.sql", "original_file_path": "macros\\cross_db_utils\\replace.sql", "unique_id": "macro.dbt_utils.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.260871, "supported_languages": null}, "macro.dbt_utils.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\replace.sql", "original_file_path": "macros\\cross_db_utils\\replace.sql", "unique_id": "macro.dbt_utils.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.260871, "supported_languages": null}, "macro.dbt_utils.right": {"name": "right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "unique_id": "macro.dbt_utils.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.260871, "supported_languages": null}, "macro.dbt_utils.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "unique_id": "macro.dbt_utils.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.260871, "supported_languages": null}, "macro.dbt_utils.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "unique_id": "macro.dbt_utils.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.260871, "supported_languages": null}, "macro.dbt_utils.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "unique_id": "macro.dbt_utils.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.260871, "supported_languages": null}, "macro.dbt_utils.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "unique_id": "macro.dbt_utils.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.260871, "supported_languages": null}, "macro.dbt_utils.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "unique_id": "macro.dbt_utils.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.260871, "supported_languages": null}, "macro.dbt_utils.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "unique_id": "macro.dbt_utils.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.260871, "supported_languages": null}, "macro.dbt_utils.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "unique_id": "macro.dbt_utils.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.260871, "supported_languages": null}, "macro.dbt_utils.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "unique_id": "macro.dbt_utils.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2689345, "supported_languages": null}, "macro.dbt_utils.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "unique_id": "macro.dbt_utils.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2689345, "supported_languages": null}, "macro.dbt_utils._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "unique_id": "macro.dbt_utils._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2689345, "supported_languages": null}, "macro.dbt_utils.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "unique_id": "macro.dbt_utils.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2689345, "supported_languages": null}, "macro.dbt_utils.redshift__split_part": {"name": "redshift__split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "unique_id": "macro.dbt_utils.redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2689345, "supported_languages": null}, "macro.dbt_utils.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "unique_id": "macro.dbt_utils.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2689345, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2689345, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2689345, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2770703, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2770703, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\_is_ephemeral.sql", "original_file_path": "macros\\cross_db_utils\\_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2770703, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\_is_relation.sql", "original_file_path": "macros\\cross_db_utils\\_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2770703, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2770703, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2770703, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2770703, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2770703, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2850382, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2850382, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2850382, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.2931721, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.301222, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.301222, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.301222, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.301222, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.301222, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.301222, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.311585, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3139517, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3139517, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3139517, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3139517, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3139517, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3139517, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3139517, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3218687, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3218687, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3218687, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3218687, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3218687, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3218687, "supported_languages": null}, "macro.dbt_utils.test_not_null_where": {"name": "test_not_null_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "unique_id": "macro.dbt_utils.test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3218687, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_where": {"name": "default__test_not_null_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "unique_id": "macro.dbt_utils.default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3218687, "supported_languages": null}, "macro.dbt_utils.test_unique_where": {"name": "test_unique_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "unique_id": "macro.dbt_utils.test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3298542, "supported_languages": null}, "macro.dbt_utils.default__test_unique_where": {"name": "default__test_unique_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "unique_id": "macro.dbt_utils.default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3300524, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3300524, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3300524, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3300524, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3300524, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3300524, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3300524, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3300524, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3300524, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3300524, "supported_languages": null}, "macro.dbt_utils.get_period_boundaries": {"name": "get_period_boundaries", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3459935, "supported_languages": null}, "macro.dbt_utils.default__get_period_boundaries": {"name": "default__get_period_boundaries", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3483334, "supported_languages": null}, "macro.dbt_utils.get_period_sql": {"name": "get_period_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3483334, "supported_languages": null}, "macro.dbt_utils.default__get_period_sql": {"name": "default__get_period_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3483334, "supported_languages": null}, "macro.dbt_utils.materialization_insert_by_period_default": {"name": "materialization_insert_by_period_default", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.358599, "supported_languages": ["sql"]}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.358599, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.358599, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.358599, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.358599, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3668072, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3668072, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3668072, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3668072, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3668072, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3668072, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3668072, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3747344, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3747344, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3747344, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3747344, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3747344, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3829696, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3829696, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3829696, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3829696, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3829696, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3829696, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3908782, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3908782, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3908782, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3908782, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3908782, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3991072, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3991072, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3991072, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3991072, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3991072, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3991072, "supported_languages": null}, "macro.dbt_utils.bigquery__get_table_types_sql": {"name": "bigquery__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3991072, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3991072, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3991072, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3991072, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.3991072, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.4070213, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.4070213, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.4070213, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.4070213, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.4070213, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.4070213, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.4070213, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.4152484, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.4152484, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.4152484, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.4152484, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {%- for col in dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.4152484, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.4152484, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.423166, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.4256682, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.4336, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.4336, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.44182, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.44182, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.44182, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.44182, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.44182, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.44182, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1683884069.44182, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_grizzly.dwh_dscp_period_inventory_tmp": ["source.dbt_grizzly.PARAMETERS.CALENDAR_HUB", "source.dbt_grizzly.PARAMETERS.CALENDAR_HUB", "source.dbt_grizzly.RAW_JDE.F4101_HUB", "source.dbt_grizzly.RAW_JDE.F4101_HUB", "source.dbt_grizzly.RAW_JDE.F4101_S01", "source.dbt_grizzly.RAW_JDE.F4101_S01", "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DEB_PERIODE_HUB", "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DEB_PERIODE_HUB", "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DEB_PERIODE_S01", "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DEB_PERIODE_S01", "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DISPO_HUB", "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DISPO_HUB", "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DISPO_S01", "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DISPO_S01"], "model.dbt_grizzly.dwh_dscp_period_inventory_hub": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp"], "model.dbt_grizzly.dwh_dscp_period_inventory_sat": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp"], "model.dbt_grizzly.planned_stock": ["model.dbt_grizzly.dwh_dscp_period_inventory_hub", "model.dbt_grizzly.dwh_dscp_period_inventory_sat", "source.dbt_grizzly.PARAMETERS.CALENDAR_HUB"], "model.dbt_grizzly.dwh_work_order_parts_list_tmp": ["source.dbt_grizzly.RAW_JDE.F3111_HUB", "source.dbt_grizzly.RAW_JDE.F3111_HUB", "source.dbt_grizzly.RAW_JDE.F3111_S01", "source.dbt_grizzly.RAW_JDE.F3111_S01"], "model.dbt_grizzly.dwh_work_order_tmp": ["source.dbt_grizzly.RAW_JDE.F4801_HUB", "source.dbt_grizzly.RAW_JDE.F4801_HUB", "source.dbt_grizzly.RAW_JDE.F4801_S01", "source.dbt_grizzly.RAW_JDE.F4801_S01"], "model.dbt_grizzly.dwh_work_order_hub": ["model.dbt_grizzly.dwh_work_order_tmp"], "model.dbt_grizzly.dwh_work_order_parts_list_hub": ["model.dbt_grizzly.dwh_work_order_parts_list_tmp"], "model.dbt_grizzly.dwh_work_order_parts_list_sat": ["model.dbt_grizzly.dwh_work_order_parts_list_tmp"], "model.dbt_grizzly.dwh_work_order_sat": ["model.dbt_grizzly.dwh_work_order_tmp"], "model.dbt_grizzly.dwh_ddo_parent_company_tmp": ["source.dbt_grizzly.PARAMETERS.AD_P_PARAM"], "model.dbt_grizzly.dwh_ddo_parent_company_hub": ["model.dbt_grizzly.dwh_ddo_parent_company_tmp"], "model.dbt_grizzly.dwh_ddo_parent_company_sat": ["model.dbt_grizzly.dwh_ddo_parent_company_tmp"], "model.dbt_grizzly.ddo_parent_company": ["model.dbt_grizzly.dwh_ddo_parent_company_hub", "model.dbt_grizzly.dwh_ddo_parent_company_sat"], "model.dbt_grizzly.purchase_order": ["source.dbt_grizzly.ITEM.ITEM_COEFF_MEASURE_UNIT_HUB", "source.dbt_grizzly.ITEM.ITEM_COEFF_MEASURE_UNIT_SAT", "source.dbt_grizzly.ITEM.ITEM_COEFF_MEASURE_UNIT_SAT", "source.dbt_grizzly.PARAMETERS.CALENDAR_HUB", "source.dbt_grizzly.PARAMETERS.CALENDAR_SAT", "source.dbt_grizzly.PURCHASE.PURCHASE_ORDER_DETAIL_HUB", "source.dbt_grizzly.PURCHASE.PURCHASE_ORDER_DETAIL_SAT", "source.dbt_grizzly.PURCHASE.PURCHASE_ORDER_DETAIL_SAT"], "model.dbt_grizzly.dwh_site_tmp": ["source.dbt_grizzly.PARAMETERS.AD_P_PARAM", "source.dbt_grizzly.RAW_JDE.F0005_HUB", "source.dbt_grizzly.RAW_JDE.F0005_HUB", "source.dbt_grizzly.RAW_JDE.F0005_S01", "source.dbt_grizzly.RAW_JDE.F0005_S01", "source.dbt_grizzly.RAW_JDE.F0006_HUB", "source.dbt_grizzly.RAW_JDE.F0006_HUB", "source.dbt_grizzly.RAW_JDE.F0006_S01", "source.dbt_grizzly.RAW_JDE.F0006_S01", "source.dbt_grizzly.RAW_JDE.F0101_HUB", "source.dbt_grizzly.RAW_JDE.F0101_HUB", "source.dbt_grizzly.RAW_JDE.F0101_S01", "source.dbt_grizzly.RAW_JDE.F0101_S01"], "model.dbt_grizzly.dwh_site_company_link": ["model.dbt_grizzly.dwh_site_tmp"], "model.dbt_grizzly.dwh_site_customer_link": ["model.dbt_grizzly.dwh_site_tmp"], "model.dbt_grizzly.dwh_site_hub": ["model.dbt_grizzly.dwh_site_tmp"], "model.dbt_grizzly.dwh_site_sat": ["model.dbt_grizzly.dwh_site_tmp"], "model.dbt_grizzly.site": ["model.dbt_grizzly.dwh_site_hub", "model.dbt_grizzly.dwh_site_sat"], "model.dbt_grizzly.work_order": ["model.dbt_grizzly.dwh_work_order_hub", "model.dbt_grizzly.dwh_work_order_sat"], "model.dbt_grizzly.work_order_parts_list": ["model.dbt_grizzly.dwh_work_order_hub", "model.dbt_grizzly.dwh_work_order_parts_list_sat", "model.dbt_grizzly.dwh_work_order_parts_list_sat", "model.dbt_grizzly.dwh_work_order_sat"], "test.dbt_grizzly.unique_dwh_dscp_period_inventory_tmp_PERIOD_INVENTORY_KEY.207bedbe01": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp"], "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_ITEM_CD.9ee4c4da52": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp"], "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_SITE_CD.ca3aeedafb": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp"], "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_TIME_ID.77124ab5e6": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp"], "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_PHOTO_DT.b182a9ce5c": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp"], "test.dbt_grizzly.unique_dwh_dscp_period_inventory_hub_PERIOD_INVENTORY_KEY.4375ed001c": ["model.dbt_grizzly.dwh_dscp_period_inventory_hub"], "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_ITEM_CD.1b0032a9eb": ["model.dbt_grizzly.dwh_dscp_period_inventory_hub"], "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_SITE_CD.005304f94e": ["model.dbt_grizzly.dwh_dscp_period_inventory_hub"], "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_TIME_ID.d7ad6b19c7": ["model.dbt_grizzly.dwh_dscp_period_inventory_hub"], "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_PHOTO_DT.4c01882e52": ["model.dbt_grizzly.dwh_dscp_period_inventory_hub"], "test.dbt_grizzly.not_null_dwh_work_order_parts_list_tmp_PARTS_LIST_KEY.b5bd3080bb": ["model.dbt_grizzly.dwh_work_order_parts_list_tmp"], "test.dbt_grizzly.unique_dwh_work_order_parts_list_hub_PARTS_LIST_KEY.8752a71f23": ["model.dbt_grizzly.dwh_work_order_parts_list_hub"], "test.dbt_grizzly.not_null_dwh_work_order_parts_list_hub_PARTS_LIST_KEY.05eb527fb3": ["model.dbt_grizzly.dwh_work_order_parts_list_hub"], "test.dbt_grizzly.not_null_dwh_ddo_parent_company_tmp_PARENT_COMPANY_KEY.f69d0898f3": ["model.dbt_grizzly.dwh_ddo_parent_company_tmp"], "test.dbt_grizzly.unique_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY.9bd6c81548": ["model.dbt_grizzly.dwh_ddo_parent_company_hub"], "test.dbt_grizzly.not_null_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY.5824042b7b": ["model.dbt_grizzly.dwh_ddo_parent_company_hub"], "test.dbt_grizzly.unique_dwh_site_tmp_SITE_KEY.e2166ec73b": ["model.dbt_grizzly.dwh_site_tmp"], "test.dbt_grizzly.not_null_dwh_site_tmp_SITE_CD.99392ab9d7": ["model.dbt_grizzly.dwh_site_tmp"], "test.dbt_grizzly.unique_dwh_site_company_link_SITE_COMPANY_LINK_KEY.dbe397ae81": ["model.dbt_grizzly.dwh_site_company_link"], "test.dbt_grizzly.unique_dwh_site_CUSTOMER_link_SITE_CUSTOMER_LINK_KEY.da9cb6041b": [], "test.dbt_grizzly.unique_dwh_site_hub_SITE_KEY.2239e655cc": ["model.dbt_grizzly.dwh_site_hub"], "test.dbt_grizzly.not_null_dwh_site_hub_SITE_CD.a2963a92f4": ["model.dbt_grizzly.dwh_site_hub"], "source.dbt_grizzly.ITEM.ITEM_COEFF_MEASURE_UNIT_HUB": [], "source.dbt_grizzly.ITEM.ITEM_COEFF_MEASURE_UNIT_SAT": [], "source.dbt_grizzly.RAW_JDE.F0005_HUB": [], "source.dbt_grizzly.RAW_JDE.F0005_S01": [], "source.dbt_grizzly.RAW_JDE.F0006_HUB": [], "source.dbt_grizzly.RAW_JDE.F0006_S01": [], "source.dbt_grizzly.RAW_JDE.F0101_HUB": [], "source.dbt_grizzly.RAW_JDE.F0101_S01": [], "source.dbt_grizzly.RAW_JDE.F3111_HUB": [], "source.dbt_grizzly.RAW_JDE.F3111_S01": [], "source.dbt_grizzly.RAW_JDE.F4101_HUB": [], "source.dbt_grizzly.RAW_JDE.F4101_S01": [], "source.dbt_grizzly.RAW_JDE.F4801_HUB": [], "source.dbt_grizzly.RAW_JDE.F4801_S01": [], "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DEB_PERIODE_HUB": [], "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DEB_PERIODE_S01": [], "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DISPO_HUB": [], "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DISPO_S01": [], "source.dbt_grizzly.PARAMETERS.AD_P_PARAM": [], "source.dbt_grizzly.PARAMETERS.CALENDAR_HUB": [], "source.dbt_grizzly.PARAMETERS.CALENDAR_SAT": [], "source.dbt_grizzly.PURCHASE.PURCHASE_ORDER_DETAIL_HUB": [], "source.dbt_grizzly.PURCHASE.PURCHASE_ORDER_DETAIL_SAT": []}, "child_map": {"model.dbt_grizzly.dwh_dscp_period_inventory_tmp": ["model.dbt_grizzly.dwh_dscp_period_inventory_hub", "model.dbt_grizzly.dwh_dscp_period_inventory_sat", "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_ITEM_CD.9ee4c4da52", "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_PHOTO_DT.b182a9ce5c", "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_SITE_CD.ca3aeedafb", "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_TIME_ID.77124ab5e6", "test.dbt_grizzly.unique_dwh_dscp_period_inventory_tmp_PERIOD_INVENTORY_KEY.207bedbe01"], "model.dbt_grizzly.dwh_dscp_period_inventory_hub": ["model.dbt_grizzly.planned_stock", "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_ITEM_CD.1b0032a9eb", "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_PHOTO_DT.4c01882e52", "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_SITE_CD.005304f94e", "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_TIME_ID.d7ad6b19c7", "test.dbt_grizzly.unique_dwh_dscp_period_inventory_hub_PERIOD_INVENTORY_KEY.4375ed001c"], "model.dbt_grizzly.dwh_dscp_period_inventory_sat": ["model.dbt_grizzly.planned_stock"], "model.dbt_grizzly.planned_stock": [], "model.dbt_grizzly.dwh_work_order_parts_list_tmp": ["model.dbt_grizzly.dwh_work_order_parts_list_hub", "model.dbt_grizzly.dwh_work_order_parts_list_sat", "test.dbt_grizzly.not_null_dwh_work_order_parts_list_tmp_PARTS_LIST_KEY.b5bd3080bb"], "model.dbt_grizzly.dwh_work_order_tmp": ["model.dbt_grizzly.dwh_work_order_hub", "model.dbt_grizzly.dwh_work_order_sat"], "model.dbt_grizzly.dwh_work_order_hub": ["model.dbt_grizzly.work_order", "model.dbt_grizzly.work_order_parts_list"], "model.dbt_grizzly.dwh_work_order_parts_list_hub": ["test.dbt_grizzly.not_null_dwh_work_order_parts_list_hub_PARTS_LIST_KEY.05eb527fb3", "test.dbt_grizzly.unique_dwh_work_order_parts_list_hub_PARTS_LIST_KEY.8752a71f23"], "model.dbt_grizzly.dwh_work_order_parts_list_sat": ["model.dbt_grizzly.work_order_parts_list", "model.dbt_grizzly.work_order_parts_list"], "model.dbt_grizzly.dwh_work_order_sat": ["model.dbt_grizzly.work_order", "model.dbt_grizzly.work_order_parts_list"], "model.dbt_grizzly.dwh_ddo_parent_company_tmp": ["model.dbt_grizzly.dwh_ddo_parent_company_hub", "model.dbt_grizzly.dwh_ddo_parent_company_sat", "test.dbt_grizzly.not_null_dwh_ddo_parent_company_tmp_PARENT_COMPANY_KEY.f69d0898f3"], "model.dbt_grizzly.dwh_ddo_parent_company_hub": ["model.dbt_grizzly.ddo_parent_company", "test.dbt_grizzly.not_null_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY.5824042b7b", "test.dbt_grizzly.unique_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY.9bd6c81548"], "model.dbt_grizzly.dwh_ddo_parent_company_sat": ["model.dbt_grizzly.ddo_parent_company"], "model.dbt_grizzly.ddo_parent_company": [], "model.dbt_grizzly.purchase_order": [], "model.dbt_grizzly.dwh_site_tmp": ["model.dbt_grizzly.dwh_site_company_link", "model.dbt_grizzly.dwh_site_customer_link", "model.dbt_grizzly.dwh_site_hub", "model.dbt_grizzly.dwh_site_sat", "test.dbt_grizzly.not_null_dwh_site_tmp_SITE_CD.99392ab9d7", "test.dbt_grizzly.unique_dwh_site_tmp_SITE_KEY.e2166ec73b"], "model.dbt_grizzly.dwh_site_company_link": ["test.dbt_grizzly.unique_dwh_site_company_link_SITE_COMPANY_LINK_KEY.dbe397ae81"], "model.dbt_grizzly.dwh_site_customer_link": [], "model.dbt_grizzly.dwh_site_hub": ["model.dbt_grizzly.site", "test.dbt_grizzly.not_null_dwh_site_hub_SITE_CD.a2963a92f4", "test.dbt_grizzly.unique_dwh_site_hub_SITE_KEY.2239e655cc"], "model.dbt_grizzly.dwh_site_sat": ["model.dbt_grizzly.site"], "model.dbt_grizzly.site": [], "model.dbt_grizzly.work_order": [], "model.dbt_grizzly.work_order_parts_list": [], "test.dbt_grizzly.unique_dwh_dscp_period_inventory_tmp_PERIOD_INVENTORY_KEY.207bedbe01": [], "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_ITEM_CD.9ee4c4da52": [], "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_SITE_CD.ca3aeedafb": [], "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_TIME_ID.77124ab5e6": [], "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_tmp_PHOTO_DT.b182a9ce5c": [], "test.dbt_grizzly.unique_dwh_dscp_period_inventory_hub_PERIOD_INVENTORY_KEY.4375ed001c": [], "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_ITEM_CD.1b0032a9eb": [], "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_SITE_CD.005304f94e": [], "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_TIME_ID.d7ad6b19c7": [], "test.dbt_grizzly.not_null_dwh_dscp_period_inventory_hub_PHOTO_DT.4c01882e52": [], "test.dbt_grizzly.not_null_dwh_work_order_parts_list_tmp_PARTS_LIST_KEY.b5bd3080bb": [], "test.dbt_grizzly.unique_dwh_work_order_parts_list_hub_PARTS_LIST_KEY.8752a71f23": [], "test.dbt_grizzly.not_null_dwh_work_order_parts_list_hub_PARTS_LIST_KEY.05eb527fb3": [], "test.dbt_grizzly.not_null_dwh_ddo_parent_company_tmp_PARENT_COMPANY_KEY.f69d0898f3": [], "test.dbt_grizzly.unique_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY.9bd6c81548": [], "test.dbt_grizzly.not_null_dwh_ddo_parent_company_hub_PARENT_COMPANY_KEY.5824042b7b": [], "test.dbt_grizzly.unique_dwh_site_tmp_SITE_KEY.e2166ec73b": [], "test.dbt_grizzly.not_null_dwh_site_tmp_SITE_CD.99392ab9d7": [], "test.dbt_grizzly.unique_dwh_site_company_link_SITE_COMPANY_LINK_KEY.dbe397ae81": [], "test.dbt_grizzly.unique_dwh_site_CUSTOMER_link_SITE_CUSTOMER_LINK_KEY.da9cb6041b": [], "test.dbt_grizzly.unique_dwh_site_hub_SITE_KEY.2239e655cc": [], "test.dbt_grizzly.not_null_dwh_site_hub_SITE_CD.a2963a92f4": [], "source.dbt_grizzly.ITEM.ITEM_COEFF_MEASURE_UNIT_HUB": ["model.dbt_grizzly.purchase_order"], "source.dbt_grizzly.ITEM.ITEM_COEFF_MEASURE_UNIT_SAT": ["model.dbt_grizzly.purchase_order", "model.dbt_grizzly.purchase_order"], "source.dbt_grizzly.RAW_JDE.F0005_HUB": ["model.dbt_grizzly.dwh_site_tmp", "model.dbt_grizzly.dwh_site_tmp"], "source.dbt_grizzly.RAW_JDE.F0005_S01": ["model.dbt_grizzly.dwh_site_tmp", "model.dbt_grizzly.dwh_site_tmp"], "source.dbt_grizzly.RAW_JDE.F0006_HUB": ["model.dbt_grizzly.dwh_site_tmp", "model.dbt_grizzly.dwh_site_tmp"], "source.dbt_grizzly.RAW_JDE.F0006_S01": ["model.dbt_grizzly.dwh_site_tmp", "model.dbt_grizzly.dwh_site_tmp"], "source.dbt_grizzly.RAW_JDE.F0101_HUB": ["model.dbt_grizzly.dwh_site_tmp", "model.dbt_grizzly.dwh_site_tmp"], "source.dbt_grizzly.RAW_JDE.F0101_S01": ["model.dbt_grizzly.dwh_site_tmp", "model.dbt_grizzly.dwh_site_tmp"], "source.dbt_grizzly.RAW_JDE.F3111_HUB": ["model.dbt_grizzly.dwh_work_order_parts_list_tmp", "model.dbt_grizzly.dwh_work_order_parts_list_tmp"], "source.dbt_grizzly.RAW_JDE.F3111_S01": ["model.dbt_grizzly.dwh_work_order_parts_list_tmp", "model.dbt_grizzly.dwh_work_order_parts_list_tmp"], "source.dbt_grizzly.RAW_JDE.F4101_HUB": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp", "model.dbt_grizzly.dwh_dscp_period_inventory_tmp"], "source.dbt_grizzly.RAW_JDE.F4101_S01": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp", "model.dbt_grizzly.dwh_dscp_period_inventory_tmp"], "source.dbt_grizzly.RAW_JDE.F4801_HUB": ["model.dbt_grizzly.dwh_work_order_tmp", "model.dbt_grizzly.dwh_work_order_tmp"], "source.dbt_grizzly.RAW_JDE.F4801_S01": ["model.dbt_grizzly.dwh_work_order_tmp", "model.dbt_grizzly.dwh_work_order_tmp"], "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DEB_PERIODE_HUB": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp", "model.dbt_grizzly.dwh_dscp_period_inventory_tmp"], "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DEB_PERIODE_S01": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp", "model.dbt_grizzly.dwh_dscp_period_inventory_tmp"], "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DISPO_HUB": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp", "model.dbt_grizzly.dwh_dscp_period_inventory_tmp"], "source.dbt_grizzly.RAW_NSKEP.E_DD_STOCK_DISPO_S01": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp", "model.dbt_grizzly.dwh_dscp_period_inventory_tmp"], "source.dbt_grizzly.PARAMETERS.AD_P_PARAM": ["model.dbt_grizzly.dwh_ddo_parent_company_tmp", "model.dbt_grizzly.dwh_site_tmp"], "source.dbt_grizzly.PARAMETERS.CALENDAR_HUB": ["model.dbt_grizzly.dwh_dscp_period_inventory_tmp", "model.dbt_grizzly.dwh_dscp_period_inventory_tmp", "model.dbt_grizzly.planned_stock", "model.dbt_grizzly.purchase_order"], "source.dbt_grizzly.PARAMETERS.CALENDAR_SAT": ["model.dbt_grizzly.purchase_order"], "source.dbt_grizzly.PURCHASE.PURCHASE_ORDER_DETAIL_HUB": ["model.dbt_grizzly.purchase_order"], "source.dbt_grizzly.PURCHASE.PURCHASE_ORDER_DETAIL_SAT": ["model.dbt_grizzly.purchase_order", "model.dbt_grizzly.purchase_order"]}}